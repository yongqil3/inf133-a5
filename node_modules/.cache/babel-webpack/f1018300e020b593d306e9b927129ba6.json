{"ast":null,"code":"import _asyncToGenerator from \"/Users/ryanliang/Downloads/main_movir_picker/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport { DataSource } from '../datasource';\nimport { urlChunkIterator } from '../iterators/url_chunk_iterator';\nimport { isLocalPath } from '../util/source_util';\nimport { FileDataSource } from './file_data_source';\n/*\n * Represents a URL readable as a stream of binary data chunks.\n */\n\nexport class URLDataSource extends DataSource {\n  /**\n   * Create a `URLDataSource`.\n   *\n   * @param url A source URL string, or a `Request` object.\n   * @param options Options passed to the underlying `FileChunkIterator`s,\n   *   such as {chunksize: 1024}.\n   */\n  constructor(url, fileOptions = {}) {\n    super();\n    this.url = url;\n    this.fileOptions = fileOptions;\n  } // TODO(soergel): provide appropriate caching options.  Currently this\n  // will download the URL anew for each call to iterator().  Since we have\n  // to treat the downloaded file as a blob/buffer anyway, we may as well retain\n  // it-- but that raises GC issues.  Also we may want a persistent disk cache.\n\n\n  iterator() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (isLocalPath(_this.url)) {\n        return new FileDataSource(_this.url, _this.fileOptions).iterator();\n      } else {\n        return urlChunkIterator(_this.url, _this.fileOptions);\n      }\n    })();\n  }\n\n}","map":{"version":3,"sources":["/Users/ryanliang/Downloads/main_movir_picker/node_modules/@tensorflow/tfjs-data/dist/sources/url_data_source.js"],"names":["DataSource","urlChunkIterator","isLocalPath","FileDataSource","URLDataSource","constructor","url","fileOptions","iterator"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,UAAT,QAA2B,eAA3B;AACA,SAASC,gBAAT,QAAiC,iCAAjC;AACA,SAASC,WAAT,QAA4B,qBAA5B;AACA,SAASC,cAAT,QAA+B,oBAA/B;AACA;AACA;AACA;;AACA,OAAO,MAAMC,aAAN,SAA4BJ,UAA5B,CAAuC;AAC1C;AACJ;AACA;AACA;AACA;AACA;AACA;AACIK,EAAAA,WAAW,CAACC,GAAD,EAAMC,WAAW,GAAG,EAApB,EAAwB;AAC/B;AACA,SAAKD,GAAL,GAAWA,GAAX;AACA,SAAKC,WAAL,GAAmBA,WAAnB;AACH,GAZyC,CAa1C;AACA;AACA;AACA;;;AACMC,EAAAA,QAAQ,GAAG;AAAA;;AAAA;AACb,UAAIN,WAAW,CAAC,KAAI,CAACI,GAAN,CAAf,EAA2B;AACvB,eAAQ,IAAIH,cAAJ,CAAmB,KAAI,CAACG,GAAxB,EAA6B,KAAI,CAACC,WAAlC,CAAD,CACFC,QADE,EAAP;AAEH,OAHD,MAIK;AACD,eAAOP,gBAAgB,CAAC,KAAI,CAACK,GAAN,EAAW,KAAI,CAACC,WAAhB,CAAvB;AACH;AAPY;AAQhB;;AAzByC","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport { DataSource } from '../datasource';\nimport { urlChunkIterator } from '../iterators/url_chunk_iterator';\nimport { isLocalPath } from '../util/source_util';\nimport { FileDataSource } from './file_data_source';\n/*\n * Represents a URL readable as a stream of binary data chunks.\n */\nexport class URLDataSource extends DataSource {\n    /**\n     * Create a `URLDataSource`.\n     *\n     * @param url A source URL string, or a `Request` object.\n     * @param options Options passed to the underlying `FileChunkIterator`s,\n     *   such as {chunksize: 1024}.\n     */\n    constructor(url, fileOptions = {}) {\n        super();\n        this.url = url;\n        this.fileOptions = fileOptions;\n    }\n    // TODO(soergel): provide appropriate caching options.  Currently this\n    // will download the URL anew for each call to iterator().  Since we have\n    // to treat the downloaded file as a blob/buffer anyway, we may as well retain\n    // it-- but that raises GC issues.  Also we may want a persistent disk cache.\n    async iterator() {\n        if (isLocalPath(this.url)) {\n            return (new FileDataSource(this.url, this.fileOptions))\n                .iterator();\n        }\n        else {\n            return urlChunkIterator(this.url, this.fileOptions);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}
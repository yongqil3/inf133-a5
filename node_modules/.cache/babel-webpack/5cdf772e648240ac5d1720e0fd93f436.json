{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * Shuffles the array in-place using Fisher-Yates algorithm.\n *\n * ```js\n * const a = [1, 2, 3, 4, 5];\n * tf.util.shuffle(a);\n * console.log(a);\n * ```\n *\n * @param array The array to shuffle in-place.\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\n// tslint:disable-next-line:no-any\nexport function shuffle(array) {\n  let counter = array.length;\n  let temp = 0;\n  let index = 0; // While there are elements in the array\n\n  while (counter > 0) {\n    // Pick a random index\n    index = Math.random() * counter | 0; // Decrease counter by 1\n\n    counter--; // And swap the last element with it\n\n    temp = array[counter];\n    array[counter] = array[index];\n    array[index] = temp;\n  }\n}\n/**\n * Shuffles two arrays in-place the same way using Fisher-Yates algorithm.\n *\n * ```js\n * const a = [1,2,3,4,5];\n * const b = [11,22,33,44,55];\n * tf.util.shuffleCombo(a, b);\n * console.log(a, b);\n * ```\n *\n * @param array The first array to shuffle in-place.\n * @param array2 The second array to shuffle in-place with the same permutation\n *     as the first array.\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\n// tslint:disable-next-line:no-any\n\nexport function shuffleCombo(array, // tslint:disable-next-line:no-any\narray2) {\n  if (array.length !== array2.length) {\n    throw new Error(`Array sizes must match to be shuffled together ` + `First array length was ${array.length}` + `Second array length was ${array2.length}`);\n  }\n\n  let counter = array.length;\n  let temp, temp2;\n  let index = 0; // While there are elements in the array\n\n  while (counter > 0) {\n    // Pick a random index\n    index = Math.random() * counter | 0; // Decrease counter by 1\n\n    counter--; // And swap the last element of each array with it\n\n    temp = array[counter];\n    temp2 = array2[counter];\n    array[counter] = array[index];\n    array2[counter] = array2[index];\n    array[index] = temp;\n    array2[index] = temp2;\n  }\n}\n/** Clamps a value to a specified range. */\n\nexport function clamp(min, x, max) {\n  return Math.max(min, Math.min(x, max));\n}\nexport function nearestLargerEven(val) {\n  return val % 2 === 0 ? val : val + 1;\n}\nexport function sum(arr) {\n  let sum = 0;\n\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n\n  return sum;\n}\n/**\n * Returns a sample from a uniform [a, b) distribution.\n *\n * @param a The minimum support (inclusive).\n * @param b The maximum support (exclusive).\n * @return A pseudorandom number on the half-open interval [a,b).\n */\n\nexport function randUniform(a, b) {\n  const r = Math.random();\n  return b * r + (1 - r) * a;\n}\n/** Returns the squared Euclidean distance between two vectors. */\n\nexport function distSquared(a, b) {\n  let result = 0;\n\n  for (let i = 0; i < a.length; i++) {\n    const diff = Number(a[i]) - Number(b[i]);\n    result += diff * diff;\n  }\n\n  return result;\n}\n/**\n * Asserts that the expression is true. Otherwise throws an error with the\n * provided message.\n *\n * ```js\n * const x = 2;\n * tf.util.assert(x === 2, 'x is not 2');\n * ```\n *\n * @param expr The expression to assert (as a boolean).\n * @param msg A function that returns the message to report when throwing an\n *     error. We use a function for performance reasons.\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\n\nexport function assert(expr, msg) {\n  if (!expr) {\n    throw new Error(typeof msg === 'string' ? msg : msg());\n  }\n}\nexport function assertShapesMatch(shapeA, shapeB, errorMessagePrefix = '') {\n  assert(arraysEqual(shapeA, shapeB), () => errorMessagePrefix + ` Shapes ${shapeA} and ${shapeB} must match`);\n}\nexport function assertNonNull(a) {\n  assert(a != null, () => `The input to the tensor constructor must be a non-null value.`);\n} // NOTE: We explicitly type out what T extends instead of any so that\n// util.flatten on a nested array of number doesn't try to infer T as a\n// number[][], causing us to explicitly type util.flatten<number>().\n\n/**\n *  Flattens an arbitrarily nested array.\n *\n * ```js\n * const a = [[1, 2], [3, 4], [5, [6, [7]]]];\n * const flat = tf.util.flatten(a);\n * console.log(flat);\n * ```\n *\n *  @param arr The nested array to flatten.\n *  @param result The destination array which holds the elements.\n *  @param skipTypedArray If true, avoids flattening the typed arrays. Defaults\n *      to false.\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\n\nexport function flatten(arr, result = [], skipTypedArray = false) {\n  if (result == null) {\n    result = [];\n  }\n\n  if (Array.isArray(arr) || isTypedArray(arr) && !skipTypedArray) {\n    for (let i = 0; i < arr.length; ++i) {\n      flatten(arr[i], result, skipTypedArray);\n    }\n  } else {\n    result.push(arr);\n  }\n\n  return result;\n}\n/**\n * Returns the size (number of elements) of the tensor given its shape.\n *\n * ```js\n * const shape = [3, 4, 2];\n * const size = tf.util.sizeFromShape(shape);\n * console.log(size);\n * ```\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\n\nexport function sizeFromShape(shape) {\n  if (shape.length === 0) {\n    // Scalar.\n    return 1;\n  }\n\n  let size = shape[0];\n\n  for (let i = 1; i < shape.length; i++) {\n    size *= shape[i];\n  }\n\n  return size;\n}\nexport function isScalarShape(shape) {\n  return shape.length === 0;\n}\nexport function arraysEqual(n1, n2) {\n  if (n1 === n2) {\n    return true;\n  }\n\n  if (n1 == null || n2 == null) {\n    return false;\n  }\n\n  if (n1.length !== n2.length) {\n    return false;\n  }\n\n  for (let i = 0; i < n1.length; i++) {\n    if (n1[i] !== n2[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\nexport function isInt(a) {\n  return a % 1 === 0;\n}\nexport function tanh(x) {\n  // tslint:disable-next-line:no-any\n  if (Math.tanh != null) {\n    // tslint:disable-next-line:no-any\n    return Math.tanh(x);\n  }\n\n  if (x === Infinity) {\n    return 1;\n  } else if (x === -Infinity) {\n    return -1;\n  } else {\n    const e2x = Math.exp(2 * x);\n    return (e2x - 1) / (e2x + 1);\n  }\n}\nexport function sizeToSquarishShape(size) {\n  const width = Math.ceil(Math.sqrt(size));\n  return [width, Math.ceil(size / width)];\n}\n/**\n * Creates a new array with randomized indicies to a given quantity.\n *\n * ```js\n * const randomTen = tf.util.createShuffledIndices(10);\n * console.log(randomTen);\n * ```\n *\n * @param number Quantity of how many shuffled indicies to create.\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\n\nexport function createShuffledIndices(n) {\n  const shuffledIndices = new Uint32Array(n);\n\n  for (let i = 0; i < n; ++i) {\n    shuffledIndices[i] = i;\n  }\n\n  shuffle(shuffledIndices);\n  return shuffledIndices;\n}\nexport function rightPad(a, size) {\n  if (size <= a.length) {\n    return a;\n  }\n\n  return a + ' '.repeat(size - a.length);\n}\nexport function repeatedTry(checkFn, delayFn = counter => 0, maxCounter) {\n  return new Promise((resolve, reject) => {\n    let tryCount = 0;\n\n    const tryFn = () => {\n      if (checkFn()) {\n        resolve();\n        return;\n      }\n\n      tryCount++;\n      const nextBackoff = delayFn(tryCount);\n\n      if (maxCounter != null && tryCount >= maxCounter) {\n        reject();\n        return;\n      }\n\n      setTimeout(tryFn, nextBackoff);\n    };\n\n    tryFn();\n  });\n}\n/**\n * Given the full size of the array and a shape that may contain -1 as the\n * implicit dimension, returns the inferred shape where -1 is replaced.\n * E.g. For shape=[2, -1, 3] and size=24, it will return [2, 4, 3].\n *\n * @param shape The shape, which may contain -1 in some dimension.\n * @param size The full size (number of elements) of the array.\n * @return The inferred shape where -1 is replaced with the inferred size.\n */\n\nexport function inferFromImplicitShape(shape, size) {\n  let shapeProd = 1;\n  let implicitIdx = -1;\n\n  for (let i = 0; i < shape.length; ++i) {\n    if (shape[i] >= 0) {\n      shapeProd *= shape[i];\n    } else if (shape[i] === -1) {\n      if (implicitIdx !== -1) {\n        throw Error(`Shapes can only have 1 implicit size. ` + `Found -1 at dim ${implicitIdx} and dim ${i}`);\n      }\n\n      implicitIdx = i;\n    } else if (shape[i] < 0) {\n      throw Error(`Shapes can not be < 0. Found ${shape[i]} at dim ${i}`);\n    }\n  }\n\n  if (implicitIdx === -1) {\n    if (size > 0 && size !== shapeProd) {\n      throw Error(`Size(${size}) must match the product of shape ${shape}`);\n    }\n\n    return shape;\n  }\n\n  if (shapeProd === 0) {\n    throw Error(`Cannot infer the missing size in [${shape}] when ` + `there are 0 elements`);\n  }\n\n  if (size % shapeProd !== 0) {\n    throw Error(`The implicit shape can't be a fractional number. ` + `Got ${size} / ${shapeProd}`);\n  }\n\n  const newShape = shape.slice();\n  newShape[implicitIdx] = size / shapeProd;\n  return newShape;\n}\nexport function parseAxisParam(axis, shape) {\n  const rank = shape.length; // Normalize input\n\n  axis = axis == null ? shape.map((s, i) => i) : [].concat(axis); // Check for valid range\n\n  assert(axis.every(ax => ax >= -rank && ax < rank), () => `All values in axis param must be in range [-${rank}, ${rank}) but ` + `got axis ${axis}`); // Check for only integers\n\n  assert(axis.every(ax => isInt(ax)), () => `All values in axis param must be integers but ` + `got axis ${axis}`); // Handle negative axis.\n\n  return axis.map(a => a < 0 ? rank + a : a);\n}\n/** Reduces the shape by removing all dimensions of shape 1. */\n\nexport function squeezeShape(shape, axis) {\n  const newShape = [];\n  const keptDims = [];\n  const isEmptyArray = axis != null && Array.isArray(axis) && axis.length === 0;\n  const axes = axis == null || isEmptyArray ? null : parseAxisParam(axis, shape).sort();\n  let j = 0;\n\n  for (let i = 0; i < shape.length; ++i) {\n    if (axes != null) {\n      if (axes[j] === i && shape[i] !== 1) {\n        throw new Error(`Can't squeeze axis ${i} since its dim '${shape[i]}' is not 1`);\n      }\n\n      if ((axes[j] == null || axes[j] > i) && shape[i] === 1) {\n        newShape.push(shape[i]);\n        keptDims.push(i);\n      }\n\n      if (axes[j] <= i) {\n        j++;\n      }\n    }\n\n    if (shape[i] !== 1) {\n      newShape.push(shape[i]);\n      keptDims.push(i);\n    }\n  }\n\n  return {\n    newShape,\n    keptDims\n  };\n}\nexport function getTypedArrayFromDType(dtype, size) {\n  let values = null;\n\n  if (dtype == null || dtype === 'float32') {\n    values = new Float32Array(size);\n  } else if (dtype === 'int32') {\n    values = new Int32Array(size);\n  } else if (dtype === 'bool') {\n    values = new Uint8Array(size);\n  } else {\n    throw new Error(`Unknown data type ${dtype}`);\n  }\n\n  return values;\n}\nexport function getArrayFromDType(dtype, size) {\n  let values = null;\n\n  if (dtype == null || dtype === 'float32') {\n    values = new Float32Array(size);\n  } else if (dtype === 'int32') {\n    values = new Int32Array(size);\n  } else if (dtype === 'bool') {\n    values = new Uint8Array(size);\n  } else if (dtype === 'string') {\n    values = new Array(size);\n  } else {\n    throw new Error(`Unknown data type ${dtype}`);\n  }\n\n  return values;\n}\nexport function checkConversionForErrors(vals, dtype) {\n  for (let i = 0; i < vals.length; i++) {\n    const num = vals[i];\n\n    if (isNaN(num) || !isFinite(num)) {\n      throw Error(`A tensor of type ${dtype} being uploaded contains ${num}.`);\n    }\n  }\n}\n/** Returns true if the dtype is valid. */\n\nexport function isValidDtype(dtype) {\n  return dtype === 'bool' || dtype === 'complex64' || dtype === 'float32' || dtype === 'int32' || dtype === 'string';\n}\n/**\n * Returns true if the new type can't encode the old type without loss of\n * precision.\n */\n\nexport function hasEncodingLoss(oldType, newType) {\n  if (newType === 'complex64') {\n    return false;\n  }\n\n  if (newType === 'float32' && oldType !== 'complex64') {\n    return false;\n  }\n\n  if (newType === 'int32' && oldType !== 'float32' && oldType !== 'complex64') {\n    return false;\n  }\n\n  if (newType === 'bool' && oldType === 'bool') {\n    return false;\n  }\n\n  return true;\n}\nexport function isTypedArray(a) {\n  return a instanceof Float32Array || a instanceof Int32Array || a instanceof Uint8Array;\n}\nexport function bytesPerElement(dtype) {\n  if (dtype === 'float32' || dtype === 'int32') {\n    return 4;\n  } else if (dtype === 'complex64') {\n    return 8;\n  } else if (dtype === 'bool') {\n    return 1;\n  } else {\n    throw new Error(`Unknown dtype ${dtype}`);\n  }\n}\n/**\n * Returns the approximate number of bytes allocated in the string array - 2\n * bytes per character. Computing the exact bytes for a native string in JS is\n * not possible since it depends on the encoding of the html page that serves\n * the website.\n */\n\nexport function bytesFromStringArray(arr) {\n  if (arr == null) {\n    return 0;\n  }\n\n  let bytes = 0;\n  arr.forEach(x => bytes += x.length);\n  return bytes;\n}\n/** Returns true if the value is a string. */\n\nexport function isString(value) {\n  return typeof value === 'string' || value instanceof String;\n}\nexport function isBoolean(value) {\n  return typeof value === 'boolean';\n}\nexport function isNumber(value) {\n  return typeof value === 'number';\n}\nexport function inferDtype(values) {\n  if (Array.isArray(values)) {\n    return inferDtype(values[0]);\n  }\n\n  if (values instanceof Float32Array) {\n    return 'float32';\n  } else if (values instanceof Int32Array || values instanceof Uint8Array) {\n    return 'int32';\n  } else if (isNumber(values)) {\n    return 'float32';\n  } else if (isString(values)) {\n    return 'string';\n  } else if (isBoolean(values)) {\n    return 'bool';\n  }\n\n  return 'float32';\n}\nexport function isFunction(f) {\n  return !!(f && f.constructor && f.call && f.apply);\n}\nexport function nearestDivisor(size, start) {\n  for (let i = start; i < size; ++i) {\n    if (size % i === 0) {\n      return i;\n    }\n  }\n\n  return size;\n}\nexport function computeStrides(shape) {\n  const rank = shape.length;\n\n  if (rank < 2) {\n    return [];\n  } // Last dimension has implicit stride of 1, thus having D-1 (instead of D)\n  // strides.\n\n\n  const strides = new Array(rank - 1);\n  strides[rank - 2] = shape[rank - 1];\n\n  for (let i = rank - 3; i >= 0; --i) {\n    strides[i] = strides[i + 1] * shape[i + 1];\n  }\n\n  return strides;\n}\n\nfunction createNestedArray(offset, shape, a) {\n  const ret = new Array();\n\n  if (shape.length === 1) {\n    const d = shape[0];\n\n    for (let i = 0; i < d; i++) {\n      ret[i] = a[offset + i];\n    }\n  } else {\n    const d = shape[0];\n    const rest = shape.slice(1);\n    const len = rest.reduce((acc, c) => acc * c);\n\n    for (let i = 0; i < d; i++) {\n      ret[i] = createNestedArray(offset + i * len, rest, a);\n    }\n  }\n\n  return ret;\n} // Provide a nested array of TypedArray in given shape.\n\n\nexport function toNestedArray(shape, a) {\n  if (shape.length === 0) {\n    // Scalar type should return a single number.\n    return a[0];\n  }\n\n  const size = shape.reduce((acc, c) => acc * c);\n\n  if (size === 0) {\n    // A tensor with shape zero should be turned into empty list.\n    return [];\n  }\n\n  if (size !== a.length) {\n    throw new Error(`[${shape}] does not match the input size ${a.length}.`);\n  }\n\n  return createNestedArray(0, shape, a);\n}\nexport function makeOnesTypedArray(size, dtype) {\n  const array = makeZerosTypedArray(size, dtype);\n\n  for (let i = 0; i < array.length; i++) {\n    array[i] = 1;\n  }\n\n  return array;\n}\nexport function makeZerosTypedArray(size, dtype) {\n  if (dtype == null || dtype === 'float32' || dtype === 'complex64') {\n    return new Float32Array(size);\n  } else if (dtype === 'int32') {\n    return new Int32Array(size);\n  } else if (dtype === 'bool') {\n    return new Uint8Array(size);\n  } else {\n    throw new Error(`Unknown data type ${dtype}`);\n  }\n}\n/**\n * Make nested `TypedArray` filled with zeros.\n * @param shape The shape information for the nested array.\n * @param dtype dtype of the array element.\n */\n\nexport function makeZerosNestedTypedArray(shape, dtype) {\n  const size = shape.reduce((prev, curr) => prev * curr, 1);\n\n  if (dtype == null || dtype === 'float32') {\n    return toNestedArray(shape, new Float32Array(size));\n  } else if (dtype === 'int32') {\n    return toNestedArray(shape, new Int32Array(size));\n  } else if (dtype === 'bool') {\n    return toNestedArray(shape, new Uint8Array(size));\n  } else {\n    throw new Error(`Unknown data type ${dtype}`);\n  }\n}\nexport function assertNonNegativeIntegerDimensions(shape) {\n  shape.forEach(dimSize => {\n    assert(Number.isInteger(dimSize) && dimSize >= 0, () => `Tensor must have a shape comprised of positive integers but got ` + `shape [${shape}].`);\n  });\n}\n/**\n * Computes flat index for a given location (multidimentionsal index) in a\n * Tensor/multidimensional array.\n *\n * @param locs Location in the tensor.\n * @param rank Rank of the tensor.\n * @param strides Tensor strides.\n */\n\nexport function locToIndex(locs, rank, strides) {\n  if (rank === 0) {\n    return 0;\n  } else if (rank === 1) {\n    return locs[0];\n  }\n\n  let index = locs[locs.length - 1];\n\n  for (let i = 0; i < locs.length - 1; ++i) {\n    index += strides[i] * locs[i];\n  }\n\n  return index;\n}\n/**\n * Computes the location (multidimensional index) in a tensor/multidimentional\n * array for a given flat index.\n *\n * @param index Index in flat array.\n * @param rank Rank of tensor.\n * @param strides Strides of tensor.\n */\n\nexport function indexToLoc(index, rank, strides) {\n  if (rank === 0) {\n    return [];\n  } else if (rank === 1) {\n    return [index];\n  }\n\n  const locs = new Array(rank);\n\n  for (let i = 0; i < locs.length - 1; ++i) {\n    locs[i] = Math.floor(index / strides[i]);\n    index -= locs[i] * strides[i];\n  }\n\n  locs[locs.length - 1] = index;\n  return locs;\n}\n/**\n * This method asserts whether an object is a Promise instance.\n * @param object\n */\n// tslint:disable-next-line: no-any\n\nexport function isPromise(object) {\n  //  We chose to not use 'obj instanceOf Promise' for two reasons:\n  //  1. It only reliably works for es6 Promise, not other Promise\n  //  implementations.\n  //  2. It doesn't work with framework that uses zone.js. zone.js monkey patch\n  //  the async calls, so it is possible the obj (patched) is comparing to a\n  //  pre-patched Promise.\n  return object && object.then && typeof object.then === 'function';\n}","map":{"version":3,"sources":["/Users/ryanliang/Downloads/main_movir_picker/node_modules/@tensorflow/tfjs-core/dist/util_base.js"],"names":["shuffle","array","counter","length","temp","index","Math","random","shuffleCombo","array2","Error","temp2","clamp","min","x","max","nearestLargerEven","val","sum","arr","i","randUniform","a","b","r","distSquared","result","diff","Number","assert","expr","msg","assertShapesMatch","shapeA","shapeB","errorMessagePrefix","arraysEqual","assertNonNull","flatten","skipTypedArray","Array","isArray","isTypedArray","push","sizeFromShape","shape","size","isScalarShape","n1","n2","isInt","tanh","Infinity","e2x","exp","sizeToSquarishShape","width","ceil","sqrt","createShuffledIndices","n","shuffledIndices","Uint32Array","rightPad","repeat","repeatedTry","checkFn","delayFn","maxCounter","Promise","resolve","reject","tryCount","tryFn","nextBackoff","setTimeout","inferFromImplicitShape","shapeProd","implicitIdx","newShape","slice","parseAxisParam","axis","rank","map","s","concat","every","ax","squeezeShape","keptDims","isEmptyArray","axes","sort","j","getTypedArrayFromDType","dtype","values","Float32Array","Int32Array","Uint8Array","getArrayFromDType","checkConversionForErrors","vals","num","isNaN","isFinite","isValidDtype","hasEncodingLoss","oldType","newType","bytesPerElement","bytesFromStringArray","bytes","forEach","isString","value","String","isBoolean","isNumber","inferDtype","isFunction","f","constructor","call","apply","nearestDivisor","start","computeStrides","strides","createNestedArray","offset","ret","d","rest","len","reduce","acc","c","toNestedArray","makeOnesTypedArray","makeZerosTypedArray","makeZerosNestedTypedArray","prev","curr","assertNonNegativeIntegerDimensions","dimSize","isInteger","locToIndex","locs","indexToLoc","floor","isPromise","object","then"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,OAAT,CAAiBC,KAAjB,EAAwB;AAC3B,MAAIC,OAAO,GAAGD,KAAK,CAACE,MAApB;AACA,MAAIC,IAAI,GAAG,CAAX;AACA,MAAIC,KAAK,GAAG,CAAZ,CAH2B,CAI3B;;AACA,SAAOH,OAAO,GAAG,CAAjB,EAAoB;AAChB;AACAG,IAAAA,KAAK,GAAIC,IAAI,CAACC,MAAL,KAAgBL,OAAjB,GAA4B,CAApC,CAFgB,CAGhB;;AACAA,IAAAA,OAAO,GAJS,CAKhB;;AACAE,IAAAA,IAAI,GAAGH,KAAK,CAACC,OAAD,CAAZ;AACAD,IAAAA,KAAK,CAACC,OAAD,CAAL,GAAiBD,KAAK,CAACI,KAAD,CAAtB;AACAJ,IAAAA,KAAK,CAACI,KAAD,CAAL,GAAeD,IAAf;AACH;AACJ;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASI,YAAT,CAAsBP,KAAtB,EACP;AACAQ,MAFO,EAEC;AACJ,MAAIR,KAAK,CAACE,MAAN,KAAiBM,MAAM,CAACN,MAA5B,EAAoC;AAChC,UAAM,IAAIO,KAAJ,CAAW,iDAAD,GACX,0BAAyBT,KAAK,CAACE,MAAO,EAD3B,GAEX,2BAA0BM,MAAM,CAACN,MAAO,EAFvC,CAAN;AAGH;;AACD,MAAID,OAAO,GAAGD,KAAK,CAACE,MAApB;AACA,MAAIC,IAAJ,EAAUO,KAAV;AACA,MAAIN,KAAK,GAAG,CAAZ,CARI,CASJ;;AACA,SAAOH,OAAO,GAAG,CAAjB,EAAoB;AAChB;AACAG,IAAAA,KAAK,GAAIC,IAAI,CAACC,MAAL,KAAgBL,OAAjB,GAA4B,CAApC,CAFgB,CAGhB;;AACAA,IAAAA,OAAO,GAJS,CAKhB;;AACAE,IAAAA,IAAI,GAAGH,KAAK,CAACC,OAAD,CAAZ;AACAS,IAAAA,KAAK,GAAGF,MAAM,CAACP,OAAD,CAAd;AACAD,IAAAA,KAAK,CAACC,OAAD,CAAL,GAAiBD,KAAK,CAACI,KAAD,CAAtB;AACAI,IAAAA,MAAM,CAACP,OAAD,CAAN,GAAkBO,MAAM,CAACJ,KAAD,CAAxB;AACAJ,IAAAA,KAAK,CAACI,KAAD,CAAL,GAAeD,IAAf;AACAK,IAAAA,MAAM,CAACJ,KAAD,CAAN,GAAgBM,KAAhB;AACH;AACJ;AACD;;AACA,OAAO,SAASC,KAAT,CAAeC,GAAf,EAAoBC,CAApB,EAAuBC,GAAvB,EAA4B;AAC/B,SAAOT,IAAI,CAACS,GAAL,CAASF,GAAT,EAAcP,IAAI,CAACO,GAAL,CAASC,CAAT,EAAYC,GAAZ,CAAd,CAAP;AACH;AACD,OAAO,SAASC,iBAAT,CAA2BC,GAA3B,EAAgC;AACnC,SAAOA,GAAG,GAAG,CAAN,KAAY,CAAZ,GAAgBA,GAAhB,GAAsBA,GAAG,GAAG,CAAnC;AACH;AACD,OAAO,SAASC,GAAT,CAAaC,GAAb,EAAkB;AACrB,MAAID,GAAG,GAAG,CAAV;;AACA,OAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,GAAG,CAAChB,MAAxB,EAAgCiB,CAAC,EAAjC,EAAqC;AACjCF,IAAAA,GAAG,IAAIC,GAAG,CAACC,CAAD,CAAV;AACH;;AACD,SAAOF,GAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASG,WAAT,CAAqBC,CAArB,EAAwBC,CAAxB,EAA2B;AAC9B,QAAMC,CAAC,GAAGlB,IAAI,CAACC,MAAL,EAAV;AACA,SAAQgB,CAAC,GAAGC,CAAL,GAAU,CAAC,IAAIA,CAAL,IAAUF,CAA3B;AACH;AACD;;AACA,OAAO,SAASG,WAAT,CAAqBH,CAArB,EAAwBC,CAAxB,EAA2B;AAC9B,MAAIG,MAAM,GAAG,CAAb;;AACA,OAAK,IAAIN,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGE,CAAC,CAACnB,MAAtB,EAA8BiB,CAAC,EAA/B,EAAmC;AAC/B,UAAMO,IAAI,GAAGC,MAAM,CAACN,CAAC,CAACF,CAAD,CAAF,CAAN,GAAeQ,MAAM,CAACL,CAAC,CAACH,CAAD,CAAF,CAAlC;AACAM,IAAAA,MAAM,IAAIC,IAAI,GAAGA,IAAjB;AACH;;AACD,SAAOD,MAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASG,MAAT,CAAgBC,IAAhB,EAAsBC,GAAtB,EAA2B;AAC9B,MAAI,CAACD,IAAL,EAAW;AACP,UAAM,IAAIpB,KAAJ,CAAU,OAAOqB,GAAP,KAAe,QAAf,GAA0BA,GAA1B,GAAgCA,GAAG,EAA7C,CAAN;AACH;AACJ;AACD,OAAO,SAASC,iBAAT,CAA2BC,MAA3B,EAAmCC,MAAnC,EAA2CC,kBAAkB,GAAG,EAAhE,EAAoE;AACvEN,EAAAA,MAAM,CAACO,WAAW,CAACH,MAAD,EAASC,MAAT,CAAZ,EAA8B,MAAMC,kBAAkB,GAAI,WAAUF,MAAO,QAAOC,MAAO,aAAzF,CAAN;AACH;AACD,OAAO,SAASG,aAAT,CAAuBf,CAAvB,EAA0B;AAC7BO,EAAAA,MAAM,CAACP,CAAC,IAAI,IAAN,EAAY,MAAO,+DAAnB,CAAN;AACH,C,CACD;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASgB,OAAT,CAAiBnB,GAAjB,EAAsBO,MAAM,GAAG,EAA/B,EAAmCa,cAAc,GAAG,KAApD,EAA2D;AAC9D,MAAIb,MAAM,IAAI,IAAd,EAAoB;AAChBA,IAAAA,MAAM,GAAG,EAAT;AACH;;AACD,MAAIc,KAAK,CAACC,OAAN,CAActB,GAAd,KAAsBuB,YAAY,CAACvB,GAAD,CAAZ,IAAqB,CAACoB,cAAhD,EAAgE;AAC5D,SAAK,IAAInB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,GAAG,CAAChB,MAAxB,EAAgC,EAAEiB,CAAlC,EAAqC;AACjCkB,MAAAA,OAAO,CAACnB,GAAG,CAACC,CAAD,CAAJ,EAASM,MAAT,EAAiBa,cAAjB,CAAP;AACH;AACJ,GAJD,MAKK;AACDb,IAAAA,MAAM,CAACiB,IAAP,CAAYxB,GAAZ;AACH;;AACD,SAAOO,MAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASkB,aAAT,CAAuBC,KAAvB,EAA8B;AACjC,MAAIA,KAAK,CAAC1C,MAAN,KAAiB,CAArB,EAAwB;AACpB;AACA,WAAO,CAAP;AACH;;AACD,MAAI2C,IAAI,GAAGD,KAAK,CAAC,CAAD,CAAhB;;AACA,OAAK,IAAIzB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGyB,KAAK,CAAC1C,MAA1B,EAAkCiB,CAAC,EAAnC,EAAuC;AACnC0B,IAAAA,IAAI,IAAID,KAAK,CAACzB,CAAD,CAAb;AACH;;AACD,SAAO0B,IAAP;AACH;AACD,OAAO,SAASC,aAAT,CAAuBF,KAAvB,EAA8B;AACjC,SAAOA,KAAK,CAAC1C,MAAN,KAAiB,CAAxB;AACH;AACD,OAAO,SAASiC,WAAT,CAAqBY,EAArB,EAAyBC,EAAzB,EAA6B;AAChC,MAAID,EAAE,KAAKC,EAAX,EAAe;AACX,WAAO,IAAP;AACH;;AACD,MAAID,EAAE,IAAI,IAAN,IAAcC,EAAE,IAAI,IAAxB,EAA8B;AAC1B,WAAO,KAAP;AACH;;AACD,MAAID,EAAE,CAAC7C,MAAH,KAAc8C,EAAE,CAAC9C,MAArB,EAA6B;AACzB,WAAO,KAAP;AACH;;AACD,OAAK,IAAIiB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG4B,EAAE,CAAC7C,MAAvB,EAA+BiB,CAAC,EAAhC,EAAoC;AAChC,QAAI4B,EAAE,CAAC5B,CAAD,CAAF,KAAU6B,EAAE,CAAC7B,CAAD,CAAhB,EAAqB;AACjB,aAAO,KAAP;AACH;AACJ;;AACD,SAAO,IAAP;AACH;AACD,OAAO,SAAS8B,KAAT,CAAe5B,CAAf,EAAkB;AACrB,SAAOA,CAAC,GAAG,CAAJ,KAAU,CAAjB;AACH;AACD,OAAO,SAAS6B,IAAT,CAAcrC,CAAd,EAAiB;AACpB;AACA,MAAIR,IAAI,CAAC6C,IAAL,IAAa,IAAjB,EAAuB;AACnB;AACA,WAAO7C,IAAI,CAAC6C,IAAL,CAAUrC,CAAV,CAAP;AACH;;AACD,MAAIA,CAAC,KAAKsC,QAAV,EAAoB;AAChB,WAAO,CAAP;AACH,GAFD,MAGK,IAAItC,CAAC,KAAK,CAACsC,QAAX,EAAqB;AACtB,WAAO,CAAC,CAAR;AACH,GAFI,MAGA;AACD,UAAMC,GAAG,GAAG/C,IAAI,CAACgD,GAAL,CAAS,IAAIxC,CAAb,CAAZ;AACA,WAAO,CAACuC,GAAG,GAAG,CAAP,KAAaA,GAAG,GAAG,CAAnB,CAAP;AACH;AACJ;AACD,OAAO,SAASE,mBAAT,CAA6BT,IAA7B,EAAmC;AACtC,QAAMU,KAAK,GAAGlD,IAAI,CAACmD,IAAL,CAAUnD,IAAI,CAACoD,IAAL,CAAUZ,IAAV,CAAV,CAAd;AACA,SAAO,CAACU,KAAD,EAAQlD,IAAI,CAACmD,IAAL,CAAUX,IAAI,GAAGU,KAAjB,CAAR,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASG,qBAAT,CAA+BC,CAA/B,EAAkC;AACrC,QAAMC,eAAe,GAAG,IAAIC,WAAJ,CAAgBF,CAAhB,CAAxB;;AACA,OAAK,IAAIxC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGwC,CAApB,EAAuB,EAAExC,CAAzB,EAA4B;AACxByC,IAAAA,eAAe,CAACzC,CAAD,CAAf,GAAqBA,CAArB;AACH;;AACDpB,EAAAA,OAAO,CAAC6D,eAAD,CAAP;AACA,SAAOA,eAAP;AACH;AACD,OAAO,SAASE,QAAT,CAAkBzC,CAAlB,EAAqBwB,IAArB,EAA2B;AAC9B,MAAIA,IAAI,IAAIxB,CAAC,CAACnB,MAAd,EAAsB;AAClB,WAAOmB,CAAP;AACH;;AACD,SAAOA,CAAC,GAAG,IAAI0C,MAAJ,CAAWlB,IAAI,GAAGxB,CAAC,CAACnB,MAApB,CAAX;AACH;AACD,OAAO,SAAS8D,WAAT,CAAqBC,OAArB,EAA8BC,OAAO,GAAIjE,OAAD,IAAa,CAArD,EAAwDkE,UAAxD,EAAoE;AACvE,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,QAAIC,QAAQ,GAAG,CAAf;;AACA,UAAMC,KAAK,GAAG,MAAM;AAChB,UAAIP,OAAO,EAAX,EAAe;AACXI,QAAAA,OAAO;AACP;AACH;;AACDE,MAAAA,QAAQ;AACR,YAAME,WAAW,GAAGP,OAAO,CAACK,QAAD,CAA3B;;AACA,UAAIJ,UAAU,IAAI,IAAd,IAAsBI,QAAQ,IAAIJ,UAAtC,EAAkD;AAC9CG,QAAAA,MAAM;AACN;AACH;;AACDI,MAAAA,UAAU,CAACF,KAAD,EAAQC,WAAR,CAAV;AACH,KAZD;;AAaAD,IAAAA,KAAK;AACR,GAhBM,CAAP;AAiBH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASG,sBAAT,CAAgC/B,KAAhC,EAAuCC,IAAvC,EAA6C;AAChD,MAAI+B,SAAS,GAAG,CAAhB;AACA,MAAIC,WAAW,GAAG,CAAC,CAAnB;;AACA,OAAK,IAAI1D,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGyB,KAAK,CAAC1C,MAA1B,EAAkC,EAAEiB,CAApC,EAAuC;AACnC,QAAIyB,KAAK,CAACzB,CAAD,CAAL,IAAY,CAAhB,EAAmB;AACfyD,MAAAA,SAAS,IAAIhC,KAAK,CAACzB,CAAD,CAAlB;AACH,KAFD,MAGK,IAAIyB,KAAK,CAACzB,CAAD,CAAL,KAAa,CAAC,CAAlB,EAAqB;AACtB,UAAI0D,WAAW,KAAK,CAAC,CAArB,EAAwB;AACpB,cAAMpE,KAAK,CAAE,wCAAD,GACP,mBAAkBoE,WAAY,YAAW1D,CAAE,EADrC,CAAX;AAEH;;AACD0D,MAAAA,WAAW,GAAG1D,CAAd;AACH,KANI,MAOA,IAAIyB,KAAK,CAACzB,CAAD,CAAL,GAAW,CAAf,EAAkB;AACnB,YAAMV,KAAK,CAAE,gCAA+BmC,KAAK,CAACzB,CAAD,CAAI,WAAUA,CAAE,EAAtD,CAAX;AACH;AACJ;;AACD,MAAI0D,WAAW,KAAK,CAAC,CAArB,EAAwB;AACpB,QAAIhC,IAAI,GAAG,CAAP,IAAYA,IAAI,KAAK+B,SAAzB,EAAoC;AAChC,YAAMnE,KAAK,CAAE,QAAOoC,IAAK,qCAAoCD,KAAM,EAAxD,CAAX;AACH;;AACD,WAAOA,KAAP;AACH;;AACD,MAAIgC,SAAS,KAAK,CAAlB,EAAqB;AACjB,UAAMnE,KAAK,CAAE,qCAAoCmC,KAAM,SAA3C,GACP,sBADM,CAAX;AAEH;;AACD,MAAIC,IAAI,GAAG+B,SAAP,KAAqB,CAAzB,EAA4B;AACxB,UAAMnE,KAAK,CAAE,mDAAD,GACP,OAAMoC,IAAK,MAAK+B,SAAU,EADpB,CAAX;AAEH;;AACD,QAAME,QAAQ,GAAGlC,KAAK,CAACmC,KAAN,EAAjB;AACAD,EAAAA,QAAQ,CAACD,WAAD,CAAR,GAAwBhC,IAAI,GAAG+B,SAA/B;AACA,SAAOE,QAAP;AACH;AACD,OAAO,SAASE,cAAT,CAAwBC,IAAxB,EAA8BrC,KAA9B,EAAqC;AACxC,QAAMsC,IAAI,GAAGtC,KAAK,CAAC1C,MAAnB,CADwC,CAExC;;AACA+E,EAAAA,IAAI,GAAGA,IAAI,IAAI,IAAR,GAAerC,KAAK,CAACuC,GAAN,CAAU,CAACC,CAAD,EAAIjE,CAAJ,KAAUA,CAApB,CAAf,GAAwC,GAAGkE,MAAH,CAAUJ,IAAV,CAA/C,CAHwC,CAIxC;;AACArD,EAAAA,MAAM,CAACqD,IAAI,CAACK,KAAL,CAAWC,EAAE,IAAIA,EAAE,IAAI,CAACL,IAAP,IAAeK,EAAE,GAAGL,IAArC,CAAD,EAA6C,MAAO,+CAA8CA,IAAK,KAAIA,IAAK,QAA7D,GACpD,YAAWD,IAAK,EADf,CAAN,CALwC,CAOxC;;AACArD,EAAAA,MAAM,CAACqD,IAAI,CAACK,KAAL,CAAWC,EAAE,IAAItC,KAAK,CAACsC,EAAD,CAAtB,CAAD,EAA8B,MAAO,gDAAD,GACrC,YAAWN,IAAK,EADf,CAAN,CARwC,CAUxC;;AACA,SAAOA,IAAI,CAACE,GAAL,CAAS9D,CAAC,IAAIA,CAAC,GAAG,CAAJ,GAAQ6D,IAAI,GAAG7D,CAAf,GAAmBA,CAAjC,CAAP;AACH;AACD;;AACA,OAAO,SAASmE,YAAT,CAAsB5C,KAAtB,EAA6BqC,IAA7B,EAAmC;AACtC,QAAMH,QAAQ,GAAG,EAAjB;AACA,QAAMW,QAAQ,GAAG,EAAjB;AACA,QAAMC,YAAY,GAAGT,IAAI,IAAI,IAAR,IAAgB1C,KAAK,CAACC,OAAN,CAAcyC,IAAd,CAAhB,IAAuCA,IAAI,CAAC/E,MAAL,KAAgB,CAA5E;AACA,QAAMyF,IAAI,GAAIV,IAAI,IAAI,IAAR,IAAgBS,YAAjB,GACT,IADS,GAETV,cAAc,CAACC,IAAD,EAAOrC,KAAP,CAAd,CAA4BgD,IAA5B,EAFJ;AAGA,MAAIC,CAAC,GAAG,CAAR;;AACA,OAAK,IAAI1E,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGyB,KAAK,CAAC1C,MAA1B,EAAkC,EAAEiB,CAApC,EAAuC;AACnC,QAAIwE,IAAI,IAAI,IAAZ,EAAkB;AACd,UAAIA,IAAI,CAACE,CAAD,CAAJ,KAAY1E,CAAZ,IAAiByB,KAAK,CAACzB,CAAD,CAAL,KAAa,CAAlC,EAAqC;AACjC,cAAM,IAAIV,KAAJ,CAAW,sBAAqBU,CAAE,mBAAkByB,KAAK,CAACzB,CAAD,CAAI,YAA7D,CAAN;AACH;;AACD,UAAI,CAACwE,IAAI,CAACE,CAAD,CAAJ,IAAW,IAAX,IAAmBF,IAAI,CAACE,CAAD,CAAJ,GAAU1E,CAA9B,KAAoCyB,KAAK,CAACzB,CAAD,CAAL,KAAa,CAArD,EAAwD;AACpD2D,QAAAA,QAAQ,CAACpC,IAAT,CAAcE,KAAK,CAACzB,CAAD,CAAnB;AACAsE,QAAAA,QAAQ,CAAC/C,IAAT,CAAcvB,CAAd;AACH;;AACD,UAAIwE,IAAI,CAACE,CAAD,CAAJ,IAAW1E,CAAf,EAAkB;AACd0E,QAAAA,CAAC;AACJ;AACJ;;AACD,QAAIjD,KAAK,CAACzB,CAAD,CAAL,KAAa,CAAjB,EAAoB;AAChB2D,MAAAA,QAAQ,CAACpC,IAAT,CAAcE,KAAK,CAACzB,CAAD,CAAnB;AACAsE,MAAAA,QAAQ,CAAC/C,IAAT,CAAcvB,CAAd;AACH;AACJ;;AACD,SAAO;AAAE2D,IAAAA,QAAF;AAAYW,IAAAA;AAAZ,GAAP;AACH;AACD,OAAO,SAASK,sBAAT,CAAgCC,KAAhC,EAAuClD,IAAvC,EAA6C;AAChD,MAAImD,MAAM,GAAG,IAAb;;AACA,MAAID,KAAK,IAAI,IAAT,IAAiBA,KAAK,KAAK,SAA/B,EAA0C;AACtCC,IAAAA,MAAM,GAAG,IAAIC,YAAJ,CAAiBpD,IAAjB,CAAT;AACH,GAFD,MAGK,IAAIkD,KAAK,KAAK,OAAd,EAAuB;AACxBC,IAAAA,MAAM,GAAG,IAAIE,UAAJ,CAAerD,IAAf,CAAT;AACH,GAFI,MAGA,IAAIkD,KAAK,KAAK,MAAd,EAAsB;AACvBC,IAAAA,MAAM,GAAG,IAAIG,UAAJ,CAAetD,IAAf,CAAT;AACH,GAFI,MAGA;AACD,UAAM,IAAIpC,KAAJ,CAAW,qBAAoBsF,KAAM,EAArC,CAAN;AACH;;AACD,SAAOC,MAAP;AACH;AACD,OAAO,SAASI,iBAAT,CAA2BL,KAA3B,EAAkClD,IAAlC,EAAwC;AAC3C,MAAImD,MAAM,GAAG,IAAb;;AACA,MAAID,KAAK,IAAI,IAAT,IAAiBA,KAAK,KAAK,SAA/B,EAA0C;AACtCC,IAAAA,MAAM,GAAG,IAAIC,YAAJ,CAAiBpD,IAAjB,CAAT;AACH,GAFD,MAGK,IAAIkD,KAAK,KAAK,OAAd,EAAuB;AACxBC,IAAAA,MAAM,GAAG,IAAIE,UAAJ,CAAerD,IAAf,CAAT;AACH,GAFI,MAGA,IAAIkD,KAAK,KAAK,MAAd,EAAsB;AACvBC,IAAAA,MAAM,GAAG,IAAIG,UAAJ,CAAetD,IAAf,CAAT;AACH,GAFI,MAGA,IAAIkD,KAAK,KAAK,QAAd,EAAwB;AACzBC,IAAAA,MAAM,GAAG,IAAIzD,KAAJ,CAAUM,IAAV,CAAT;AACH,GAFI,MAGA;AACD,UAAM,IAAIpC,KAAJ,CAAW,qBAAoBsF,KAAM,EAArC,CAAN;AACH;;AACD,SAAOC,MAAP;AACH;AACD,OAAO,SAASK,wBAAT,CAAkCC,IAAlC,EAAwCP,KAAxC,EAA+C;AAClD,OAAK,IAAI5E,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGmF,IAAI,CAACpG,MAAzB,EAAiCiB,CAAC,EAAlC,EAAsC;AAClC,UAAMoF,GAAG,GAAGD,IAAI,CAACnF,CAAD,CAAhB;;AACA,QAAIqF,KAAK,CAACD,GAAD,CAAL,IAAc,CAACE,QAAQ,CAACF,GAAD,CAA3B,EAAkC;AAC9B,YAAM9F,KAAK,CAAE,oBAAmBsF,KAAM,4BAA2BQ,GAAI,GAA1D,CAAX;AACH;AACJ;AACJ;AACD;;AACA,OAAO,SAASG,YAAT,CAAsBX,KAAtB,EAA6B;AAChC,SAAOA,KAAK,KAAK,MAAV,IAAoBA,KAAK,KAAK,WAA9B,IAA6CA,KAAK,KAAK,SAAvD,IACHA,KAAK,KAAK,OADP,IACkBA,KAAK,KAAK,QADnC;AAEH;AACD;AACA;AACA;AACA;;AACA,OAAO,SAASY,eAAT,CAAyBC,OAAzB,EAAkCC,OAAlC,EAA2C;AAC9C,MAAIA,OAAO,KAAK,WAAhB,EAA6B;AACzB,WAAO,KAAP;AACH;;AACD,MAAIA,OAAO,KAAK,SAAZ,IAAyBD,OAAO,KAAK,WAAzC,EAAsD;AAClD,WAAO,KAAP;AACH;;AACD,MAAIC,OAAO,KAAK,OAAZ,IAAuBD,OAAO,KAAK,SAAnC,IAAgDA,OAAO,KAAK,WAAhE,EAA6E;AACzE,WAAO,KAAP;AACH;;AACD,MAAIC,OAAO,KAAK,MAAZ,IAAsBD,OAAO,KAAK,MAAtC,EAA8C;AAC1C,WAAO,KAAP;AACH;;AACD,SAAO,IAAP;AACH;AACD,OAAO,SAASnE,YAAT,CAAsBpB,CAAtB,EAAyB;AAC5B,SAAOA,CAAC,YAAY4E,YAAb,IAA6B5E,CAAC,YAAY6E,UAA1C,IACH7E,CAAC,YAAY8E,UADjB;AAEH;AACD,OAAO,SAASW,eAAT,CAAyBf,KAAzB,EAAgC;AACnC,MAAIA,KAAK,KAAK,SAAV,IAAuBA,KAAK,KAAK,OAArC,EAA8C;AAC1C,WAAO,CAAP;AACH,GAFD,MAGK,IAAIA,KAAK,KAAK,WAAd,EAA2B;AAC5B,WAAO,CAAP;AACH,GAFI,MAGA,IAAIA,KAAK,KAAK,MAAd,EAAsB;AACvB,WAAO,CAAP;AACH,GAFI,MAGA;AACD,UAAM,IAAItF,KAAJ,CAAW,iBAAgBsF,KAAM,EAAjC,CAAN;AACH;AACJ;AACD;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASgB,oBAAT,CAA8B7F,GAA9B,EAAmC;AACtC,MAAIA,GAAG,IAAI,IAAX,EAAiB;AACb,WAAO,CAAP;AACH;;AACD,MAAI8F,KAAK,GAAG,CAAZ;AACA9F,EAAAA,GAAG,CAAC+F,OAAJ,CAAYpG,CAAC,IAAImG,KAAK,IAAInG,CAAC,CAACX,MAA5B;AACA,SAAO8G,KAAP;AACH;AACD;;AACA,OAAO,SAASE,QAAT,CAAkBC,KAAlB,EAAyB;AAC5B,SAAO,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,YAAYC,MAArD;AACH;AACD,OAAO,SAASC,SAAT,CAAmBF,KAAnB,EAA0B;AAC7B,SAAO,OAAOA,KAAP,KAAiB,SAAxB;AACH;AACD,OAAO,SAASG,QAAT,CAAkBH,KAAlB,EAAyB;AAC5B,SAAO,OAAOA,KAAP,KAAiB,QAAxB;AACH;AACD,OAAO,SAASI,UAAT,CAAoBvB,MAApB,EAA4B;AAC/B,MAAIzD,KAAK,CAACC,OAAN,CAAcwD,MAAd,CAAJ,EAA2B;AACvB,WAAOuB,UAAU,CAACvB,MAAM,CAAC,CAAD,CAAP,CAAjB;AACH;;AACD,MAAIA,MAAM,YAAYC,YAAtB,EAAoC;AAChC,WAAO,SAAP;AACH,GAFD,MAGK,IAAID,MAAM,YAAYE,UAAlB,IAAgCF,MAAM,YAAYG,UAAtD,EAAkE;AACnE,WAAO,OAAP;AACH,GAFI,MAGA,IAAImB,QAAQ,CAACtB,MAAD,CAAZ,EAAsB;AACvB,WAAO,SAAP;AACH,GAFI,MAGA,IAAIkB,QAAQ,CAAClB,MAAD,CAAZ,EAAsB;AACvB,WAAO,QAAP;AACH,GAFI,MAGA,IAAIqB,SAAS,CAACrB,MAAD,CAAb,EAAuB;AACxB,WAAO,MAAP;AACH;;AACD,SAAO,SAAP;AACH;AACD,OAAO,SAASwB,UAAT,CAAoBC,CAApB,EAAuB;AAC1B,SAAO,CAAC,EAAEA,CAAC,IAAIA,CAAC,CAACC,WAAP,IAAsBD,CAAC,CAACE,IAAxB,IAAgCF,CAAC,CAACG,KAApC,CAAR;AACH;AACD,OAAO,SAASC,cAAT,CAAwBhF,IAAxB,EAA8BiF,KAA9B,EAAqC;AACxC,OAAK,IAAI3G,CAAC,GAAG2G,KAAb,EAAoB3G,CAAC,GAAG0B,IAAxB,EAA8B,EAAE1B,CAAhC,EAAmC;AAC/B,QAAI0B,IAAI,GAAG1B,CAAP,KAAa,CAAjB,EAAoB;AAChB,aAAOA,CAAP;AACH;AACJ;;AACD,SAAO0B,IAAP;AACH;AACD,OAAO,SAASkF,cAAT,CAAwBnF,KAAxB,EAA+B;AAClC,QAAMsC,IAAI,GAAGtC,KAAK,CAAC1C,MAAnB;;AACA,MAAIgF,IAAI,GAAG,CAAX,EAAc;AACV,WAAO,EAAP;AACH,GAJiC,CAKlC;AACA;;;AACA,QAAM8C,OAAO,GAAG,IAAIzF,KAAJ,CAAU2C,IAAI,GAAG,CAAjB,CAAhB;AACA8C,EAAAA,OAAO,CAAC9C,IAAI,GAAG,CAAR,CAAP,GAAoBtC,KAAK,CAACsC,IAAI,GAAG,CAAR,CAAzB;;AACA,OAAK,IAAI/D,CAAC,GAAG+D,IAAI,GAAG,CAApB,EAAuB/D,CAAC,IAAI,CAA5B,EAA+B,EAAEA,CAAjC,EAAoC;AAChC6G,IAAAA,OAAO,CAAC7G,CAAD,CAAP,GAAa6G,OAAO,CAAC7G,CAAC,GAAG,CAAL,CAAP,GAAiByB,KAAK,CAACzB,CAAC,GAAG,CAAL,CAAnC;AACH;;AACD,SAAO6G,OAAP;AACH;;AACD,SAASC,iBAAT,CAA2BC,MAA3B,EAAmCtF,KAAnC,EAA0CvB,CAA1C,EAA6C;AACzC,QAAM8G,GAAG,GAAG,IAAI5F,KAAJ,EAAZ;;AACA,MAAIK,KAAK,CAAC1C,MAAN,KAAiB,CAArB,EAAwB;AACpB,UAAMkI,CAAC,GAAGxF,KAAK,CAAC,CAAD,CAAf;;AACA,SAAK,IAAIzB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGiH,CAApB,EAAuBjH,CAAC,EAAxB,EAA4B;AACxBgH,MAAAA,GAAG,CAAChH,CAAD,CAAH,GAASE,CAAC,CAAC6G,MAAM,GAAG/G,CAAV,CAAV;AACH;AACJ,GALD,MAMK;AACD,UAAMiH,CAAC,GAAGxF,KAAK,CAAC,CAAD,CAAf;AACA,UAAMyF,IAAI,GAAGzF,KAAK,CAACmC,KAAN,CAAY,CAAZ,CAAb;AACA,UAAMuD,GAAG,GAAGD,IAAI,CAACE,MAAL,CAAY,CAACC,GAAD,EAAMC,CAAN,KAAYD,GAAG,GAAGC,CAA9B,CAAZ;;AACA,SAAK,IAAItH,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGiH,CAApB,EAAuBjH,CAAC,EAAxB,EAA4B;AACxBgH,MAAAA,GAAG,CAAChH,CAAD,CAAH,GAAS8G,iBAAiB,CAACC,MAAM,GAAG/G,CAAC,GAAGmH,GAAd,EAAmBD,IAAnB,EAAyBhH,CAAzB,CAA1B;AACH;AACJ;;AACD,SAAO8G,GAAP;AACH,C,CACD;;;AACA,OAAO,SAASO,aAAT,CAAuB9F,KAAvB,EAA8BvB,CAA9B,EAAiC;AACpC,MAAIuB,KAAK,CAAC1C,MAAN,KAAiB,CAArB,EAAwB;AACpB;AACA,WAAOmB,CAAC,CAAC,CAAD,CAAR;AACH;;AACD,QAAMwB,IAAI,GAAGD,KAAK,CAAC2F,MAAN,CAAa,CAACC,GAAD,EAAMC,CAAN,KAAYD,GAAG,GAAGC,CAA/B,CAAb;;AACA,MAAI5F,IAAI,KAAK,CAAb,EAAgB;AACZ;AACA,WAAO,EAAP;AACH;;AACD,MAAIA,IAAI,KAAKxB,CAAC,CAACnB,MAAf,EAAuB;AACnB,UAAM,IAAIO,KAAJ,CAAW,IAAGmC,KAAM,mCAAkCvB,CAAC,CAACnB,MAAO,GAA/D,CAAN;AACH;;AACD,SAAO+H,iBAAiB,CAAC,CAAD,EAAIrF,KAAJ,EAAWvB,CAAX,CAAxB;AACH;AACD,OAAO,SAASsH,kBAAT,CAA4B9F,IAA5B,EAAkCkD,KAAlC,EAAyC;AAC5C,QAAM/F,KAAK,GAAG4I,mBAAmB,CAAC/F,IAAD,EAAOkD,KAAP,CAAjC;;AACA,OAAK,IAAI5E,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGnB,KAAK,CAACE,MAA1B,EAAkCiB,CAAC,EAAnC,EAAuC;AACnCnB,IAAAA,KAAK,CAACmB,CAAD,CAAL,GAAW,CAAX;AACH;;AACD,SAAOnB,KAAP;AACH;AACD,OAAO,SAAS4I,mBAAT,CAA6B/F,IAA7B,EAAmCkD,KAAnC,EAA0C;AAC7C,MAAIA,KAAK,IAAI,IAAT,IAAiBA,KAAK,KAAK,SAA3B,IAAwCA,KAAK,KAAK,WAAtD,EAAmE;AAC/D,WAAO,IAAIE,YAAJ,CAAiBpD,IAAjB,CAAP;AACH,GAFD,MAGK,IAAIkD,KAAK,KAAK,OAAd,EAAuB;AACxB,WAAO,IAAIG,UAAJ,CAAerD,IAAf,CAAP;AACH,GAFI,MAGA,IAAIkD,KAAK,KAAK,MAAd,EAAsB;AACvB,WAAO,IAAII,UAAJ,CAAetD,IAAf,CAAP;AACH,GAFI,MAGA;AACD,UAAM,IAAIpC,KAAJ,CAAW,qBAAoBsF,KAAM,EAArC,CAAN;AACH;AACJ;AACD;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAS8C,yBAAT,CAAmCjG,KAAnC,EAA0CmD,KAA1C,EAAiD;AACpD,QAAMlD,IAAI,GAAGD,KAAK,CAAC2F,MAAN,CAAa,CAACO,IAAD,EAAOC,IAAP,KAAgBD,IAAI,GAAGC,IAApC,EAA0C,CAA1C,CAAb;;AACA,MAAIhD,KAAK,IAAI,IAAT,IAAiBA,KAAK,KAAK,SAA/B,EAA0C;AACtC,WAAO2C,aAAa,CAAC9F,KAAD,EAAQ,IAAIqD,YAAJ,CAAiBpD,IAAjB,CAAR,CAApB;AACH,GAFD,MAGK,IAAIkD,KAAK,KAAK,OAAd,EAAuB;AACxB,WAAO2C,aAAa,CAAC9F,KAAD,EAAQ,IAAIsD,UAAJ,CAAerD,IAAf,CAAR,CAApB;AACH,GAFI,MAGA,IAAIkD,KAAK,KAAK,MAAd,EAAsB;AACvB,WAAO2C,aAAa,CAAC9F,KAAD,EAAQ,IAAIuD,UAAJ,CAAetD,IAAf,CAAR,CAApB;AACH,GAFI,MAGA;AACD,UAAM,IAAIpC,KAAJ,CAAW,qBAAoBsF,KAAM,EAArC,CAAN;AACH;AACJ;AACD,OAAO,SAASiD,kCAAT,CAA4CpG,KAA5C,EAAmD;AACtDA,EAAAA,KAAK,CAACqE,OAAN,CAAcgC,OAAO,IAAI;AACrBrH,IAAAA,MAAM,CAACD,MAAM,CAACuH,SAAP,CAAiBD,OAAjB,KAA6BA,OAAO,IAAI,CAAzC,EAA4C,MAAO,kEAAD,GACnD,UAASrG,KAAM,IADd,CAAN;AAEH,GAHD;AAIH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASuG,UAAT,CAAoBC,IAApB,EAA0BlE,IAA1B,EAAgC8C,OAAhC,EAAyC;AAC5C,MAAI9C,IAAI,KAAK,CAAb,EAAgB;AACZ,WAAO,CAAP;AACH,GAFD,MAGK,IAAIA,IAAI,KAAK,CAAb,EAAgB;AACjB,WAAOkE,IAAI,CAAC,CAAD,CAAX;AACH;;AACD,MAAIhJ,KAAK,GAAGgJ,IAAI,CAACA,IAAI,CAAClJ,MAAL,GAAc,CAAf,CAAhB;;AACA,OAAK,IAAIiB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGiI,IAAI,CAAClJ,MAAL,GAAc,CAAlC,EAAqC,EAAEiB,CAAvC,EAA0C;AACtCf,IAAAA,KAAK,IAAI4H,OAAO,CAAC7G,CAAD,CAAP,GAAaiI,IAAI,CAACjI,CAAD,CAA1B;AACH;;AACD,SAAOf,KAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASiJ,UAAT,CAAoBjJ,KAApB,EAA2B8E,IAA3B,EAAiC8C,OAAjC,EAA0C;AAC7C,MAAI9C,IAAI,KAAK,CAAb,EAAgB;AACZ,WAAO,EAAP;AACH,GAFD,MAGK,IAAIA,IAAI,KAAK,CAAb,EAAgB;AACjB,WAAO,CAAC9E,KAAD,CAAP;AACH;;AACD,QAAMgJ,IAAI,GAAG,IAAI7G,KAAJ,CAAU2C,IAAV,CAAb;;AACA,OAAK,IAAI/D,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGiI,IAAI,CAAClJ,MAAL,GAAc,CAAlC,EAAqC,EAAEiB,CAAvC,EAA0C;AACtCiI,IAAAA,IAAI,CAACjI,CAAD,CAAJ,GAAUd,IAAI,CAACiJ,KAAL,CAAWlJ,KAAK,GAAG4H,OAAO,CAAC7G,CAAD,CAA1B,CAAV;AACAf,IAAAA,KAAK,IAAIgJ,IAAI,CAACjI,CAAD,CAAJ,GAAU6G,OAAO,CAAC7G,CAAD,CAA1B;AACH;;AACDiI,EAAAA,IAAI,CAACA,IAAI,CAAClJ,MAAL,GAAc,CAAf,CAAJ,GAAwBE,KAAxB;AACA,SAAOgJ,IAAP;AACH;AACD;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASG,SAAT,CAAmBC,MAAnB,EAA2B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,SAAOA,MAAM,IAAIA,MAAM,CAACC,IAAjB,IAAyB,OAAOD,MAAM,CAACC,IAAd,KAAuB,UAAvD;AACH","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * Shuffles the array in-place using Fisher-Yates algorithm.\n *\n * ```js\n * const a = [1, 2, 3, 4, 5];\n * tf.util.shuffle(a);\n * console.log(a);\n * ```\n *\n * @param array The array to shuffle in-place.\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\n// tslint:disable-next-line:no-any\nexport function shuffle(array) {\n    let counter = array.length;\n    let temp = 0;\n    let index = 0;\n    // While there are elements in the array\n    while (counter > 0) {\n        // Pick a random index\n        index = (Math.random() * counter) | 0;\n        // Decrease counter by 1\n        counter--;\n        // And swap the last element with it\n        temp = array[counter];\n        array[counter] = array[index];\n        array[index] = temp;\n    }\n}\n/**\n * Shuffles two arrays in-place the same way using Fisher-Yates algorithm.\n *\n * ```js\n * const a = [1,2,3,4,5];\n * const b = [11,22,33,44,55];\n * tf.util.shuffleCombo(a, b);\n * console.log(a, b);\n * ```\n *\n * @param array The first array to shuffle in-place.\n * @param array2 The second array to shuffle in-place with the same permutation\n *     as the first array.\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\n// tslint:disable-next-line:no-any\nexport function shuffleCombo(array, \n// tslint:disable-next-line:no-any\narray2) {\n    if (array.length !== array2.length) {\n        throw new Error(`Array sizes must match to be shuffled together ` +\n            `First array length was ${array.length}` +\n            `Second array length was ${array2.length}`);\n    }\n    let counter = array.length;\n    let temp, temp2;\n    let index = 0;\n    // While there are elements in the array\n    while (counter > 0) {\n        // Pick a random index\n        index = (Math.random() * counter) | 0;\n        // Decrease counter by 1\n        counter--;\n        // And swap the last element of each array with it\n        temp = array[counter];\n        temp2 = array2[counter];\n        array[counter] = array[index];\n        array2[counter] = array2[index];\n        array[index] = temp;\n        array2[index] = temp2;\n    }\n}\n/** Clamps a value to a specified range. */\nexport function clamp(min, x, max) {\n    return Math.max(min, Math.min(x, max));\n}\nexport function nearestLargerEven(val) {\n    return val % 2 === 0 ? val : val + 1;\n}\nexport function sum(arr) {\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n/**\n * Returns a sample from a uniform [a, b) distribution.\n *\n * @param a The minimum support (inclusive).\n * @param b The maximum support (exclusive).\n * @return A pseudorandom number on the half-open interval [a,b).\n */\nexport function randUniform(a, b) {\n    const r = Math.random();\n    return (b * r) + (1 - r) * a;\n}\n/** Returns the squared Euclidean distance between two vectors. */\nexport function distSquared(a, b) {\n    let result = 0;\n    for (let i = 0; i < a.length; i++) {\n        const diff = Number(a[i]) - Number(b[i]);\n        result += diff * diff;\n    }\n    return result;\n}\n/**\n * Asserts that the expression is true. Otherwise throws an error with the\n * provided message.\n *\n * ```js\n * const x = 2;\n * tf.util.assert(x === 2, 'x is not 2');\n * ```\n *\n * @param expr The expression to assert (as a boolean).\n * @param msg A function that returns the message to report when throwing an\n *     error. We use a function for performance reasons.\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\nexport function assert(expr, msg) {\n    if (!expr) {\n        throw new Error(typeof msg === 'string' ? msg : msg());\n    }\n}\nexport function assertShapesMatch(shapeA, shapeB, errorMessagePrefix = '') {\n    assert(arraysEqual(shapeA, shapeB), () => errorMessagePrefix + ` Shapes ${shapeA} and ${shapeB} must match`);\n}\nexport function assertNonNull(a) {\n    assert(a != null, () => `The input to the tensor constructor must be a non-null value.`);\n}\n// NOTE: We explicitly type out what T extends instead of any so that\n// util.flatten on a nested array of number doesn't try to infer T as a\n// number[][], causing us to explicitly type util.flatten<number>().\n/**\n *  Flattens an arbitrarily nested array.\n *\n * ```js\n * const a = [[1, 2], [3, 4], [5, [6, [7]]]];\n * const flat = tf.util.flatten(a);\n * console.log(flat);\n * ```\n *\n *  @param arr The nested array to flatten.\n *  @param result The destination array which holds the elements.\n *  @param skipTypedArray If true, avoids flattening the typed arrays. Defaults\n *      to false.\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\nexport function flatten(arr, result = [], skipTypedArray = false) {\n    if (result == null) {\n        result = [];\n    }\n    if (Array.isArray(arr) || isTypedArray(arr) && !skipTypedArray) {\n        for (let i = 0; i < arr.length; ++i) {\n            flatten(arr[i], result, skipTypedArray);\n        }\n    }\n    else {\n        result.push(arr);\n    }\n    return result;\n}\n/**\n * Returns the size (number of elements) of the tensor given its shape.\n *\n * ```js\n * const shape = [3, 4, 2];\n * const size = tf.util.sizeFromShape(shape);\n * console.log(size);\n * ```\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\nexport function sizeFromShape(shape) {\n    if (shape.length === 0) {\n        // Scalar.\n        return 1;\n    }\n    let size = shape[0];\n    for (let i = 1; i < shape.length; i++) {\n        size *= shape[i];\n    }\n    return size;\n}\nexport function isScalarShape(shape) {\n    return shape.length === 0;\n}\nexport function arraysEqual(n1, n2) {\n    if (n1 === n2) {\n        return true;\n    }\n    if (n1 == null || n2 == null) {\n        return false;\n    }\n    if (n1.length !== n2.length) {\n        return false;\n    }\n    for (let i = 0; i < n1.length; i++) {\n        if (n1[i] !== n2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function isInt(a) {\n    return a % 1 === 0;\n}\nexport function tanh(x) {\n    // tslint:disable-next-line:no-any\n    if (Math.tanh != null) {\n        // tslint:disable-next-line:no-any\n        return Math.tanh(x);\n    }\n    if (x === Infinity) {\n        return 1;\n    }\n    else if (x === -Infinity) {\n        return -1;\n    }\n    else {\n        const e2x = Math.exp(2 * x);\n        return (e2x - 1) / (e2x + 1);\n    }\n}\nexport function sizeToSquarishShape(size) {\n    const width = Math.ceil(Math.sqrt(size));\n    return [width, Math.ceil(size / width)];\n}\n/**\n * Creates a new array with randomized indicies to a given quantity.\n *\n * ```js\n * const randomTen = tf.util.createShuffledIndices(10);\n * console.log(randomTen);\n * ```\n *\n * @param number Quantity of how many shuffled indicies to create.\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\nexport function createShuffledIndices(n) {\n    const shuffledIndices = new Uint32Array(n);\n    for (let i = 0; i < n; ++i) {\n        shuffledIndices[i] = i;\n    }\n    shuffle(shuffledIndices);\n    return shuffledIndices;\n}\nexport function rightPad(a, size) {\n    if (size <= a.length) {\n        return a;\n    }\n    return a + ' '.repeat(size - a.length);\n}\nexport function repeatedTry(checkFn, delayFn = (counter) => 0, maxCounter) {\n    return new Promise((resolve, reject) => {\n        let tryCount = 0;\n        const tryFn = () => {\n            if (checkFn()) {\n                resolve();\n                return;\n            }\n            tryCount++;\n            const nextBackoff = delayFn(tryCount);\n            if (maxCounter != null && tryCount >= maxCounter) {\n                reject();\n                return;\n            }\n            setTimeout(tryFn, nextBackoff);\n        };\n        tryFn();\n    });\n}\n/**\n * Given the full size of the array and a shape that may contain -1 as the\n * implicit dimension, returns the inferred shape where -1 is replaced.\n * E.g. For shape=[2, -1, 3] and size=24, it will return [2, 4, 3].\n *\n * @param shape The shape, which may contain -1 in some dimension.\n * @param size The full size (number of elements) of the array.\n * @return The inferred shape where -1 is replaced with the inferred size.\n */\nexport function inferFromImplicitShape(shape, size) {\n    let shapeProd = 1;\n    let implicitIdx = -1;\n    for (let i = 0; i < shape.length; ++i) {\n        if (shape[i] >= 0) {\n            shapeProd *= shape[i];\n        }\n        else if (shape[i] === -1) {\n            if (implicitIdx !== -1) {\n                throw Error(`Shapes can only have 1 implicit size. ` +\n                    `Found -1 at dim ${implicitIdx} and dim ${i}`);\n            }\n            implicitIdx = i;\n        }\n        else if (shape[i] < 0) {\n            throw Error(`Shapes can not be < 0. Found ${shape[i]} at dim ${i}`);\n        }\n    }\n    if (implicitIdx === -1) {\n        if (size > 0 && size !== shapeProd) {\n            throw Error(`Size(${size}) must match the product of shape ${shape}`);\n        }\n        return shape;\n    }\n    if (shapeProd === 0) {\n        throw Error(`Cannot infer the missing size in [${shape}] when ` +\n            `there are 0 elements`);\n    }\n    if (size % shapeProd !== 0) {\n        throw Error(`The implicit shape can't be a fractional number. ` +\n            `Got ${size} / ${shapeProd}`);\n    }\n    const newShape = shape.slice();\n    newShape[implicitIdx] = size / shapeProd;\n    return newShape;\n}\nexport function parseAxisParam(axis, shape) {\n    const rank = shape.length;\n    // Normalize input\n    axis = axis == null ? shape.map((s, i) => i) : [].concat(axis);\n    // Check for valid range\n    assert(axis.every(ax => ax >= -rank && ax < rank), () => `All values in axis param must be in range [-${rank}, ${rank}) but ` +\n        `got axis ${axis}`);\n    // Check for only integers\n    assert(axis.every(ax => isInt(ax)), () => `All values in axis param must be integers but ` +\n        `got axis ${axis}`);\n    // Handle negative axis.\n    return axis.map(a => a < 0 ? rank + a : a);\n}\n/** Reduces the shape by removing all dimensions of shape 1. */\nexport function squeezeShape(shape, axis) {\n    const newShape = [];\n    const keptDims = [];\n    const isEmptyArray = axis != null && Array.isArray(axis) && axis.length === 0;\n    const axes = (axis == null || isEmptyArray) ?\n        null :\n        parseAxisParam(axis, shape).sort();\n    let j = 0;\n    for (let i = 0; i < shape.length; ++i) {\n        if (axes != null) {\n            if (axes[j] === i && shape[i] !== 1) {\n                throw new Error(`Can't squeeze axis ${i} since its dim '${shape[i]}' is not 1`);\n            }\n            if ((axes[j] == null || axes[j] > i) && shape[i] === 1) {\n                newShape.push(shape[i]);\n                keptDims.push(i);\n            }\n            if (axes[j] <= i) {\n                j++;\n            }\n        }\n        if (shape[i] !== 1) {\n            newShape.push(shape[i]);\n            keptDims.push(i);\n        }\n    }\n    return { newShape, keptDims };\n}\nexport function getTypedArrayFromDType(dtype, size) {\n    let values = null;\n    if (dtype == null || dtype === 'float32') {\n        values = new Float32Array(size);\n    }\n    else if (dtype === 'int32') {\n        values = new Int32Array(size);\n    }\n    else if (dtype === 'bool') {\n        values = new Uint8Array(size);\n    }\n    else {\n        throw new Error(`Unknown data type ${dtype}`);\n    }\n    return values;\n}\nexport function getArrayFromDType(dtype, size) {\n    let values = null;\n    if (dtype == null || dtype === 'float32') {\n        values = new Float32Array(size);\n    }\n    else if (dtype === 'int32') {\n        values = new Int32Array(size);\n    }\n    else if (dtype === 'bool') {\n        values = new Uint8Array(size);\n    }\n    else if (dtype === 'string') {\n        values = new Array(size);\n    }\n    else {\n        throw new Error(`Unknown data type ${dtype}`);\n    }\n    return values;\n}\nexport function checkConversionForErrors(vals, dtype) {\n    for (let i = 0; i < vals.length; i++) {\n        const num = vals[i];\n        if (isNaN(num) || !isFinite(num)) {\n            throw Error(`A tensor of type ${dtype} being uploaded contains ${num}.`);\n        }\n    }\n}\n/** Returns true if the dtype is valid. */\nexport function isValidDtype(dtype) {\n    return dtype === 'bool' || dtype === 'complex64' || dtype === 'float32' ||\n        dtype === 'int32' || dtype === 'string';\n}\n/**\n * Returns true if the new type can't encode the old type without loss of\n * precision.\n */\nexport function hasEncodingLoss(oldType, newType) {\n    if (newType === 'complex64') {\n        return false;\n    }\n    if (newType === 'float32' && oldType !== 'complex64') {\n        return false;\n    }\n    if (newType === 'int32' && oldType !== 'float32' && oldType !== 'complex64') {\n        return false;\n    }\n    if (newType === 'bool' && oldType === 'bool') {\n        return false;\n    }\n    return true;\n}\nexport function isTypedArray(a) {\n    return a instanceof Float32Array || a instanceof Int32Array ||\n        a instanceof Uint8Array;\n}\nexport function bytesPerElement(dtype) {\n    if (dtype === 'float32' || dtype === 'int32') {\n        return 4;\n    }\n    else if (dtype === 'complex64') {\n        return 8;\n    }\n    else if (dtype === 'bool') {\n        return 1;\n    }\n    else {\n        throw new Error(`Unknown dtype ${dtype}`);\n    }\n}\n/**\n * Returns the approximate number of bytes allocated in the string array - 2\n * bytes per character. Computing the exact bytes for a native string in JS is\n * not possible since it depends on the encoding of the html page that serves\n * the website.\n */\nexport function bytesFromStringArray(arr) {\n    if (arr == null) {\n        return 0;\n    }\n    let bytes = 0;\n    arr.forEach(x => bytes += x.length);\n    return bytes;\n}\n/** Returns true if the value is a string. */\nexport function isString(value) {\n    return typeof value === 'string' || value instanceof String;\n}\nexport function isBoolean(value) {\n    return typeof value === 'boolean';\n}\nexport function isNumber(value) {\n    return typeof value === 'number';\n}\nexport function inferDtype(values) {\n    if (Array.isArray(values)) {\n        return inferDtype(values[0]);\n    }\n    if (values instanceof Float32Array) {\n        return 'float32';\n    }\n    else if (values instanceof Int32Array || values instanceof Uint8Array) {\n        return 'int32';\n    }\n    else if (isNumber(values)) {\n        return 'float32';\n    }\n    else if (isString(values)) {\n        return 'string';\n    }\n    else if (isBoolean(values)) {\n        return 'bool';\n    }\n    return 'float32';\n}\nexport function isFunction(f) {\n    return !!(f && f.constructor && f.call && f.apply);\n}\nexport function nearestDivisor(size, start) {\n    for (let i = start; i < size; ++i) {\n        if (size % i === 0) {\n            return i;\n        }\n    }\n    return size;\n}\nexport function computeStrides(shape) {\n    const rank = shape.length;\n    if (rank < 2) {\n        return [];\n    }\n    // Last dimension has implicit stride of 1, thus having D-1 (instead of D)\n    // strides.\n    const strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n        strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    return strides;\n}\nfunction createNestedArray(offset, shape, a) {\n    const ret = new Array();\n    if (shape.length === 1) {\n        const d = shape[0];\n        for (let i = 0; i < d; i++) {\n            ret[i] = a[offset + i];\n        }\n    }\n    else {\n        const d = shape[0];\n        const rest = shape.slice(1);\n        const len = rest.reduce((acc, c) => acc * c);\n        for (let i = 0; i < d; i++) {\n            ret[i] = createNestedArray(offset + i * len, rest, a);\n        }\n    }\n    return ret;\n}\n// Provide a nested array of TypedArray in given shape.\nexport function toNestedArray(shape, a) {\n    if (shape.length === 0) {\n        // Scalar type should return a single number.\n        return a[0];\n    }\n    const size = shape.reduce((acc, c) => acc * c);\n    if (size === 0) {\n        // A tensor with shape zero should be turned into empty list.\n        return [];\n    }\n    if (size !== a.length) {\n        throw new Error(`[${shape}] does not match the input size ${a.length}.`);\n    }\n    return createNestedArray(0, shape, a);\n}\nexport function makeOnesTypedArray(size, dtype) {\n    const array = makeZerosTypedArray(size, dtype);\n    for (let i = 0; i < array.length; i++) {\n        array[i] = 1;\n    }\n    return array;\n}\nexport function makeZerosTypedArray(size, dtype) {\n    if (dtype == null || dtype === 'float32' || dtype === 'complex64') {\n        return new Float32Array(size);\n    }\n    else if (dtype === 'int32') {\n        return new Int32Array(size);\n    }\n    else if (dtype === 'bool') {\n        return new Uint8Array(size);\n    }\n    else {\n        throw new Error(`Unknown data type ${dtype}`);\n    }\n}\n/**\n * Make nested `TypedArray` filled with zeros.\n * @param shape The shape information for the nested array.\n * @param dtype dtype of the array element.\n */\nexport function makeZerosNestedTypedArray(shape, dtype) {\n    const size = shape.reduce((prev, curr) => prev * curr, 1);\n    if (dtype == null || dtype === 'float32') {\n        return toNestedArray(shape, new Float32Array(size));\n    }\n    else if (dtype === 'int32') {\n        return toNestedArray(shape, new Int32Array(size));\n    }\n    else if (dtype === 'bool') {\n        return toNestedArray(shape, new Uint8Array(size));\n    }\n    else {\n        throw new Error(`Unknown data type ${dtype}`);\n    }\n}\nexport function assertNonNegativeIntegerDimensions(shape) {\n    shape.forEach(dimSize => {\n        assert(Number.isInteger(dimSize) && dimSize >= 0, () => `Tensor must have a shape comprised of positive integers but got ` +\n            `shape [${shape}].`);\n    });\n}\n/**\n * Computes flat index for a given location (multidimentionsal index) in a\n * Tensor/multidimensional array.\n *\n * @param locs Location in the tensor.\n * @param rank Rank of the tensor.\n * @param strides Tensor strides.\n */\nexport function locToIndex(locs, rank, strides) {\n    if (rank === 0) {\n        return 0;\n    }\n    else if (rank === 1) {\n        return locs[0];\n    }\n    let index = locs[locs.length - 1];\n    for (let i = 0; i < locs.length - 1; ++i) {\n        index += strides[i] * locs[i];\n    }\n    return index;\n}\n/**\n * Computes the location (multidimensional index) in a tensor/multidimentional\n * array for a given flat index.\n *\n * @param index Index in flat array.\n * @param rank Rank of tensor.\n * @param strides Strides of tensor.\n */\nexport function indexToLoc(index, rank, strides) {\n    if (rank === 0) {\n        return [];\n    }\n    else if (rank === 1) {\n        return [index];\n    }\n    const locs = new Array(rank);\n    for (let i = 0; i < locs.length - 1; ++i) {\n        locs[i] = Math.floor(index / strides[i]);\n        index -= locs[i] * strides[i];\n    }\n    locs[locs.length - 1] = index;\n    return locs;\n}\n/**\n * This method asserts whether an object is a Promise instance.\n * @param object\n */\n// tslint:disable-next-line: no-any\nexport function isPromise(object) {\n    //  We chose to not use 'obj instanceOf Promise' for two reasons:\n    //  1. It only reliably works for es6 Promise, not other Promise\n    //  implementations.\n    //  2. It doesn't work with framework that uses zone.js. zone.js monkey patch\n    //  the async calls, so it is possible the obj (patched) is comparing to a\n    //  pre-patched Promise.\n    return object && object.then && typeof object.then === 'function';\n}\n"]},"metadata":{},"sourceType":"module"}
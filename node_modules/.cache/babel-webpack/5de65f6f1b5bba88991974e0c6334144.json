{"ast":null,"code":"import _asyncToGenerator from \"/Users/ryanliang/Downloads/main_movir_picker/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport * as tf from '@tensorflow/tfjs-core';\n/**\n * Apply a mapping function to a nested structure in a recursive manner.\n *\n * The result of the mapping is an object with the same nested structure (i.e.,\n * of arrays and dicts) as the input, except that some subtrees are replaced,\n * according to the results of the mapping function.\n *\n * Mappings are memoized.  Thus, if the nested structure contains the same\n * object in multiple positions, the output will contain the same mapped object\n * in those positions.  Cycles are not supported, however.\n *\n * @param input: The object to which to apply the mapping function.\n * @param mapFn: A function that expects a single node of the object tree, and\n *   returns a `DeepMapResult`.  The `DeepMapResult` either provides a\n *   replacement value for that node (i.e., replacing the subtree), or indicates\n *   that the node should be processed recursively.\n */\n\nexport function deepMap(input, mapFn) {\n  return deepMapInternal(input, mapFn);\n}\n/**\n * @param seen: A Map of known object mappings (i.e., memoized results of\n *   `mapFn()`)\n * @param containedIn: An set containing objects on the reference path currently\n *   being processed (used to detect cycles).\n */\n\nfunction deepMapInternal(input, mapFn, seen = new Map(), containedIn = new Set()) {\n  if (input == null) {\n    return null;\n  }\n\n  if (containedIn.has(input)) {\n    throw new Error('Circular references are not supported.');\n  }\n\n  if (seen.has(input)) {\n    return seen.get(input);\n  }\n\n  const result = mapFn(input);\n\n  if (result.recurse && result.value !== null) {\n    throw new Error('A deep map function may not return both a value and recurse=true.');\n  }\n\n  if (!result.recurse) {\n    seen.set(input, result.value);\n    return result.value;\n  } else if (isIterable(input)) {\n    // tslint:disable-next-line:no-any\n    const mappedIterable = Array.isArray(input) ? [] : {};\n    containedIn.add(input);\n\n    for (const k in input) {\n      const child = input[k];\n      const childResult = deepMapInternal(child, mapFn, seen, containedIn);\n      mappedIterable[k] = childResult;\n    }\n\n    containedIn.delete(input);\n    return mappedIterable;\n  } else {\n    throw new Error(`Can't recurse into non-iterable type: ${input}`);\n  }\n} // TODO(soergel, kangyizhang) Reconsider naming of deepZip() to avoid confusion\n// with zip()\n\n/**\n * Zip nested structures together in a recursive manner.\n *\n * This has the effect of transposing or pivoting data, e.g. converting it from\n * a row-major representation to a column-major representation.\n *\n * For example, `deepZip([{a: 1, b: 2}, {a: 3, b: 4}])` returns\n * `{a: [1, 3], b: [2, 4]}`.\n *\n * The inputs should all have the same nested structure (i.e., of arrays and\n * dicts).  The result is a single object with the same nested structure, where\n * the leaves are arrays collecting the values of the inputs at that location\n * (or, optionally, the result of a custom function applied to those arrays).\n *\n * @param inputs: An array of the objects to zip together.\n * @param zipFn: (optional) A function that expects an array of elements at a\n *   single node of the object tree, and returns a `DeepMapResult`.  The\n *   `DeepMapResult` either provides a result value for that node (i.e.,\n *   representing the subtree), or indicates that the node should be processed\n *   recursively.  The default zipFn recurses as far as possible and places\n *   arrays at the leaves.\n */\n\n\nexport function deepZip(inputs, zipFn = zipToList) {\n  return deepZipInternal(inputs, zipFn);\n}\n/**\n * @param containedIn: An set containing objects on the reference path currently\n *   being processed (used to detect cycles).\n */\n\nfunction deepZipInternal(inputs, zipFn, containedIn = new Set()) {\n  // The recursion follows the structure of input 0; it's assumed that all the\n  // other inputs have the same structure.\n  const input = inputs[0];\n\n  if (containedIn.has(input)) {\n    throw new Error('Circular references are not supported.');\n  }\n\n  const result = zipFn(inputs);\n\n  if (result.recurse && result.value !== null) {\n    throw new Error('A deep zip function may not return both a value and recurse=true.');\n  }\n\n  if (!result.recurse) {\n    return result.value;\n  } else if (isIterable(input)) {\n    // tslint:disable-next-line:no-any\n    const mappedIterable = Array.isArray(input) ? [] : {};\n    containedIn.add(input);\n\n    for (const k in input) {\n      const children = inputs.map(x => x[k]);\n      const childResult = deepZipInternal(children, zipFn, containedIn);\n      mappedIterable[k] = childResult;\n    }\n\n    containedIn.delete(input);\n    return mappedIterable;\n  } else {\n    throw new Error(`Can't recurse into non-iterable type: ${input}`);\n  }\n} // tslint:disable-next-line:no-any\n\n\nexport function zipToList(x) {\n  if (x === null) {\n    return null;\n  } // TODO(soergel): validate array type?\n\n\n  if (isIterable(x[0])) {\n    return {\n      value: null,\n      recurse: true\n    };\n  } else {\n    return {\n      value: x,\n      recurse: false\n    };\n  }\n}\n/**\n * Apply an async mapping function to a nested structure in a recursive manner.\n *\n * This first creates a nested structure of Promises, and then awaits all of\n * those, resulting in a single Promise for a resolved nested structure.\n *\n * The result of the mapping is an object with the same nested structure (i.e.,\n * of arrays and dicts) as the input, except that some subtrees are replaced,\n * according to the results of the mapping function.\n *\n * Mappings are memoized.  Thus, if the nested structure contains the same\n * object in multiple positions, the output will contain the same mapped object\n * in those positions.  Cycles are not supported, however.\n *\n * @param input: The object to which to apply the mapping function.\n * @param mapFn: A function that expects a single node of the object tree, and\n *   returns a `DeepMapAsyncResult`.  The `DeepMapAsyncResult` either provides\n *   a `Promise` for a replacement value for that node (i.e., replacing the\n *   subtree), or indicates that the node should be processed recursively.  Note\n *   that the decision whether or not to recurse must be made immediately; only\n *   the mapped value may be promised.\n */\n\nexport function deepMapAndAwaitAll(_x, _x2) {\n  return _deepMapAndAwaitAll.apply(this, arguments);\n}\n/**\n * Determine whether the argument is iterable.\n *\n * @returns true if the argument is an array or any non-Tensor object.\n */\n// tslint:disable-next-line:no-any\n\nfunction _deepMapAndAwaitAll() {\n  _deepMapAndAwaitAll = _asyncToGenerator(function* (input, mapFn) {\n    const seen = new Map(); // First do a normal deepMap, collecting Promises in 'seen' as a side effect.\n\n    deepMapInternal(input, mapFn, seen); // Replace the Promises in 'seen' in place.\n    // Note TypeScript provides no async map iteration, and regular map iteration\n    // is broken too, so sadly we have to do Array.from() to make it work.\n    // (There's no advantage to Promise.all(), and that would be tricky anyway.)\n\n    for (const key of Array.from(seen.keys())) {\n      const value = seen.get(key);\n\n      if (tf.util.isPromise(value)) {\n        const mappedValue = yield value;\n        seen.set(key, mappedValue);\n      }\n    } // Normal deepMap again, this time filling in the resolved values.\n    // It's unfortunate that we have to do two passes.\n    // TODO(soergel): test performance and think harder about a fast solution.\n\n\n    const result = deepMapInternal(input, mapFn, seen);\n    return result;\n  });\n  return _deepMapAndAwaitAll.apply(this, arguments);\n}\n\nexport function isIterable(obj) {\n  return obj != null && !ArrayBuffer.isView(obj) && (Array.isArray(obj) || typeof obj === 'object' && !(obj instanceof tf.Tensor));\n}\n/**\n * Determine whether the argument can be converted to Tensor.\n *\n * Tensors, primitives, arrays, and TypedArrays all qualify; anything else does\n * not.\n *\n * @returns true if the argument can be converted to Tensor.\n */\n// tslint:disable-next-line:no-any\n\nexport function canTensorify(obj) {\n  return obj == null || isPrimitive(obj) || Array.isArray(obj) || typeof obj === 'object' && obj instanceof tf.Tensor || tf.util.isTypedArray(obj);\n}\n/**\n * Returns true if the given `value` is a primitive type. Otherwise returns\n * false. This is equivalant to node util.isPrimitive\n */\n\nfunction isPrimitive(value) {\n  return value === null || typeof value !== 'object' && typeof value !== 'function';\n}","map":{"version":3,"sources":["/Users/ryanliang/Downloads/main_movir_picker/node_modules/@tensorflow/tfjs-data/dist/util/deep_map.js"],"names":["tf","deepMap","input","mapFn","deepMapInternal","seen","Map","containedIn","Set","has","Error","get","result","recurse","value","set","isIterable","mappedIterable","Array","isArray","add","k","child","childResult","delete","deepZip","inputs","zipFn","zipToList","deepZipInternal","children","map","x","deepMapAndAwaitAll","key","from","keys","util","isPromise","mappedValue","obj","ArrayBuffer","isView","Tensor","canTensorify","isPrimitive","isTypedArray"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport * as tf from '@tensorflow/tfjs-core';\n/**\n * Apply a mapping function to a nested structure in a recursive manner.\n *\n * The result of the mapping is an object with the same nested structure (i.e.,\n * of arrays and dicts) as the input, except that some subtrees are replaced,\n * according to the results of the mapping function.\n *\n * Mappings are memoized.  Thus, if the nested structure contains the same\n * object in multiple positions, the output will contain the same mapped object\n * in those positions.  Cycles are not supported, however.\n *\n * @param input: The object to which to apply the mapping function.\n * @param mapFn: A function that expects a single node of the object tree, and\n *   returns a `DeepMapResult`.  The `DeepMapResult` either provides a\n *   replacement value for that node (i.e., replacing the subtree), or indicates\n *   that the node should be processed recursively.\n */\nexport function deepMap(input, mapFn) {\n    return deepMapInternal(input, mapFn);\n}\n/**\n * @param seen: A Map of known object mappings (i.e., memoized results of\n *   `mapFn()`)\n * @param containedIn: An set containing objects on the reference path currently\n *   being processed (used to detect cycles).\n */\nfunction deepMapInternal(input, mapFn, seen = new Map(), containedIn = new Set()) {\n    if (input == null) {\n        return null;\n    }\n    if (containedIn.has(input)) {\n        throw new Error('Circular references are not supported.');\n    }\n    if (seen.has(input)) {\n        return seen.get(input);\n    }\n    const result = mapFn(input);\n    if (result.recurse && result.value !== null) {\n        throw new Error('A deep map function may not return both a value and recurse=true.');\n    }\n    if (!result.recurse) {\n        seen.set(input, result.value);\n        return result.value;\n    }\n    else if (isIterable(input)) {\n        // tslint:disable-next-line:no-any\n        const mappedIterable = Array.isArray(input) ? [] : {};\n        containedIn.add(input);\n        for (const k in input) {\n            const child = input[k];\n            const childResult = deepMapInternal(child, mapFn, seen, containedIn);\n            mappedIterable[k] = childResult;\n        }\n        containedIn.delete(input);\n        return mappedIterable;\n    }\n    else {\n        throw new Error(`Can't recurse into non-iterable type: ${input}`);\n    }\n}\n// TODO(soergel, kangyizhang) Reconsider naming of deepZip() to avoid confusion\n// with zip()\n/**\n * Zip nested structures together in a recursive manner.\n *\n * This has the effect of transposing or pivoting data, e.g. converting it from\n * a row-major representation to a column-major representation.\n *\n * For example, `deepZip([{a: 1, b: 2}, {a: 3, b: 4}])` returns\n * `{a: [1, 3], b: [2, 4]}`.\n *\n * The inputs should all have the same nested structure (i.e., of arrays and\n * dicts).  The result is a single object with the same nested structure, where\n * the leaves are arrays collecting the values of the inputs at that location\n * (or, optionally, the result of a custom function applied to those arrays).\n *\n * @param inputs: An array of the objects to zip together.\n * @param zipFn: (optional) A function that expects an array of elements at a\n *   single node of the object tree, and returns a `DeepMapResult`.  The\n *   `DeepMapResult` either provides a result value for that node (i.e.,\n *   representing the subtree), or indicates that the node should be processed\n *   recursively.  The default zipFn recurses as far as possible and places\n *   arrays at the leaves.\n */\nexport function deepZip(inputs, zipFn = zipToList) {\n    return deepZipInternal(inputs, zipFn);\n}\n/**\n * @param containedIn: An set containing objects on the reference path currently\n *   being processed (used to detect cycles).\n */\nfunction deepZipInternal(inputs, zipFn, containedIn = new Set()) {\n    // The recursion follows the structure of input 0; it's assumed that all the\n    // other inputs have the same structure.\n    const input = inputs[0];\n    if (containedIn.has(input)) {\n        throw new Error('Circular references are not supported.');\n    }\n    const result = zipFn(inputs);\n    if (result.recurse && result.value !== null) {\n        throw new Error('A deep zip function may not return both a value and recurse=true.');\n    }\n    if (!result.recurse) {\n        return result.value;\n    }\n    else if (isIterable(input)) {\n        // tslint:disable-next-line:no-any\n        const mappedIterable = Array.isArray(input) ? [] : {};\n        containedIn.add(input);\n        for (const k in input) {\n            const children = inputs.map(x => x[k]);\n            const childResult = deepZipInternal(children, zipFn, containedIn);\n            mappedIterable[k] = childResult;\n        }\n        containedIn.delete(input);\n        return mappedIterable;\n    }\n    else {\n        throw new Error(`Can't recurse into non-iterable type: ${input}`);\n    }\n}\n// tslint:disable-next-line:no-any\nexport function zipToList(x) {\n    if (x === null) {\n        return null;\n    }\n    // TODO(soergel): validate array type?\n    if (isIterable(x[0])) {\n        return { value: null, recurse: true };\n    }\n    else {\n        return { value: x, recurse: false };\n    }\n}\n/**\n * Apply an async mapping function to a nested structure in a recursive manner.\n *\n * This first creates a nested structure of Promises, and then awaits all of\n * those, resulting in a single Promise for a resolved nested structure.\n *\n * The result of the mapping is an object with the same nested structure (i.e.,\n * of arrays and dicts) as the input, except that some subtrees are replaced,\n * according to the results of the mapping function.\n *\n * Mappings are memoized.  Thus, if the nested structure contains the same\n * object in multiple positions, the output will contain the same mapped object\n * in those positions.  Cycles are not supported, however.\n *\n * @param input: The object to which to apply the mapping function.\n * @param mapFn: A function that expects a single node of the object tree, and\n *   returns a `DeepMapAsyncResult`.  The `DeepMapAsyncResult` either provides\n *   a `Promise` for a replacement value for that node (i.e., replacing the\n *   subtree), or indicates that the node should be processed recursively.  Note\n *   that the decision whether or not to recurse must be made immediately; only\n *   the mapped value may be promised.\n */\nexport async function deepMapAndAwaitAll(input, mapFn) {\n    const seen = new Map();\n    // First do a normal deepMap, collecting Promises in 'seen' as a side effect.\n    deepMapInternal(input, mapFn, seen);\n    // Replace the Promises in 'seen' in place.\n    // Note TypeScript provides no async map iteration, and regular map iteration\n    // is broken too, so sadly we have to do Array.from() to make it work.\n    // (There's no advantage to Promise.all(), and that would be tricky anyway.)\n    for (const key of Array.from(seen.keys())) {\n        const value = seen.get(key);\n        if (tf.util.isPromise(value)) {\n            const mappedValue = await value;\n            seen.set(key, mappedValue);\n        }\n    }\n    // Normal deepMap again, this time filling in the resolved values.\n    // It's unfortunate that we have to do two passes.\n    // TODO(soergel): test performance and think harder about a fast solution.\n    const result = deepMapInternal(input, mapFn, seen);\n    return result;\n}\n/**\n * Determine whether the argument is iterable.\n *\n * @returns true if the argument is an array or any non-Tensor object.\n */\n// tslint:disable-next-line:no-any\nexport function isIterable(obj) {\n    return obj != null && (!ArrayBuffer.isView(obj)) &&\n        (Array.isArray(obj) ||\n            (typeof obj === 'object' && !(obj instanceof tf.Tensor)));\n}\n/**\n * Determine whether the argument can be converted to Tensor.\n *\n * Tensors, primitives, arrays, and TypedArrays all qualify; anything else does\n * not.\n *\n * @returns true if the argument can be converted to Tensor.\n */\n// tslint:disable-next-line:no-any\nexport function canTensorify(obj) {\n    return obj == null || isPrimitive(obj) || Array.isArray(obj) ||\n        (typeof obj === 'object' && (obj instanceof tf.Tensor)) ||\n        tf.util.isTypedArray(obj);\n}\n/**\n * Returns true if the given `value` is a primitive type. Otherwise returns\n * false. This is equivalant to node util.isPrimitive\n */\nfunction isPrimitive(value) {\n    return (value === null ||\n        (typeof value !== 'object' && typeof value !== 'function'));\n}\n"]},"metadata":{},"sourceType":"module"}
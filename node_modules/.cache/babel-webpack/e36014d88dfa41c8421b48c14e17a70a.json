{"ast":null,"code":"import _asyncToGenerator from \"/Users/ryanliang/Downloads/main_movir_picker/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { nonMaxSuppressionV3Impl } from '../../backends/non_max_suppression_impl';\nimport { convertToTensor } from '../../tensor_util_env';\nimport { nonMaxSuppSanityCheck } from '../nonmax_util';\nimport { tensor1d } from '../tensor1d';\n/**\n * Performs non maximum suppression of bounding boxes based on\n * iou (intersection over union).\n *\n * This is the async version of `nonMaxSuppression`\n *\n * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is\n *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of\n *     the bounding box.\n * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.\n * @param maxOutputSize The maximum number of boxes to be selected.\n * @param iouThreshold A float representing the threshold for deciding whether\n *     boxes overlap too much with respect to IOU. Must be between [0, 1].\n *     Defaults to 0.5 (50% box overlap).\n * @param scoreThreshold A threshold for deciding when to remove boxes based\n *     on score. Defaults to -inf, which means any score is accepted.\n * @return A 1D tensor with the selected box indices.\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\n\nfunction nonMaxSuppressionAsync_(_x, _x2, _x3) {\n  return _nonMaxSuppressionAsync_.apply(this, arguments);\n}\n\nfunction _nonMaxSuppressionAsync_() {\n  _nonMaxSuppressionAsync_ = _asyncToGenerator(function* (boxes, scores, maxOutputSize, iouThreshold = 0.5, scoreThreshold = Number.NEGATIVE_INFINITY) {\n    const $boxes = convertToTensor(boxes, 'boxes', 'nonMaxSuppressionAsync');\n    const $scores = convertToTensor(scores, 'scores', 'nonMaxSuppressionAsync');\n    const inputs = nonMaxSuppSanityCheck($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold);\n    maxOutputSize = inputs.maxOutputSize;\n    iouThreshold = inputs.iouThreshold;\n    scoreThreshold = inputs.scoreThreshold;\n    const boxesAndScores = yield Promise.all([$boxes.data(), $scores.data()]);\n    const boxesVals = boxesAndScores[0];\n    const scoresVals = boxesAndScores[1]; // We call a cpu based impl directly with the typedarray data  here rather\n    // than a kernel because all kernels are synchronous (and thus cannot await\n    // .data()).\n\n    const {\n      selectedIndices\n    } = nonMaxSuppressionV3Impl(boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold);\n\n    if ($boxes !== boxes) {\n      $boxes.dispose();\n    }\n\n    if ($scores !== scores) {\n      $scores.dispose();\n    }\n\n    return tensor1d(selectedIndices, 'int32');\n  });\n  return _nonMaxSuppressionAsync_.apply(this, arguments);\n}\n\nexport const nonMaxSuppressionAsync = nonMaxSuppressionAsync_;","map":{"version":3,"sources":["/Users/ryanliang/Downloads/main_movir_picker/node_modules/@tensorflow/tfjs-core/dist/ops/image/non_max_suppression_async.js"],"names":["nonMaxSuppressionV3Impl","convertToTensor","nonMaxSuppSanityCheck","tensor1d","nonMaxSuppressionAsync_","boxes","scores","maxOutputSize","iouThreshold","scoreThreshold","Number","NEGATIVE_INFINITY","$boxes","$scores","inputs","boxesAndScores","Promise","all","data","boxesVals","scoresVals","selectedIndices","dispose","nonMaxSuppressionAsync"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,uBAAT,QAAwC,yCAAxC;AACA,SAASC,eAAT,QAAgC,uBAAhC;AACA,SAASC,qBAAT,QAAsC,gBAAtC;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;SACeC,uB;;;;;+CAAf,WAAuCC,KAAvC,EAA8CC,MAA9C,EAAsDC,aAAtD,EAAqEC,YAAY,GAAG,GAApF,EAAyFC,cAAc,GAAGC,MAAM,CAACC,iBAAjH,EAAoI;AAChI,UAAMC,MAAM,GAAGX,eAAe,CAACI,KAAD,EAAQ,OAAR,EAAiB,wBAAjB,CAA9B;AACA,UAAMQ,OAAO,GAAGZ,eAAe,CAACK,MAAD,EAAS,QAAT,EAAmB,wBAAnB,CAA/B;AACA,UAAMQ,MAAM,GAAGZ,qBAAqB,CAACU,MAAD,EAASC,OAAT,EAAkBN,aAAlB,EAAiCC,YAAjC,EAA+CC,cAA/C,CAApC;AACAF,IAAAA,aAAa,GAAGO,MAAM,CAACP,aAAvB;AACAC,IAAAA,YAAY,GAAGM,MAAM,CAACN,YAAtB;AACAC,IAAAA,cAAc,GAAGK,MAAM,CAACL,cAAxB;AACA,UAAMM,cAAc,SAASC,OAAO,CAACC,GAAR,CAAY,CAACL,MAAM,CAACM,IAAP,EAAD,EAAgBL,OAAO,CAACK,IAAR,EAAhB,CAAZ,CAA7B;AACA,UAAMC,SAAS,GAAGJ,cAAc,CAAC,CAAD,CAAhC;AACA,UAAMK,UAAU,GAAGL,cAAc,CAAC,CAAD,CAAjC,CATgI,CAUhI;AACA;AACA;;AACA,UAAM;AAAEM,MAAAA;AAAF,QAAsBrB,uBAAuB,CAACmB,SAAD,EAAYC,UAAZ,EAAwBb,aAAxB,EAAuCC,YAAvC,EAAqDC,cAArD,CAAnD;;AACA,QAAIG,MAAM,KAAKP,KAAf,EAAsB;AAClBO,MAAAA,MAAM,CAACU,OAAP;AACH;;AACD,QAAIT,OAAO,KAAKP,MAAhB,EAAwB;AACpBO,MAAAA,OAAO,CAACS,OAAR;AACH;;AACD,WAAOnB,QAAQ,CAACkB,eAAD,EAAkB,OAAlB,CAAf;AACH,G;;;;AACD,OAAO,MAAME,sBAAsB,GAAGnB,uBAA/B","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { nonMaxSuppressionV3Impl } from '../../backends/non_max_suppression_impl';\nimport { convertToTensor } from '../../tensor_util_env';\nimport { nonMaxSuppSanityCheck } from '../nonmax_util';\nimport { tensor1d } from '../tensor1d';\n/**\n * Performs non maximum suppression of bounding boxes based on\n * iou (intersection over union).\n *\n * This is the async version of `nonMaxSuppression`\n *\n * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is\n *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of\n *     the bounding box.\n * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.\n * @param maxOutputSize The maximum number of boxes to be selected.\n * @param iouThreshold A float representing the threshold for deciding whether\n *     boxes overlap too much with respect to IOU. Must be between [0, 1].\n *     Defaults to 0.5 (50% box overlap).\n * @param scoreThreshold A threshold for deciding when to remove boxes based\n *     on score. Defaults to -inf, which means any score is accepted.\n * @return A 1D tensor with the selected box indices.\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\nasync function nonMaxSuppressionAsync_(boxes, scores, maxOutputSize, iouThreshold = 0.5, scoreThreshold = Number.NEGATIVE_INFINITY) {\n    const $boxes = convertToTensor(boxes, 'boxes', 'nonMaxSuppressionAsync');\n    const $scores = convertToTensor(scores, 'scores', 'nonMaxSuppressionAsync');\n    const inputs = nonMaxSuppSanityCheck($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold);\n    maxOutputSize = inputs.maxOutputSize;\n    iouThreshold = inputs.iouThreshold;\n    scoreThreshold = inputs.scoreThreshold;\n    const boxesAndScores = await Promise.all([$boxes.data(), $scores.data()]);\n    const boxesVals = boxesAndScores[0];\n    const scoresVals = boxesAndScores[1];\n    // We call a cpu based impl directly with the typedarray data  here rather\n    // than a kernel because all kernels are synchronous (and thus cannot await\n    // .data()).\n    const { selectedIndices } = nonMaxSuppressionV3Impl(boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold);\n    if ($boxes !== boxes) {\n        $boxes.dispose();\n    }\n    if ($scores !== scores) {\n        $scores.dispose();\n    }\n    return tensor1d(selectedIndices, 'int32');\n}\nexport const nonMaxSuppressionAsync = nonMaxSuppressionAsync_;\n"]},"metadata":{},"sourceType":"module"}
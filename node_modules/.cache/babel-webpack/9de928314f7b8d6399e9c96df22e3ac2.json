{"ast":null,"code":"import _asyncToGenerator from \"/Users/ryanliang/Downloads/main_movir_picker/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Import webgl flags.\nimport './flags_webgl';\nimport { backend_util, buffer, DataStorage, engine, env, kernel_impls, KernelBackend, scalar, tidy, util } from '@tensorflow/tfjs-core';\nimport { getWebGLContext } from './canvas_util';\nimport { DecodeMatrixProgram } from './decode_matrix_gpu';\nimport { DecodeMatrixPackedProgram } from './decode_matrix_packed_gpu';\nimport { EncodeFloatProgram } from './encode_float_gpu';\nimport { EncodeFloatPackedProgram } from './encode_float_packed_gpu';\nimport { EncodeMatrixProgram } from './encode_matrix_gpu';\nimport { EncodeMatrixPackedProgram } from './encode_matrix_packed_gpu';\nimport { GPGPUContext } from './gpgpu_context';\nimport * as gpgpu_math from './gpgpu_math';\nimport { simpleAbsImplCPU } from './kernel_utils/shared';\nimport { PackProgram } from './pack_gpu';\nimport { ReshapePackedProgram } from './reshape_packed_gpu';\nimport * as tex_util from './tex_util';\nimport { TextureUsage } from './tex_util';\nimport { TextureManager } from './texture_manager';\nimport * as unary_op from './unaryop_gpu';\nimport { UnaryOpProgram } from './unaryop_gpu';\nimport { UnaryOpPackedProgram } from './unaryop_packed_gpu';\nimport { UnpackProgram } from './unpack_gpu';\nimport * as webgl_util from './webgl_util';\nconst whereImpl = kernel_impls.whereImpl;\nexport const EPSILON_FLOAT32 = 1e-7;\nexport const EPSILON_FLOAT16 = 1e-4;\nconst binaryCaches = {};\nexport function getBinaryCache(webGLVersion) {\n  if (webGLVersion in binaryCaches) {\n    return binaryCaches[webGLVersion];\n  }\n\n  binaryCaches[webGLVersion] = {};\n  return binaryCaches[webGLVersion];\n} // Empirically determined constant used to determine size threshold for handing\n// off execution to the CPU.\n\nconst CPU_HANDOFF_SIZE_THRESHOLD = 128; // Empirically determined constant used to decide the number of MB on GPU\n// before we warn about high memory use. The MB are this constant * screen area\n// * dpi / 1024 / 1024.\n\nconst BEFORE_PAGING_CONSTANT = 600;\n\nfunction numMBBeforeWarning() {\n  if (env().global.screen == null) {\n    return 1024; // 1 GB.\n  }\n\n  return env().global.screen.height * env().global.screen.width * window.devicePixelRatio * BEFORE_PAGING_CONSTANT / 1024 / 1024;\n}\n\nexport class MathBackendWebGL extends KernelBackend {\n  constructor(gpgpu) {\n    super(); // Maps data ids that have a pending read operation, to list of subscribers.\n\n    this.pendingRead = new WeakMap(); // List of data ids that are scheduled for disposal, but are waiting on a\n    // pending read operation.\n\n    this.pendingDisposal = new WeakSet(); // Used to count the number of 'shallow' sliced tensors that point to the\n    // same data id.\n\n    this.dataRefCount = new WeakMap();\n    this.numBytesInGPU = 0; // Accumulated time spent (including blocking) in uploading data to webgl.\n\n    this.uploadWaitMs = 0; // Accumulated time spent (including blocking in downloading data from webgl.\n\n    this.downloadWaitMs = 0; // record the last manual GL Flush time.\n\n    this.lastGlFlushTime = 0;\n    this.warnedAboutMemory = false;\n    this.warnedAboutCPUBackend = false;\n    this.pendingDeletes = 0;\n    this.disposed = false;\n\n    if (!env().getBool('HAS_WEBGL')) {\n      throw new Error('WebGL is not supported on this device');\n    }\n\n    if (gpgpu == null) {\n      const gl = getWebGLContext(env().getNumber('WEBGL_VERSION'));\n      this.binaryCache = getBinaryCache(env().getNumber('WEBGL_VERSION'));\n      this.gpgpu = new GPGPUContext(gl);\n      this.canvas = gl.canvas;\n      this.gpgpuCreatedLocally = true;\n    } else {\n      this.gpgpu = gpgpu;\n      this.binaryCache = {};\n      this.gpgpuCreatedLocally = false;\n      this.canvas = gpgpu.gl.canvas;\n    }\n\n    this.textureManager = new TextureManager(this.gpgpu);\n    this.numMBBeforeWarning = numMBBeforeWarning();\n    this.texData = new DataStorage(this, engine());\n  }\n\n  nextDataId() {\n    return MathBackendWebGL.nextDataId++;\n  }\n\n  numDataIds() {\n    return this.texData.numDataIds() + (this.cpuBackend ? this.cpuBackend.numDataIds() : 0) - this.pendingDeletes;\n  }\n\n  write(values, shape, dtype) {\n    if (env().getBool('WEBGL_CHECK_NUMERICAL_PROBLEMS') || env().getBool('DEBUG')) {\n      this.checkNumericalProblems(values);\n    }\n\n    if (dtype === 'complex64' && values != null) {\n      throw new Error(`Cannot write to a complex64 dtype. ` + `Please use tf.complex(real, imag).`);\n    }\n\n    const dataId = {\n      id: this.nextDataId()\n    };\n    this.texData.set(dataId, {\n      shape,\n      dtype,\n      values,\n      usage: TextureUsage.UPLOAD,\n      refCount: 1\n    });\n    return dataId;\n  }\n  /** Return refCount of a `TensorData`. */\n\n\n  refCount(dataId) {\n    if (this.texData.has(dataId)) {\n      const tensorData = this.texData.get(dataId);\n      return tensorData.refCount;\n    }\n\n    return 0;\n  }\n  /** Increase refCount of a `TextureData`. */\n\n\n  incRef(dataId) {\n    const texData = this.texData.get(dataId);\n    texData.refCount++;\n  }\n  /** Decrease refCount of a `TextureData`. */\n\n\n  decRef(dataId) {\n    if (this.texData.has(dataId)) {\n      const texData = this.texData.get(dataId);\n      texData.refCount--;\n    }\n  }\n\n  move(dataId, values, shape, dtype, refCount) {\n    if (env().getBool('DEBUG')) {\n      this.checkNumericalProblems(values);\n    }\n\n    if (dtype === 'complex64') {\n      throw new Error(`Cannot write to a complex64 dtype. ` + `Please use tf.complex(real, imag).`);\n    }\n\n    this.texData.set(dataId, {\n      shape,\n      dtype,\n      values,\n      usage: TextureUsage.UPLOAD,\n      refCount\n    });\n  }\n\n  disposeIntermediateTensorInfo(tensorInfo) {\n    this.disposeData(tensorInfo.dataId);\n  }\n\n  readSync(dataId) {\n    const texData = this.texData.get(dataId);\n    const {\n      values,\n      dtype,\n      complexTensorInfos,\n      slice,\n      shape,\n      isPacked\n    } = texData; // The presence of `slice` indicates this tensor is a shallow slice of a\n    // different tensor, and is using that original tensor's texture. Run\n    // `clone` in order to copy that texture and read from it.\n\n    if (slice != null) {\n      let program;\n\n      if (isPacked) {\n        program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n      } else {\n        program = new UnaryOpProgram(shape, unary_op.CLONE);\n      }\n\n      const res = this.runWebGLProgram(program, [{\n        dataId,\n        shape,\n        dtype\n      }], dtype);\n      const data = this.readSync(res.dataId);\n      this.disposeIntermediateTensorInfo(res);\n      return data;\n    }\n\n    if (values != null) {\n      return this.convertAndCacheOnCPU(dataId);\n    }\n\n    if (dtype === 'string') {\n      return values;\n    }\n\n    const shouldTimeProgram = this.activeTimers != null;\n    let start;\n\n    if (shouldTimeProgram) {\n      start = util.now();\n    }\n\n    let result;\n\n    if (dtype === 'complex64') {\n      const realValues = this.readSync(complexTensorInfos.real.dataId);\n      const imagValues = this.readSync(complexTensorInfos.imag.dataId);\n      result = backend_util.mergeRealAndImagArrays(realValues, imagValues);\n    } else {\n      result = this.getValuesFromTexture(dataId);\n    }\n\n    if (shouldTimeProgram) {\n      this.downloadWaitMs += util.now() - start;\n    }\n\n    return this.convertAndCacheOnCPU(dataId, result);\n  }\n\n  read(dataId) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this.pendingRead.has(dataId)) {\n        const subscribers = _this.pendingRead.get(dataId);\n\n        return new Promise(resolve => subscribers.push(resolve));\n      }\n\n      const texData = _this.texData.get(dataId);\n\n      const {\n        values,\n        shape,\n        slice,\n        dtype,\n        complexTensorInfos,\n        isPacked\n      } = texData; // The presence of `slice` indicates this tensor is a shallow slice of a\n      // different tensor, and is using that original tensor's texture. Run\n      // `clone` in order to copy that texture and read from it.\n\n      if (slice != null) {\n        let program;\n\n        if (isPacked) {\n          program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n        } else {\n          program = new UnaryOpProgram(shape, unary_op.CLONE);\n        }\n\n        const res = _this.runWebGLProgram(program, [{\n          dataId,\n          shape,\n          dtype\n        }], dtype);\n\n        const data = _this.read(res.dataId);\n\n        _this.disposeIntermediateTensorInfo(res);\n\n        return data;\n      }\n\n      if (values != null) {\n        return _this.convertAndCacheOnCPU(dataId);\n      }\n\n      if (!env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED') && env().getNumber('WEBGL_VERSION') === 2) {\n        throw new Error(`tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and ` + `WEBGL_VERSION=2 not yet supported.`);\n      }\n\n      let buffer = null;\n      let tmpDownloadTarget;\n\n      if (dtype !== 'complex64' && env().get('WEBGL_BUFFER_SUPPORTED')) {\n        // Possibly copy the texture into a buffer before inserting a fence.\n        tmpDownloadTarget = _this.decode(dataId);\n\n        const tmpData = _this.texData.get(tmpDownloadTarget.dataId);\n\n        buffer = _this.gpgpu.createBufferFromTexture(tmpData.texture, ...tex_util.getDenseTexShape(shape));\n      }\n\n      _this.pendingRead.set(dataId, []);\n\n      if (dtype !== 'complex64') {\n        // Create a fence and wait for it to resolve.\n        yield _this.gpgpu.createAndWaitForFence();\n      } // Download the values from the GPU.\n\n\n      let vals;\n\n      if (dtype === 'complex64') {\n        const ps = yield Promise.all([_this.read(complexTensorInfos.real.dataId), _this.read(complexTensorInfos.imag.dataId)]);\n        const realValues = ps[0];\n        const imagValues = ps[1];\n        vals = backend_util.mergeRealAndImagArrays(realValues, imagValues);\n      } else if (buffer == null) {\n        vals = _this.getValuesFromTexture(dataId);\n      } else {\n        const size = util.sizeFromShape(shape);\n        vals = _this.gpgpu.downloadFloat32MatrixFromBuffer(buffer, size);\n      }\n\n      if (tmpDownloadTarget != null) {\n        _this.disposeIntermediateTensorInfo(tmpDownloadTarget);\n      }\n\n      const dTypeVals = _this.convertAndCacheOnCPU(dataId, vals);\n\n      const subscribers = _this.pendingRead.get(dataId);\n\n      _this.pendingRead.delete(dataId); // Notify all pending reads.\n\n\n      subscribers.forEach(resolve => resolve(dTypeVals));\n\n      if (_this.pendingDisposal.has(dataId)) {\n        _this.pendingDisposal.delete(dataId);\n\n        if (_this.disposeData(dataId)) {\n          engine().removeDataId(dataId, _this);\n        }\n\n        _this.pendingDeletes--;\n      }\n\n      return dTypeVals;\n    })();\n  }\n\n  bufferSync(t) {\n    const data = this.readSync(t.dataId);\n    let decodedData = data;\n\n    if (t.dtype === 'string') {\n      try {\n        // Decode the bytes into string.\n        decodedData = data.map(d => util.decodeString(d));\n      } catch (_a) {\n        throw new Error('Failed to decode encoded string bytes into utf-8');\n      }\n    }\n\n    return buffer(t.shape, t.dtype, decodedData);\n  }\n\n  checkNumericalProblems(values) {\n    if (values == null) {\n      return;\n    }\n\n    for (let i = 0; i < values.length; i++) {\n      const num = values[i];\n\n      if (!webgl_util.canBeRepresented(num)) {\n        if (env().getBool('WEBGL_RENDER_FLOAT32_CAPABLE')) {\n          throw Error(`The value ${num} cannot be represented with your ` + `current settings. Consider enabling float32 rendering: ` + `'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);\n        }\n\n        throw Error(`The value ${num} cannot be represented on this device.`);\n      }\n    }\n  }\n\n  getValuesFromTexture(dataId) {\n    const {\n      shape,\n      dtype,\n      isPacked\n    } = this.texData.get(dataId);\n    const size = util.sizeFromShape(shape);\n\n    if (env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED')) {\n      const tmpTarget = this.decode(dataId);\n      const tmpData = this.texData.get(tmpTarget.dataId);\n      const vals = this.gpgpu.downloadMatrixFromPackedTexture(tmpData.texture, ...tex_util.getDenseTexShape(shape)).subarray(0, size);\n      this.disposeIntermediateTensorInfo(tmpTarget);\n      return vals;\n    }\n\n    const shouldUsePackedProgram = env().getBool('WEBGL_PACK') && isPacked === true;\n    const outputShape = shouldUsePackedProgram ? webgl_util.getShapeAs3D(shape) : shape;\n    const program = shouldUsePackedProgram ? new EncodeFloatPackedProgram(outputShape) : new EncodeFloatProgram(outputShape);\n    const output = this.runWebGLProgram(program, [{\n      shape: outputShape,\n      dtype,\n      dataId\n    }], 'float32');\n    const tmpData = this.texData.get(output.dataId);\n    const vals = this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(tmpData.texture, tmpData.texShape[0], tmpData.texShape[1]).subarray(0, size);\n    this.disposeIntermediateTensorInfo(output);\n    return vals;\n  }\n\n  timerAvailable() {\n    return env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0;\n  }\n\n  time(f) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const oldActiveTimers = _this2.activeTimers;\n      const newActiveTimers = [];\n      let outerMostTime = false;\n\n      if (_this2.programTimersStack == null) {\n        _this2.programTimersStack = newActiveTimers;\n        outerMostTime = true;\n      } else {\n        _this2.activeTimers.push(newActiveTimers);\n      }\n\n      _this2.activeTimers = newActiveTimers;\n      f(); // needing to split these up because util.flatten only accepts certain types\n\n      const flattenedActiveTimerQueries = util.flatten(_this2.activeTimers.map(d => d.query)).filter(d => d != null);\n      const flattenedActiveTimerNames = util.flatten(_this2.activeTimers.map(d => d.name)).filter(d => d != null);\n      _this2.activeTimers = oldActiveTimers;\n\n      if (outerMostTime) {\n        _this2.programTimersStack = null;\n      }\n\n      const res = {\n        uploadWaitMs: _this2.uploadWaitMs,\n        downloadWaitMs: _this2.downloadWaitMs,\n        kernelMs: null,\n        wallMs: null // will be filled by the engine\n\n      };\n\n      if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n        const kernelMs = yield Promise.all(flattenedActiveTimerQueries);\n        res['kernelMs'] = util.sum(kernelMs);\n\n        res['getExtraProfileInfo'] = () => kernelMs.map((d, i) => ({\n          name: flattenedActiveTimerNames[i],\n          ms: d\n        })).map(d => `${d.name}: ${d.ms}`).join(', ');\n      } else {\n        res['kernelMs'] = {\n          error: 'WebGL query timers are not supported in this environment.'\n        };\n      }\n\n      _this2.uploadWaitMs = 0;\n      _this2.downloadWaitMs = 0;\n      return res;\n    })();\n  }\n\n  memory() {\n    return {\n      unreliable: false,\n      numBytesInGPU: this.numBytesInGPU,\n      numBytesInGPUAllocated: this.textureManager.numBytesAllocated,\n      numBytesInGPUFree: this.textureManager.numBytesFree\n    };\n  }\n\n  startTimer() {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      return this.gpgpu.beginQuery();\n    }\n\n    return {\n      startMs: util.now(),\n      endMs: null\n    };\n  }\n\n  endTimer(query) {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      this.gpgpu.endQuery();\n      return query;\n    }\n\n    query.endMs = util.now();\n    return query;\n  }\n\n  getQueryTime(query) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n        return _this3.gpgpu.waitForQueryAndGetTime(query);\n      }\n\n      const timerQuery = query;\n      return timerQuery.endMs - timerQuery.startMs;\n    })();\n  }\n  /**\n   * Decrease the RefCount on the dataId and dispose the memory if the dataId\n   * has 0 refCount. If there are pending read on the data, the disposal would\n   * added to the pending delete queue. Return true if the dataId is removed\n   * from backend or the backend does not contain the dataId, false if the\n   * dataId is not removed. Memory may or may not be released even when dataId\n   * is removed, which also depends on dataRefCount, see `releaseGPU`.\n   * @param dataId\n   * @oaram force Optional, remove the data regardless of refCount\n   */\n\n\n  disposeData(dataId, force = false) {\n    if (this.pendingDisposal.has(dataId)) {\n      return false;\n    } // No-op if already disposed.\n\n\n    if (!this.texData.has(dataId)) {\n      return true;\n    } // if force flag is set, change refCount to 0, this would ensure disposal\n    // when added to the pendingDisposal queue. Memory may or may not be\n    // released, which also depends on dataRefCount, see `releaseGPU`.\n\n\n    if (force) {\n      this.texData.get(dataId).refCount = 0;\n    } else {\n      this.texData.get(dataId).refCount--;\n    }\n\n    if (!force && this.texData.get(dataId).refCount > 0) {\n      return false;\n    }\n\n    if (this.pendingRead.has(dataId)) {\n      this.pendingDisposal.add(dataId);\n      this.pendingDeletes++;\n      return false;\n    }\n\n    this.releaseGPUData(dataId);\n    const {\n      complexTensorInfos\n    } = this.texData.get(dataId);\n\n    if (complexTensorInfos != null) {\n      this.disposeData(complexTensorInfos.real.dataId, force);\n      this.disposeData(complexTensorInfos.imag.dataId, force);\n    }\n\n    this.texData.delete(dataId);\n    return true;\n  }\n\n  releaseGPUData(dataId) {\n    const {\n      texture,\n      dtype,\n      texShape,\n      usage,\n      isPacked,\n      slice\n    } = this.texData.get(dataId);\n    const key = slice && slice.origDataId || dataId;\n    const refCount = this.dataRefCount.get(key);\n\n    if (refCount > 1) {\n      this.dataRefCount.set(key, refCount - 1);\n    } else {\n      this.dataRefCount.delete(key);\n\n      if (texture != null) {\n        this.numBytesInGPU -= this.computeBytes(texShape, dtype);\n        this.textureManager.releaseTexture(texture, texShape, usage, isPacked);\n      }\n    }\n\n    const texData = this.texData.get(dataId);\n    texData.texture = null;\n    texData.texShape = null;\n    texData.isPacked = false;\n    texData.slice = null;\n  }\n\n  getTexture(dataId) {\n    this.uploadToGPU(dataId);\n    return this.texData.get(dataId).texture;\n  }\n  /**\n   * Returns internal information for the specific data bucket. Used in unit\n   * tests.\n   */\n\n\n  getDataInfo(dataId) {\n    return this.texData.get(dataId);\n  }\n\n  getCPUBackend() {\n    if (!env().getBool('WEBGL_CPU_FORWARD')) {\n      return null;\n    }\n\n    if (this.cpuBackend == null) {\n      this.cpuBackend = engine().findBackend('cpu');\n    }\n\n    return this.cpuBackend;\n  }\n  /*\n  Tests whether all the inputs to an op are small and on the CPU. This heuristic\n  determines when it would be faster to execute a kernel on the CPU. WebGL\n  kernels opt into running this check and forwarding when appropriate.\n  TODO(https://github.com/tensorflow/tfjs/issues/872): Develop a more\n  sustainable strategy for optimizing backend execution of ops.\n   */\n\n\n  shouldExecuteOnCPU(inputs, sizeThreshold = CPU_HANDOFF_SIZE_THRESHOLD) {\n    const cpuBackend = this.getCPUBackend();\n\n    if (!env().getBool('IS_TEST') && !this.warnedAboutCPUBackend && cpuBackend == null) {\n      console.warn('Your application contains ops that are small enough to be ' + 'executed on the CPU backend, however the CPU backend cannot ' + 'be found. Consider importing the CPU backend ' + '(@tensorflow/tfjs-backend-cpu) for better performance.');\n      this.warnedAboutCPUBackend = true;\n    }\n\n    return cpuBackend != null && inputs.every(input => this.texData.get(input.dataId).texture == null && util.sizeFromShape(input.shape) < sizeThreshold);\n  }\n\n  getGPGPUContext() {\n    return this.gpgpu;\n  }\n\n  where(condition) {\n    backend_util.warn('tf.where() in webgl locks the UI thread. ' + 'Call tf.whereAsync() instead');\n    const condVals = condition.dataSync();\n    return whereImpl(condition.shape, condVals);\n  }\n\n  packedUnaryOp(x, op, dtype) {\n    const program = new UnaryOpPackedProgram(x.shape, op);\n    const outInfo = this.compileAndRun(program, [x], dtype);\n    return engine().makeTensorFromDataId(outInfo.dataId, outInfo.shape, outInfo.dtype);\n  } // TODO(msoulanille) remove this once the backend has been modularized\n  // a copy is needed here to break a circular dependency.\n  // Also remove the op from unary_op.\n\n\n  abs(x) {\n    // TODO: handle cases when x is complex.\n    if (this.shouldExecuteOnCPU([x]) && x.dtype !== 'complex64') {\n      const outValues = simpleAbsImplCPU(this.texData.get(x.dataId).values);\n      return this.makeOutput(x.shape, x.dtype, outValues);\n    }\n\n    if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n      return this.packedUnaryOp(x, unary_op.ABS, x.dtype);\n    }\n\n    const program = new UnaryOpProgram(x.shape, unary_op.ABS);\n    const outInfo = this.compileAndRun(program, [x]);\n    return engine().makeTensorFromDataId(outInfo.dataId, outInfo.shape, outInfo.dtype);\n  }\n\n  makeTensorInfo(shape, dtype, values) {\n    let dataId;\n\n    if (dtype === 'string' && values != null && values.length > 0 && util.isString(values[0])) {\n      const encodedValues = values.map(d => util.encodeString(d));\n      dataId = this.write(encodedValues, shape, dtype);\n    } else {\n      dataId = this.write(values, shape, dtype);\n    }\n\n    this.texData.get(dataId).usage = null;\n    return {\n      dataId,\n      shape,\n      dtype\n    };\n  }\n\n  makeOutput(shape, dtype, values) {\n    const {\n      dataId\n    } = this.makeTensorInfo(shape, dtype, values);\n    return engine().makeTensorFromDataId(dataId, shape, dtype, this);\n  }\n\n  unpackTensor(input) {\n    const program = new UnpackProgram(input.shape);\n    return this.runWebGLProgram(program, [input], input.dtype);\n  }\n\n  packTensor(input) {\n    const program = new PackProgram(input.shape);\n    const preventEagerUnpackingOutput = true;\n    return this.runWebGLProgram(program, [input], input.dtype, null\n    /* customSetup */\n    , preventEagerUnpackingOutput);\n  }\n\n  packedReshape(input, afterShape) {\n    const input3DShape = [webgl_util.getBatchDim(input.shape), ...webgl_util.getRowsCols(input.shape)];\n    const input3D = {\n      dtype: input.dtype,\n      shape: input3DShape,\n      dataId: input.dataId\n    };\n    const afterShapeAs3D = [webgl_util.getBatchDim(afterShape), ...webgl_util.getRowsCols(afterShape)];\n    const program = new ReshapePackedProgram(afterShapeAs3D, input3DShape);\n    const preventEagerUnpackingOfOutput = true;\n    const output = this.runWebGLProgram(program, [input3D], input.dtype, null\n    /* customSetup */\n    , preventEagerUnpackingOfOutput);\n    return {\n      dataId: output.dataId,\n      shape: afterShape,\n      dtype: output.dtype\n    };\n  }\n\n  decode(dataId) {\n    const texData = this.texData.get(dataId);\n    const {\n      isPacked,\n      shape,\n      dtype\n    } = texData;\n    const shapeAs3D = webgl_util.getShapeAs3D(shape);\n    let program;\n\n    if (isPacked) {\n      program = new DecodeMatrixPackedProgram(shapeAs3D);\n    } else {\n      program = new DecodeMatrixProgram(shapeAs3D);\n    }\n\n    const preventEagerUnpackingOfOutput = true;\n    const out = this.runWebGLProgram(program, [{\n      shape: shapeAs3D,\n      dtype,\n      dataId\n    }], dtype, null\n    /* customSetup */\n    , preventEagerUnpackingOfOutput);\n    return {\n      dtype,\n      shape,\n      dataId: out.dataId\n    };\n  }\n\n  runWebGLProgram(program, inputs, outputDtype, customSetup, preventEagerUnpackingOfOutput = false) {\n    const output = this.makeTensorInfo(program.outputShape, outputDtype);\n    const outData = this.texData.get(output.dataId);\n\n    if (program.packedOutput) {\n      outData.isPacked = true;\n    }\n\n    if (program.outPackingScheme === tex_util.PackingScheme.DENSE) {\n      const texelShape = tex_util.getDenseTexShape(program.outputShape); // For a densely packed output, we explicitly set texShape\n      // so it doesn't get assigned later according to our typical packing\n      // scheme wherein a single texel can only contain values from adjacent\n      // rows/cols.\n\n      outData.texShape = texelShape.map(d => d * 2);\n    }\n\n    if (program.outTexUsage != null) {\n      outData.usage = program.outTexUsage;\n    }\n\n    if (util.sizeFromShape(output.shape) === 0) {\n      // Short-circuit the computation since the result is empty (has 0 in its\n      // shape).\n      outData.values = util.getTypedArrayFromDType(output.dtype, 0);\n      return output;\n    }\n\n    const dataToDispose = [];\n    const inputsData = inputs.map(input => {\n      if (input.dtype === 'complex64') {\n        throw new Error(`GPGPUProgram does not support complex64 input. For complex64 ` + `dtypes, please separate the program into real and imaginary ` + `parts.`);\n      }\n\n      let texData = this.texData.get(input.dataId);\n\n      if (texData.texture == null) {\n        if (!program.packedInputs && util.sizeFromShape(input.shape) <= env().getNumber('WEBGL_SIZE_UPLOAD_UNIFORM')) {\n          // Upload small tensors that live on the CPU as uniforms, not as\n          // textures. Do this only when the environment supports 32bit floats\n          // due to problems when comparing 16bit floats with 32bit floats.\n          // TODO(https://github.com/tensorflow/tfjs/issues/821): Make it\n          // possible for packed shaders to sample from uniforms.\n          return {\n            shape: input.shape,\n            texData: null,\n            isUniform: true,\n            uniformValues: texData.values\n          };\n        } // This ensures that if a packed program's inputs have not yet been\n        // uploaded to the GPU, they get uploaded as packed right off the bat.\n\n\n        if (program.packedInputs) {\n          texData.isPacked = true;\n          texData.shape = input.shape;\n        }\n      } else if (!!texData.isPacked !== !!program.packedInputs) {\n        input = texData.isPacked ? this.unpackTensor(input) : this.packTensor(input);\n        dataToDispose.push(input);\n        texData = this.texData.get(input.dataId);\n      } else if (texData.isPacked && !webgl_util.isReshapeFree(texData.shape, input.shape)) {\n        // This is a special case where a texture exists for a tensor\n        // but the shapes are incompatible (due to packing constraints) because\n        // the tensor did not have a chance to go through the packed reshape\n        // shader. This only happens when we reshape the *same* tensor to form\n        // *distinct* inputs to an op, e.g. dotting a vector with itself. This\n        // case will disappear once packed uploading is the default.\n        const savedInput = input;\n        const targetShape = input.shape;\n        input.shape = texData.shape;\n        input = this.packedReshape(input, targetShape);\n        dataToDispose.push(input);\n        texData = this.texData.get(input.dataId);\n        savedInput.shape = targetShape;\n      }\n\n      this.uploadToGPU(input.dataId);\n      return {\n        shape: input.shape,\n        texData,\n        isUniform: false\n      };\n    });\n    this.uploadToGPU(output.dataId);\n    const outputData = {\n      shape: output.shape,\n      texData: outData,\n      isUniform: false\n    };\n    const key = gpgpu_math.makeShaderKey(program, inputsData, outputData);\n    const binary = this.getAndSaveBinary(key, () => {\n      return gpgpu_math.compileProgram(this.gpgpu, program, inputsData, outputData);\n    });\n    const shouldTimeProgram = this.activeTimers != null;\n    let query;\n\n    if (shouldTimeProgram) {\n      query = this.startTimer();\n    }\n\n    gpgpu_math.runProgram(this.gpgpu, binary, inputsData, outputData, customSetup);\n    dataToDispose.forEach(info => this.disposeIntermediateTensorInfo(info));\n\n    if (shouldTimeProgram) {\n      query = this.endTimer(query);\n      this.activeTimers.push({\n        name: program.constructor.name,\n        query: this.getQueryTime(query)\n      });\n    }\n\n    const glFlushThreshold = env().get('WEBGL_FLUSH_THRESHOLD'); // Manually GL flush requested\n\n    if (glFlushThreshold > 0) {\n      const time = util.now();\n\n      if (time - this.lastGlFlushTime > glFlushThreshold) {\n        this.gpgpu.gl.flush();\n        this.lastGlFlushTime = time;\n      }\n    }\n\n    if (!env().getBool('WEBGL_LAZILY_UNPACK') && outData.isPacked && preventEagerUnpackingOfOutput === false) {\n      const unpacked = this.unpackTensor(output);\n      this.disposeIntermediateTensorInfo(output);\n      return unpacked;\n    }\n\n    return output;\n  }\n\n  compileAndRun(program, inputs, outputDtype, customSetup, preventEagerUnpackingOfOutput = false) {\n    outputDtype = outputDtype || inputs[0].dtype;\n    const outInfo = this.runWebGLProgram(program, inputs, outputDtype, customSetup, preventEagerUnpackingOfOutput);\n    return outInfo;\n  }\n\n  getAndSaveBinary(key, getBinary) {\n    if (!(key in this.binaryCache)) {\n      this.binaryCache[key] = getBinary();\n    }\n\n    return this.binaryCache[key];\n  }\n\n  getTextureManager() {\n    return this.textureManager;\n  }\n\n  dispose() {\n    if (this.disposed) {\n      return;\n    } // Avoid disposing the compiled webgl programs during unit testing because\n    // it slows down test execution.\n\n\n    if (!env().getBool('IS_TEST')) {\n      const allKeys = Object.keys(this.binaryCache);\n      allKeys.forEach(key => {\n        this.gpgpu.deleteProgram(this.binaryCache[key].webGLProgram);\n        delete this.binaryCache[key];\n      });\n    }\n\n    this.textureManager.dispose();\n\n    if (this.canvas != null && typeof HTMLCanvasElement !== 'undefined' && this.canvas instanceof HTMLCanvasElement) {\n      this.canvas.remove();\n    } else {\n      this.canvas = null;\n    }\n\n    if (this.gpgpuCreatedLocally) {\n      this.gpgpu.program = null;\n      this.gpgpu.dispose();\n    }\n\n    this.disposed = true;\n  }\n\n  floatPrecision() {\n    if (this.floatPrecisionValue == null) {\n      this.floatPrecisionValue = tidy(() => {\n        if (!env().get('WEBGL_RENDER_FLOAT32_ENABLED')) {\n          // Momentarily switching DEBUG flag to false so we don't throw an\n          // error trying to upload a small value.\n          const debugFlag = env().getBool('DEBUG');\n          env().set('DEBUG', false);\n          const underflowCheckValue = this.abs(scalar(1e-8)).dataSync()[0];\n          env().set('DEBUG', debugFlag);\n\n          if (underflowCheckValue > 0) {\n            return 32;\n          }\n        }\n\n        return 16;\n      });\n    }\n\n    return this.floatPrecisionValue;\n  }\n  /** Returns the smallest representable number.  */\n\n\n  epsilon() {\n    return this.floatPrecision() === 32 ? EPSILON_FLOAT32 : EPSILON_FLOAT16;\n  }\n\n  uploadToGPU(dataId) {\n    const texData = this.texData.get(dataId);\n    const {\n      shape,\n      dtype,\n      values,\n      texture,\n      usage,\n      isPacked\n    } = texData;\n\n    if (texture != null) {\n      // Array is already on GPU. No-op.\n      return;\n    }\n\n    const shouldTimeProgram = this.activeTimers != null;\n    let start;\n\n    if (shouldTimeProgram) {\n      start = util.now();\n    }\n\n    let texShape = texData.texShape;\n\n    if (texShape == null) {\n      texShape = webgl_util.getTextureShapeFromLogicalShape(shape, isPacked);\n      texData.texShape = texShape;\n    }\n\n    if (values != null) {\n      const shapeAs3D = webgl_util.getShapeAs3D(shape);\n      let program;\n      let width = texShape[1],\n          height = texShape[0];\n      const isByteArray = values instanceof Uint8Array;\n\n      if (isPacked) {\n        [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(texShape[0], texShape[1]);\n        program = new EncodeMatrixPackedProgram(shapeAs3D, [height, width], isByteArray);\n      } else {\n        program = new EncodeMatrixProgram(shapeAs3D, [height, width], isByteArray);\n      }\n\n      const tempDenseInputHandle = this.makeTensorInfo([height, width], dtype);\n\n      if (isByteArray) {\n        this.texData.get(tempDenseInputHandle.dataId).usage = TextureUsage.PIXELS;\n      } else {\n        this.texData.get(tempDenseInputHandle.dataId).usage = TextureUsage.UPLOAD;\n      }\n\n      this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(tempDenseInputHandle.dataId), width, height, values); // We want the output to remain packed regardless of the value of\n      // WEBGL_PACK.\n\n      const preventEagerUnpacking = true;\n      const encodedOutputTarget = this.runWebGLProgram(program, [tempDenseInputHandle], dtype, null, preventEagerUnpacking); // Have the original texture assume the identity of the encoded output.\n\n      const outputTexData = this.texData.get(encodedOutputTarget.dataId);\n      texData.texture = outputTexData.texture;\n      texData.texShape = outputTexData.texShape;\n      texData.isPacked = outputTexData.isPacked;\n      texData.usage = outputTexData.usage;\n      this.disposeIntermediateTensorInfo(tempDenseInputHandle);\n      this.texData.delete(encodedOutputTarget.dataId); // Once uploaded, don't store the values on cpu.\n\n      texData.values = null;\n\n      if (shouldTimeProgram) {\n        this.uploadWaitMs += util.now() - start;\n      }\n    } else {\n      const newTexture = this.acquireTexture(texShape, usage, dtype, isPacked);\n      texData.texture = newTexture;\n    }\n  }\n\n  convertAndCacheOnCPU(dataId, float32Values) {\n    const texData = this.texData.get(dataId);\n    const {\n      dtype\n    } = texData;\n    this.releaseGPUData(dataId);\n\n    if (float32Values != null) {\n      texData.values = float32ToTypedArray(float32Values, dtype);\n    }\n\n    return texData.values;\n  }\n\n  acquireTexture(texShape, texType, dtype, isPacked) {\n    this.numBytesInGPU += this.computeBytes(texShape, dtype);\n\n    if (!this.warnedAboutMemory && this.numBytesInGPU > this.numMBBeforeWarning * 1024 * 1024) {\n      const mb = (this.numBytesInGPU / 1024 / 1024).toFixed(2);\n      this.warnedAboutMemory = true;\n      console.warn(`High memory usage in GPU: ${mb} MB, ` + `most likely due to a memory leak`);\n    }\n\n    return this.textureManager.acquireTexture(texShape, texType, isPacked);\n  }\n\n  computeBytes(shape, dtype) {\n    return shape[0] * shape[1] * util.bytesPerElement(dtype);\n  }\n\n}\nMathBackendWebGL.nextDataId = 0;\n\nfunction float32ToTypedArray(a, dtype) {\n  if (dtype === 'float32' || dtype === 'complex64') {\n    return a;\n  } else if (dtype === 'int32' || dtype === 'bool') {\n    const result = dtype === 'int32' ? new Int32Array(a.length) : new Uint8Array(a.length);\n\n    for (let i = 0; i < result.length; ++i) {\n      result[i] = Math.round(a[i]);\n    }\n\n    return result;\n  } else {\n    throw new Error(`Unknown dtype ${dtype}`);\n  }\n}","map":{"version":3,"sources":["/Users/ryanliang/Downloads/main_movir_picker/node_modules/@tensorflow/tfjs-backend-webgl/dist/backend_webgl.js"],"names":["backend_util","buffer","DataStorage","engine","env","kernel_impls","KernelBackend","scalar","tidy","util","getWebGLContext","DecodeMatrixProgram","DecodeMatrixPackedProgram","EncodeFloatProgram","EncodeFloatPackedProgram","EncodeMatrixProgram","EncodeMatrixPackedProgram","GPGPUContext","gpgpu_math","simpleAbsImplCPU","PackProgram","ReshapePackedProgram","tex_util","TextureUsage","TextureManager","unary_op","UnaryOpProgram","UnaryOpPackedProgram","UnpackProgram","webgl_util","whereImpl","EPSILON_FLOAT32","EPSILON_FLOAT16","binaryCaches","getBinaryCache","webGLVersion","CPU_HANDOFF_SIZE_THRESHOLD","BEFORE_PAGING_CONSTANT","numMBBeforeWarning","global","screen","height","width","window","devicePixelRatio","MathBackendWebGL","constructor","gpgpu","pendingRead","WeakMap","pendingDisposal","WeakSet","dataRefCount","numBytesInGPU","uploadWaitMs","downloadWaitMs","lastGlFlushTime","warnedAboutMemory","warnedAboutCPUBackend","pendingDeletes","disposed","getBool","Error","gl","getNumber","binaryCache","canvas","gpgpuCreatedLocally","textureManager","texData","nextDataId","numDataIds","cpuBackend","write","values","shape","dtype","checkNumericalProblems","dataId","id","set","usage","UPLOAD","refCount","has","tensorData","get","incRef","decRef","move","disposeIntermediateTensorInfo","tensorInfo","disposeData","readSync","complexTensorInfos","slice","isPacked","program","CLONE","res","runWebGLProgram","data","convertAndCacheOnCPU","shouldTimeProgram","activeTimers","start","now","result","realValues","real","imagValues","imag","mergeRealAndImagArrays","getValuesFromTexture","read","subscribers","Promise","resolve","push","tmpDownloadTarget","decode","tmpData","createBufferFromTexture","texture","getDenseTexShape","createAndWaitForFence","vals","ps","all","size","sizeFromShape","downloadFloat32MatrixFromBuffer","dTypeVals","delete","forEach","removeDataId","bufferSync","t","decodedData","map","d","decodeString","_a","i","length","num","canBeRepresented","tmpTarget","downloadMatrixFromPackedTexture","subarray","shouldUsePackedProgram","outputShape","getShapeAs3D","output","downloadByteEncodedFloatMatrixFromOutputTexture","texShape","timerAvailable","time","f","oldActiveTimers","newActiveTimers","outerMostTime","programTimersStack","flattenedActiveTimerQueries","flatten","query","filter","flattenedActiveTimerNames","name","kernelMs","wallMs","sum","ms","join","error","memory","unreliable","numBytesInGPUAllocated","numBytesAllocated","numBytesInGPUFree","numBytesFree","startTimer","beginQuery","startMs","endMs","endTimer","endQuery","getQueryTime","waitForQueryAndGetTime","timerQuery","force","add","releaseGPUData","key","origDataId","computeBytes","releaseTexture","getTexture","uploadToGPU","getDataInfo","getCPUBackend","findBackend","shouldExecuteOnCPU","inputs","sizeThreshold","console","warn","every","input","getGPGPUContext","where","condition","condVals","dataSync","packedUnaryOp","x","op","outInfo","compileAndRun","makeTensorFromDataId","abs","outValues","makeOutput","ABS","makeTensorInfo","isString","encodedValues","encodeString","unpackTensor","packTensor","preventEagerUnpackingOutput","packedReshape","afterShape","input3DShape","getBatchDim","getRowsCols","input3D","afterShapeAs3D","preventEagerUnpackingOfOutput","shapeAs3D","out","outputDtype","customSetup","outData","packedOutput","outPackingScheme","PackingScheme","DENSE","texelShape","outTexUsage","getTypedArrayFromDType","dataToDispose","inputsData","packedInputs","isUniform","uniformValues","isReshapeFree","savedInput","targetShape","outputData","makeShaderKey","binary","getAndSaveBinary","compileProgram","runProgram","info","glFlushThreshold","flush","unpacked","getBinary","getTextureManager","dispose","allKeys","Object","keys","deleteProgram","webGLProgram","HTMLCanvasElement","remove","floatPrecision","floatPrecisionValue","debugFlag","underflowCheckValue","epsilon","getTextureShapeFromLogicalShape","isByteArray","Uint8Array","getPackedMatrixTextureShapeWidthHeight","tempDenseInputHandle","PIXELS","uploadDenseMatrixToTexture","preventEagerUnpacking","encodedOutputTarget","outputTexData","newTexture","acquireTexture","float32Values","float32ToTypedArray","texType","mb","toFixed","bytesPerElement","a","Int32Array","Math","round"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Import webgl flags.\nimport './flags_webgl';\nimport { backend_util, buffer, DataStorage, engine, env, kernel_impls, KernelBackend, scalar, tidy, util } from '@tensorflow/tfjs-core';\nimport { getWebGLContext } from './canvas_util';\nimport { DecodeMatrixProgram } from './decode_matrix_gpu';\nimport { DecodeMatrixPackedProgram } from './decode_matrix_packed_gpu';\nimport { EncodeFloatProgram } from './encode_float_gpu';\nimport { EncodeFloatPackedProgram } from './encode_float_packed_gpu';\nimport { EncodeMatrixProgram } from './encode_matrix_gpu';\nimport { EncodeMatrixPackedProgram } from './encode_matrix_packed_gpu';\nimport { GPGPUContext } from './gpgpu_context';\nimport * as gpgpu_math from './gpgpu_math';\nimport { simpleAbsImplCPU } from './kernel_utils/shared';\nimport { PackProgram } from './pack_gpu';\nimport { ReshapePackedProgram } from './reshape_packed_gpu';\nimport * as tex_util from './tex_util';\nimport { TextureUsage } from './tex_util';\nimport { TextureManager } from './texture_manager';\nimport * as unary_op from './unaryop_gpu';\nimport { UnaryOpProgram } from './unaryop_gpu';\nimport { UnaryOpPackedProgram } from './unaryop_packed_gpu';\nimport { UnpackProgram } from './unpack_gpu';\nimport * as webgl_util from './webgl_util';\nconst whereImpl = kernel_impls.whereImpl;\nexport const EPSILON_FLOAT32 = 1e-7;\nexport const EPSILON_FLOAT16 = 1e-4;\nconst binaryCaches = {};\nexport function getBinaryCache(webGLVersion) {\n    if (webGLVersion in binaryCaches) {\n        return binaryCaches[webGLVersion];\n    }\n    binaryCaches[webGLVersion] = {};\n    return binaryCaches[webGLVersion];\n}\n// Empirically determined constant used to determine size threshold for handing\n// off execution to the CPU.\nconst CPU_HANDOFF_SIZE_THRESHOLD = 128;\n// Empirically determined constant used to decide the number of MB on GPU\n// before we warn about high memory use. The MB are this constant * screen area\n// * dpi / 1024 / 1024.\nconst BEFORE_PAGING_CONSTANT = 600;\nfunction numMBBeforeWarning() {\n    if (env().global.screen == null) {\n        return 1024; // 1 GB.\n    }\n    return (env().global.screen.height * env().global.screen.width *\n        window.devicePixelRatio) *\n        BEFORE_PAGING_CONSTANT / 1024 / 1024;\n}\nexport class MathBackendWebGL extends KernelBackend {\n    constructor(gpgpu) {\n        super();\n        // Maps data ids that have a pending read operation, to list of subscribers.\n        this.pendingRead = new WeakMap();\n        // List of data ids that are scheduled for disposal, but are waiting on a\n        // pending read operation.\n        this.pendingDisposal = new WeakSet();\n        // Used to count the number of 'shallow' sliced tensors that point to the\n        // same data id.\n        this.dataRefCount = new WeakMap();\n        this.numBytesInGPU = 0;\n        // Accumulated time spent (including blocking) in uploading data to webgl.\n        this.uploadWaitMs = 0;\n        // Accumulated time spent (including blocking in downloading data from webgl.\n        this.downloadWaitMs = 0;\n        // record the last manual GL Flush time.\n        this.lastGlFlushTime = 0;\n        this.warnedAboutMemory = false;\n        this.warnedAboutCPUBackend = false;\n        this.pendingDeletes = 0;\n        this.disposed = false;\n        if (!env().getBool('HAS_WEBGL')) {\n            throw new Error('WebGL is not supported on this device');\n        }\n        if (gpgpu == null) {\n            const gl = getWebGLContext(env().getNumber('WEBGL_VERSION'));\n            this.binaryCache = getBinaryCache(env().getNumber('WEBGL_VERSION'));\n            this.gpgpu = new GPGPUContext(gl);\n            this.canvas = gl.canvas;\n            this.gpgpuCreatedLocally = true;\n        }\n        else {\n            this.gpgpu = gpgpu;\n            this.binaryCache = {};\n            this.gpgpuCreatedLocally = false;\n            this.canvas = gpgpu.gl.canvas;\n        }\n        this.textureManager = new TextureManager(this.gpgpu);\n        this.numMBBeforeWarning = numMBBeforeWarning();\n        this.texData = new DataStorage(this, engine());\n    }\n    nextDataId() {\n        return MathBackendWebGL.nextDataId++;\n    }\n    numDataIds() {\n        return this.texData.numDataIds() +\n            (this.cpuBackend ? this.cpuBackend.numDataIds() : 0) -\n            this.pendingDeletes;\n    }\n    write(values, shape, dtype) {\n        if (env().getBool('WEBGL_CHECK_NUMERICAL_PROBLEMS') ||\n            env().getBool('DEBUG')) {\n            this.checkNumericalProblems(values);\n        }\n        if (dtype === 'complex64' && values != null) {\n            throw new Error(`Cannot write to a complex64 dtype. ` +\n                `Please use tf.complex(real, imag).`);\n        }\n        const dataId = { id: this.nextDataId() };\n        this.texData.set(dataId, { shape, dtype, values, usage: TextureUsage.UPLOAD, refCount: 1 });\n        return dataId;\n    }\n    /** Return refCount of a `TensorData`. */\n    refCount(dataId) {\n        if (this.texData.has(dataId)) {\n            const tensorData = this.texData.get(dataId);\n            return tensorData.refCount;\n        }\n        return 0;\n    }\n    /** Increase refCount of a `TextureData`. */\n    incRef(dataId) {\n        const texData = this.texData.get(dataId);\n        texData.refCount++;\n    }\n    /** Decrease refCount of a `TextureData`. */\n    decRef(dataId) {\n        if (this.texData.has(dataId)) {\n            const texData = this.texData.get(dataId);\n            texData.refCount--;\n        }\n    }\n    move(dataId, values, shape, dtype, refCount) {\n        if (env().getBool('DEBUG')) {\n            this.checkNumericalProblems(values);\n        }\n        if (dtype === 'complex64') {\n            throw new Error(`Cannot write to a complex64 dtype. ` +\n                `Please use tf.complex(real, imag).`);\n        }\n        this.texData.set(dataId, { shape, dtype, values, usage: TextureUsage.UPLOAD, refCount });\n    }\n    disposeIntermediateTensorInfo(tensorInfo) {\n        this.disposeData(tensorInfo.dataId);\n    }\n    readSync(dataId) {\n        const texData = this.texData.get(dataId);\n        const { values, dtype, complexTensorInfos, slice, shape, isPacked } = texData;\n        // The presence of `slice` indicates this tensor is a shallow slice of a\n        // different tensor, and is using that original tensor's texture. Run\n        // `clone` in order to copy that texture and read from it.\n        if (slice != null) {\n            let program;\n            if (isPacked) {\n                program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n            }\n            else {\n                program = new UnaryOpProgram(shape, unary_op.CLONE);\n            }\n            const res = this.runWebGLProgram(program, [{ dataId, shape, dtype }], dtype);\n            const data = this.readSync(res.dataId);\n            this.disposeIntermediateTensorInfo(res);\n            return data;\n        }\n        if (values != null) {\n            return this.convertAndCacheOnCPU(dataId);\n        }\n        if (dtype === 'string') {\n            return values;\n        }\n        const shouldTimeProgram = this.activeTimers != null;\n        let start;\n        if (shouldTimeProgram) {\n            start = util.now();\n        }\n        let result;\n        if (dtype === 'complex64') {\n            const realValues = this.readSync(complexTensorInfos.real.dataId);\n            const imagValues = this.readSync(complexTensorInfos.imag.dataId);\n            result = backend_util.mergeRealAndImagArrays(realValues, imagValues);\n        }\n        else {\n            result = this.getValuesFromTexture(dataId);\n        }\n        if (shouldTimeProgram) {\n            this.downloadWaitMs += util.now() - start;\n        }\n        return this.convertAndCacheOnCPU(dataId, result);\n    }\n    async read(dataId) {\n        if (this.pendingRead.has(dataId)) {\n            const subscribers = this.pendingRead.get(dataId);\n            return new Promise(resolve => subscribers.push(resolve));\n        }\n        const texData = this.texData.get(dataId);\n        const { values, shape, slice, dtype, complexTensorInfos, isPacked } = texData;\n        // The presence of `slice` indicates this tensor is a shallow slice of a\n        // different tensor, and is using that original tensor's texture. Run\n        // `clone` in order to copy that texture and read from it.\n        if (slice != null) {\n            let program;\n            if (isPacked) {\n                program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n            }\n            else {\n                program = new UnaryOpProgram(shape, unary_op.CLONE);\n            }\n            const res = this.runWebGLProgram(program, [{ dataId, shape, dtype }], dtype);\n            const data = this.read(res.dataId);\n            this.disposeIntermediateTensorInfo(res);\n            return data;\n        }\n        if (values != null) {\n            return this.convertAndCacheOnCPU(dataId);\n        }\n        if (!env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED') &&\n            env().getNumber('WEBGL_VERSION') === 2) {\n            throw new Error(`tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and ` +\n                `WEBGL_VERSION=2 not yet supported.`);\n        }\n        let buffer = null;\n        let tmpDownloadTarget;\n        if (dtype !== 'complex64' && env().get('WEBGL_BUFFER_SUPPORTED')) {\n            // Possibly copy the texture into a buffer before inserting a fence.\n            tmpDownloadTarget = this.decode(dataId);\n            const tmpData = this.texData.get(tmpDownloadTarget.dataId);\n            buffer = this.gpgpu.createBufferFromTexture(tmpData.texture, ...tex_util.getDenseTexShape(shape));\n        }\n        this.pendingRead.set(dataId, []);\n        if (dtype !== 'complex64') {\n            // Create a fence and wait for it to resolve.\n            await this.gpgpu.createAndWaitForFence();\n        }\n        // Download the values from the GPU.\n        let vals;\n        if (dtype === 'complex64') {\n            const ps = await Promise.all([\n                this.read(complexTensorInfos.real.dataId),\n                this.read(complexTensorInfos.imag.dataId)\n            ]);\n            const realValues = ps[0];\n            const imagValues = ps[1];\n            vals = backend_util.mergeRealAndImagArrays(realValues, imagValues);\n        }\n        else if (buffer == null) {\n            vals = this.getValuesFromTexture(dataId);\n        }\n        else {\n            const size = util.sizeFromShape(shape);\n            vals = this.gpgpu.downloadFloat32MatrixFromBuffer(buffer, size);\n        }\n        if (tmpDownloadTarget != null) {\n            this.disposeIntermediateTensorInfo(tmpDownloadTarget);\n        }\n        const dTypeVals = this.convertAndCacheOnCPU(dataId, vals);\n        const subscribers = this.pendingRead.get(dataId);\n        this.pendingRead.delete(dataId);\n        // Notify all pending reads.\n        subscribers.forEach(resolve => resolve(dTypeVals));\n        if (this.pendingDisposal.has(dataId)) {\n            this.pendingDisposal.delete(dataId);\n            if (this.disposeData(dataId)) {\n                engine().removeDataId(dataId, this);\n            }\n            this.pendingDeletes--;\n        }\n        return dTypeVals;\n    }\n    bufferSync(t) {\n        const data = this.readSync(t.dataId);\n        let decodedData = data;\n        if (t.dtype === 'string') {\n            try {\n                // Decode the bytes into string.\n                decodedData = data.map(d => util.decodeString(d));\n            }\n            catch (_a) {\n                throw new Error('Failed to decode encoded string bytes into utf-8');\n            }\n        }\n        return buffer(t.shape, t.dtype, decodedData);\n    }\n    checkNumericalProblems(values) {\n        if (values == null) {\n            return;\n        }\n        for (let i = 0; i < values.length; i++) {\n            const num = values[i];\n            if (!webgl_util.canBeRepresented(num)) {\n                if (env().getBool('WEBGL_RENDER_FLOAT32_CAPABLE')) {\n                    throw Error(`The value ${num} cannot be represented with your ` +\n                        `current settings. Consider enabling float32 rendering: ` +\n                        `'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);\n                }\n                throw Error(`The value ${num} cannot be represented on this device.`);\n            }\n        }\n    }\n    getValuesFromTexture(dataId) {\n        const { shape, dtype, isPacked } = this.texData.get(dataId);\n        const size = util.sizeFromShape(shape);\n        if (env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED')) {\n            const tmpTarget = this.decode(dataId);\n            const tmpData = this.texData.get(tmpTarget.dataId);\n            const vals = this.gpgpu\n                .downloadMatrixFromPackedTexture(tmpData.texture, ...tex_util.getDenseTexShape(shape))\n                .subarray(0, size);\n            this.disposeIntermediateTensorInfo(tmpTarget);\n            return vals;\n        }\n        const shouldUsePackedProgram = env().getBool('WEBGL_PACK') && isPacked === true;\n        const outputShape = shouldUsePackedProgram ? webgl_util.getShapeAs3D(shape) : shape;\n        const program = shouldUsePackedProgram ?\n            new EncodeFloatPackedProgram(outputShape) :\n            new EncodeFloatProgram(outputShape);\n        const output = this.runWebGLProgram(program, [{ shape: outputShape, dtype, dataId }], 'float32');\n        const tmpData = this.texData.get(output.dataId);\n        const vals = this.gpgpu\n            .downloadByteEncodedFloatMatrixFromOutputTexture(tmpData.texture, tmpData.texShape[0], tmpData.texShape[1])\n            .subarray(0, size);\n        this.disposeIntermediateTensorInfo(output);\n        return vals;\n    }\n    timerAvailable() {\n        return env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0;\n    }\n    async time(f) {\n        const oldActiveTimers = this.activeTimers;\n        const newActiveTimers = [];\n        let outerMostTime = false;\n        if (this.programTimersStack == null) {\n            this.programTimersStack = newActiveTimers;\n            outerMostTime = true;\n        }\n        else {\n            this.activeTimers.push(newActiveTimers);\n        }\n        this.activeTimers = newActiveTimers;\n        f();\n        // needing to split these up because util.flatten only accepts certain types\n        const flattenedActiveTimerQueries = util.flatten(this.activeTimers.map((d) => d.query))\n            .filter(d => d != null);\n        const flattenedActiveTimerNames = util.flatten(this.activeTimers.map((d) => d.name))\n            .filter(d => d != null);\n        this.activeTimers = oldActiveTimers;\n        if (outerMostTime) {\n            this.programTimersStack = null;\n        }\n        const res = {\n            uploadWaitMs: this.uploadWaitMs,\n            downloadWaitMs: this.downloadWaitMs,\n            kernelMs: null,\n            wallMs: null // will be filled by the engine\n        };\n        if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n            const kernelMs = await Promise.all(flattenedActiveTimerQueries);\n            res['kernelMs'] = util.sum(kernelMs);\n            res['getExtraProfileInfo'] = () => kernelMs.map((d, i) => ({ name: flattenedActiveTimerNames[i], ms: d }))\n                .map(d => `${d.name}: ${d.ms}`)\n                .join(', ');\n        }\n        else {\n            res['kernelMs'] = {\n                error: 'WebGL query timers are not supported in this environment.'\n            };\n        }\n        this.uploadWaitMs = 0;\n        this.downloadWaitMs = 0;\n        return res;\n    }\n    memory() {\n        return {\n            unreliable: false,\n            numBytesInGPU: this.numBytesInGPU,\n            numBytesInGPUAllocated: this.textureManager.numBytesAllocated,\n            numBytesInGPUFree: this.textureManager.numBytesFree\n        };\n    }\n    startTimer() {\n        if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n            return this.gpgpu.beginQuery();\n        }\n        return { startMs: util.now(), endMs: null };\n    }\n    endTimer(query) {\n        if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n            this.gpgpu.endQuery();\n            return query;\n        }\n        query.endMs = util.now();\n        return query;\n    }\n    async getQueryTime(query) {\n        if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n            return this.gpgpu.waitForQueryAndGetTime(query);\n        }\n        const timerQuery = query;\n        return timerQuery.endMs - timerQuery.startMs;\n    }\n    /**\n     * Decrease the RefCount on the dataId and dispose the memory if the dataId\n     * has 0 refCount. If there are pending read on the data, the disposal would\n     * added to the pending delete queue. Return true if the dataId is removed\n     * from backend or the backend does not contain the dataId, false if the\n     * dataId is not removed. Memory may or may not be released even when dataId\n     * is removed, which also depends on dataRefCount, see `releaseGPU`.\n     * @param dataId\n     * @oaram force Optional, remove the data regardless of refCount\n     */\n    disposeData(dataId, force = false) {\n        if (this.pendingDisposal.has(dataId)) {\n            return false;\n        }\n        // No-op if already disposed.\n        if (!this.texData.has(dataId)) {\n            return true;\n        }\n        // if force flag is set, change refCount to 0, this would ensure disposal\n        // when added to the pendingDisposal queue. Memory may or may not be\n        // released, which also depends on dataRefCount, see `releaseGPU`.\n        if (force) {\n            this.texData.get(dataId).refCount = 0;\n        }\n        else {\n            this.texData.get(dataId).refCount--;\n        }\n        if (!force && this.texData.get(dataId).refCount > 0) {\n            return false;\n        }\n        if (this.pendingRead.has(dataId)) {\n            this.pendingDisposal.add(dataId);\n            this.pendingDeletes++;\n            return false;\n        }\n        this.releaseGPUData(dataId);\n        const { complexTensorInfos } = this.texData.get(dataId);\n        if (complexTensorInfos != null) {\n            this.disposeData(complexTensorInfos.real.dataId, force);\n            this.disposeData(complexTensorInfos.imag.dataId, force);\n        }\n        this.texData.delete(dataId);\n        return true;\n    }\n    releaseGPUData(dataId) {\n        const { texture, dtype, texShape, usage, isPacked, slice } = this.texData.get(dataId);\n        const key = slice && slice.origDataId || dataId;\n        const refCount = this.dataRefCount.get(key);\n        if (refCount > 1) {\n            this.dataRefCount.set(key, refCount - 1);\n        }\n        else {\n            this.dataRefCount.delete(key);\n            if (texture != null) {\n                this.numBytesInGPU -= this.computeBytes(texShape, dtype);\n                this.textureManager.releaseTexture(texture, texShape, usage, isPacked);\n            }\n        }\n        const texData = this.texData.get(dataId);\n        texData.texture = null;\n        texData.texShape = null;\n        texData.isPacked = false;\n        texData.slice = null;\n    }\n    getTexture(dataId) {\n        this.uploadToGPU(dataId);\n        return this.texData.get(dataId).texture;\n    }\n    /**\n     * Returns internal information for the specific data bucket. Used in unit\n     * tests.\n     */\n    getDataInfo(dataId) {\n        return this.texData.get(dataId);\n    }\n    getCPUBackend() {\n        if (!env().getBool('WEBGL_CPU_FORWARD')) {\n            return null;\n        }\n        if (this.cpuBackend == null) {\n            this.cpuBackend = engine().findBackend('cpu');\n        }\n        return this.cpuBackend;\n    }\n    /*\n    Tests whether all the inputs to an op are small and on the CPU. This heuristic\n    determines when it would be faster to execute a kernel on the CPU. WebGL\n    kernels opt into running this check and forwarding when appropriate.\n    TODO(https://github.com/tensorflow/tfjs/issues/872): Develop a more\n    sustainable strategy for optimizing backend execution of ops.\n     */\n    shouldExecuteOnCPU(inputs, sizeThreshold = CPU_HANDOFF_SIZE_THRESHOLD) {\n        const cpuBackend = this.getCPUBackend();\n        if (!env().getBool('IS_TEST') && !this.warnedAboutCPUBackend &&\n            cpuBackend == null) {\n            console.warn('Your application contains ops that are small enough to be ' +\n                'executed on the CPU backend, however the CPU backend cannot ' +\n                'be found. Consider importing the CPU backend ' +\n                '(@tensorflow/tfjs-backend-cpu) for better performance.');\n            this.warnedAboutCPUBackend = true;\n        }\n        return cpuBackend != null &&\n            inputs.every(input => this.texData.get(input.dataId).texture == null &&\n                util.sizeFromShape(input.shape) < sizeThreshold);\n    }\n    getGPGPUContext() {\n        return this.gpgpu;\n    }\n    where(condition) {\n        backend_util.warn('tf.where() in webgl locks the UI thread. ' +\n            'Call tf.whereAsync() instead');\n        const condVals = condition.dataSync();\n        return whereImpl(condition.shape, condVals);\n    }\n    packedUnaryOp(x, op, dtype) {\n        const program = new UnaryOpPackedProgram(x.shape, op);\n        const outInfo = this.compileAndRun(program, [x], dtype);\n        return engine().makeTensorFromDataId(outInfo.dataId, outInfo.shape, outInfo.dtype);\n    }\n    // TODO(msoulanille) remove this once the backend has been modularized\n    // a copy is needed here to break a circular dependency.\n    // Also remove the op from unary_op.\n    abs(x) {\n        // TODO: handle cases when x is complex.\n        if (this.shouldExecuteOnCPU([x]) && x.dtype !== 'complex64') {\n            const outValues = simpleAbsImplCPU(this.texData.get(x.dataId).values);\n            return this.makeOutput(x.shape, x.dtype, outValues);\n        }\n        if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n            return this.packedUnaryOp(x, unary_op.ABS, x.dtype);\n        }\n        const program = new UnaryOpProgram(x.shape, unary_op.ABS);\n        const outInfo = this.compileAndRun(program, [x]);\n        return engine().makeTensorFromDataId(outInfo.dataId, outInfo.shape, outInfo.dtype);\n    }\n    makeTensorInfo(shape, dtype, values) {\n        let dataId;\n        if (dtype === 'string' && values != null && values.length > 0 &&\n            util.isString(values[0])) {\n            const encodedValues = values.map(d => util.encodeString(d));\n            dataId = this.write(encodedValues, shape, dtype);\n        }\n        else {\n            dataId = this.write(values, shape, dtype);\n        }\n        this.texData.get(dataId).usage = null;\n        return { dataId, shape, dtype };\n    }\n    makeOutput(shape, dtype, values) {\n        const { dataId } = this.makeTensorInfo(shape, dtype, values);\n        return engine().makeTensorFromDataId(dataId, shape, dtype, this);\n    }\n    unpackTensor(input) {\n        const program = new UnpackProgram(input.shape);\n        return this.runWebGLProgram(program, [input], input.dtype);\n    }\n    packTensor(input) {\n        const program = new PackProgram(input.shape);\n        const preventEagerUnpackingOutput = true;\n        return this.runWebGLProgram(program, [input], input.dtype, null /* customSetup */, preventEagerUnpackingOutput);\n    }\n    packedReshape(input, afterShape) {\n        const input3DShape = [\n            webgl_util.getBatchDim(input.shape),\n            ...webgl_util.getRowsCols(input.shape)\n        ];\n        const input3D = {\n            dtype: input.dtype,\n            shape: input3DShape,\n            dataId: input.dataId\n        };\n        const afterShapeAs3D = [\n            webgl_util.getBatchDim(afterShape), ...webgl_util.getRowsCols(afterShape)\n        ];\n        const program = new ReshapePackedProgram(afterShapeAs3D, input3DShape);\n        const preventEagerUnpackingOfOutput = true;\n        const output = this.runWebGLProgram(program, [input3D], input.dtype, null /* customSetup */, preventEagerUnpackingOfOutput);\n        return { dataId: output.dataId, shape: afterShape, dtype: output.dtype };\n    }\n    decode(dataId) {\n        const texData = this.texData.get(dataId);\n        const { isPacked, shape, dtype } = texData;\n        const shapeAs3D = webgl_util.getShapeAs3D(shape);\n        let program;\n        if (isPacked) {\n            program = new DecodeMatrixPackedProgram(shapeAs3D);\n        }\n        else {\n            program = new DecodeMatrixProgram(shapeAs3D);\n        }\n        const preventEagerUnpackingOfOutput = true;\n        const out = this.runWebGLProgram(program, [{ shape: shapeAs3D, dtype, dataId }], dtype, null /* customSetup */, preventEagerUnpackingOfOutput);\n        return { dtype, shape, dataId: out.dataId };\n    }\n    runWebGLProgram(program, inputs, outputDtype, customSetup, preventEagerUnpackingOfOutput = false) {\n        const output = this.makeTensorInfo(program.outputShape, outputDtype);\n        const outData = this.texData.get(output.dataId);\n        if (program.packedOutput) {\n            outData.isPacked = true;\n        }\n        if (program.outPackingScheme === tex_util.PackingScheme.DENSE) {\n            const texelShape = tex_util.getDenseTexShape(program.outputShape);\n            // For a densely packed output, we explicitly set texShape\n            // so it doesn't get assigned later according to our typical packing\n            // scheme wherein a single texel can only contain values from adjacent\n            // rows/cols.\n            outData.texShape = texelShape.map(d => d * 2);\n        }\n        if (program.outTexUsage != null) {\n            outData.usage = program.outTexUsage;\n        }\n        if (util.sizeFromShape(output.shape) === 0) {\n            // Short-circuit the computation since the result is empty (has 0 in its\n            // shape).\n            outData.values =\n                util.getTypedArrayFromDType(output.dtype, 0);\n            return output;\n        }\n        const dataToDispose = [];\n        const inputsData = inputs.map(input => {\n            if (input.dtype === 'complex64') {\n                throw new Error(`GPGPUProgram does not support complex64 input. For complex64 ` +\n                    `dtypes, please separate the program into real and imaginary ` +\n                    `parts.`);\n            }\n            let texData = this.texData.get(input.dataId);\n            if (texData.texture == null) {\n                if (!program.packedInputs &&\n                    util.sizeFromShape(input.shape) <=\n                        env().getNumber('WEBGL_SIZE_UPLOAD_UNIFORM')) {\n                    // Upload small tensors that live on the CPU as uniforms, not as\n                    // textures. Do this only when the environment supports 32bit floats\n                    // due to problems when comparing 16bit floats with 32bit floats.\n                    // TODO(https://github.com/tensorflow/tfjs/issues/821): Make it\n                    // possible for packed shaders to sample from uniforms.\n                    return {\n                        shape: input.shape,\n                        texData: null,\n                        isUniform: true,\n                        uniformValues: texData.values\n                    };\n                }\n                // This ensures that if a packed program's inputs have not yet been\n                // uploaded to the GPU, they get uploaded as packed right off the bat.\n                if (program.packedInputs) {\n                    texData.isPacked = true;\n                    texData.shape = input.shape;\n                }\n            }\n            else if (!!texData.isPacked !== !!program.packedInputs) {\n                input = texData.isPacked ? this.unpackTensor(input) :\n                    this.packTensor(input);\n                dataToDispose.push(input);\n                texData = this.texData.get(input.dataId);\n            }\n            else if (texData.isPacked &&\n                !webgl_util.isReshapeFree(texData.shape, input.shape)) {\n                // This is a special case where a texture exists for a tensor\n                // but the shapes are incompatible (due to packing constraints) because\n                // the tensor did not have a chance to go through the packed reshape\n                // shader. This only happens when we reshape the *same* tensor to form\n                // *distinct* inputs to an op, e.g. dotting a vector with itself. This\n                // case will disappear once packed uploading is the default.\n                const savedInput = input;\n                const targetShape = input.shape;\n                input.shape = texData.shape;\n                input = this.packedReshape(input, targetShape);\n                dataToDispose.push(input);\n                texData = this.texData.get(input.dataId);\n                savedInput.shape = targetShape;\n            }\n            this.uploadToGPU(input.dataId);\n            return { shape: input.shape, texData, isUniform: false };\n        });\n        this.uploadToGPU(output.dataId);\n        const outputData = { shape: output.shape, texData: outData, isUniform: false };\n        const key = gpgpu_math.makeShaderKey(program, inputsData, outputData);\n        const binary = this.getAndSaveBinary(key, () => {\n            return gpgpu_math.compileProgram(this.gpgpu, program, inputsData, outputData);\n        });\n        const shouldTimeProgram = this.activeTimers != null;\n        let query;\n        if (shouldTimeProgram) {\n            query = this.startTimer();\n        }\n        gpgpu_math.runProgram(this.gpgpu, binary, inputsData, outputData, customSetup);\n        dataToDispose.forEach(info => this.disposeIntermediateTensorInfo(info));\n        if (shouldTimeProgram) {\n            query = this.endTimer(query);\n            this.activeTimers.push({ name: program.constructor.name, query: this.getQueryTime(query) });\n        }\n        const glFlushThreshold = env().get('WEBGL_FLUSH_THRESHOLD');\n        // Manually GL flush requested\n        if (glFlushThreshold > 0) {\n            const time = util.now();\n            if ((time - this.lastGlFlushTime) > glFlushThreshold) {\n                this.gpgpu.gl.flush();\n                this.lastGlFlushTime = time;\n            }\n        }\n        if (!env().getBool('WEBGL_LAZILY_UNPACK') && outData.isPacked &&\n            preventEagerUnpackingOfOutput === false) {\n            const unpacked = this.unpackTensor(output);\n            this.disposeIntermediateTensorInfo(output);\n            return unpacked;\n        }\n        return output;\n    }\n    compileAndRun(program, inputs, outputDtype, customSetup, preventEagerUnpackingOfOutput = false) {\n        outputDtype = outputDtype || inputs[0].dtype;\n        const outInfo = this.runWebGLProgram(program, inputs, outputDtype, customSetup, preventEagerUnpackingOfOutput);\n        return outInfo;\n    }\n    getAndSaveBinary(key, getBinary) {\n        if (!(key in this.binaryCache)) {\n            this.binaryCache[key] = getBinary();\n        }\n        return this.binaryCache[key];\n    }\n    getTextureManager() {\n        return this.textureManager;\n    }\n    dispose() {\n        if (this.disposed) {\n            return;\n        }\n        // Avoid disposing the compiled webgl programs during unit testing because\n        // it slows down test execution.\n        if (!env().getBool('IS_TEST')) {\n            const allKeys = Object.keys(this.binaryCache);\n            allKeys.forEach(key => {\n                this.gpgpu.deleteProgram(this.binaryCache[key].webGLProgram);\n                delete this.binaryCache[key];\n            });\n        }\n        this.textureManager.dispose();\n        if (this.canvas != null &&\n            (typeof (HTMLCanvasElement) !== 'undefined' &&\n                this.canvas instanceof HTMLCanvasElement)) {\n            this.canvas.remove();\n        }\n        else {\n            this.canvas = null;\n        }\n        if (this.gpgpuCreatedLocally) {\n            this.gpgpu.program = null;\n            this.gpgpu.dispose();\n        }\n        this.disposed = true;\n    }\n    floatPrecision() {\n        if (this.floatPrecisionValue == null) {\n            this.floatPrecisionValue = tidy(() => {\n                if (!env().get('WEBGL_RENDER_FLOAT32_ENABLED')) {\n                    // Momentarily switching DEBUG flag to false so we don't throw an\n                    // error trying to upload a small value.\n                    const debugFlag = env().getBool('DEBUG');\n                    env().set('DEBUG', false);\n                    const underflowCheckValue = this.abs(scalar(1e-8)).dataSync()[0];\n                    env().set('DEBUG', debugFlag);\n                    if (underflowCheckValue > 0) {\n                        return 32;\n                    }\n                }\n                return 16;\n            });\n        }\n        return this.floatPrecisionValue;\n    }\n    /** Returns the smallest representable number.  */\n    epsilon() {\n        return this.floatPrecision() === 32 ? EPSILON_FLOAT32 : EPSILON_FLOAT16;\n    }\n    uploadToGPU(dataId) {\n        const texData = this.texData.get(dataId);\n        const { shape, dtype, values, texture, usage, isPacked } = texData;\n        if (texture != null) {\n            // Array is already on GPU. No-op.\n            return;\n        }\n        const shouldTimeProgram = this.activeTimers != null;\n        let start;\n        if (shouldTimeProgram) {\n            start = util.now();\n        }\n        let texShape = texData.texShape;\n        if (texShape == null) {\n            texShape = webgl_util.getTextureShapeFromLogicalShape(shape, isPacked);\n            texData.texShape = texShape;\n        }\n        if (values != null) {\n            const shapeAs3D = webgl_util.getShapeAs3D(shape);\n            let program;\n            let width = texShape[1], height = texShape[0];\n            const isByteArray = values instanceof Uint8Array;\n            if (isPacked) {\n                [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(texShape[0], texShape[1]);\n                program = new EncodeMatrixPackedProgram(shapeAs3D, [height, width], isByteArray);\n            }\n            else {\n                program =\n                    new EncodeMatrixProgram(shapeAs3D, [height, width], isByteArray);\n            }\n            const tempDenseInputHandle = this.makeTensorInfo([height, width], dtype);\n            if (isByteArray) {\n                this.texData.get(tempDenseInputHandle.dataId).usage =\n                    TextureUsage.PIXELS;\n            }\n            else {\n                this.texData.get(tempDenseInputHandle.dataId).usage =\n                    TextureUsage.UPLOAD;\n            }\n            this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(tempDenseInputHandle.dataId), width, height, values);\n            // We want the output to remain packed regardless of the value of\n            // WEBGL_PACK.\n            const preventEagerUnpacking = true;\n            const encodedOutputTarget = this.runWebGLProgram(program, [tempDenseInputHandle], dtype, null, preventEagerUnpacking);\n            // Have the original texture assume the identity of the encoded output.\n            const outputTexData = this.texData.get(encodedOutputTarget.dataId);\n            texData.texture = outputTexData.texture;\n            texData.texShape = outputTexData.texShape;\n            texData.isPacked = outputTexData.isPacked;\n            texData.usage = outputTexData.usage;\n            this.disposeIntermediateTensorInfo(tempDenseInputHandle);\n            this.texData.delete(encodedOutputTarget.dataId);\n            // Once uploaded, don't store the values on cpu.\n            texData.values = null;\n            if (shouldTimeProgram) {\n                this.uploadWaitMs += util.now() - start;\n            }\n        }\n        else {\n            const newTexture = this.acquireTexture(texShape, usage, dtype, isPacked);\n            texData.texture = newTexture;\n        }\n    }\n    convertAndCacheOnCPU(dataId, float32Values) {\n        const texData = this.texData.get(dataId);\n        const { dtype } = texData;\n        this.releaseGPUData(dataId);\n        if (float32Values != null) {\n            texData.values = float32ToTypedArray(float32Values, dtype);\n        }\n        return texData.values;\n    }\n    acquireTexture(texShape, texType, dtype, isPacked) {\n        this.numBytesInGPU += this.computeBytes(texShape, dtype);\n        if (!this.warnedAboutMemory &&\n            this.numBytesInGPU > this.numMBBeforeWarning * 1024 * 1024) {\n            const mb = (this.numBytesInGPU / 1024 / 1024).toFixed(2);\n            this.warnedAboutMemory = true;\n            console.warn(`High memory usage in GPU: ${mb} MB, ` +\n                `most likely due to a memory leak`);\n        }\n        return this.textureManager.acquireTexture(texShape, texType, isPacked);\n    }\n    computeBytes(shape, dtype) {\n        return shape[0] * shape[1] * util.bytesPerElement(dtype);\n    }\n}\nMathBackendWebGL.nextDataId = 0;\nfunction float32ToTypedArray(a, dtype) {\n    if (dtype === 'float32' || dtype === 'complex64') {\n        return a;\n    }\n    else if (dtype === 'int32' || dtype === 'bool') {\n        const result = (dtype === 'int32') ? new Int32Array(a.length) :\n            new Uint8Array(a.length);\n        for (let i = 0; i < result.length; ++i) {\n            result[i] = Math.round(a[i]);\n        }\n        return result;\n    }\n    else {\n        throw new Error(`Unknown dtype ${dtype}`);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}
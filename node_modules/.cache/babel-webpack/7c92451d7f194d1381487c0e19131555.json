{"ast":null,"code":"import _asyncToGenerator from \"/Users/ryanliang/Downloads/main_movir_picker/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/**\n * @license\n * Copyright 2019 Victor Dibia.\n * Handtrack.js - A library for prototyping realtime hand tracking using neural networks.\n * Licensed under the MIT License (the \"License\");\n * Code snippets from the tensorflow coco-ssd example are reused here - https://github.com/tensorflow/tfjs-models/tree/master/coco-ssd\n * =============================================================================\n */\nimport * as tf from \"@tensorflow/tfjs\";\nimport { loadGraphModel } from \"@tensorflow/tfjs-converter\";\nexport const version = \"0.1.5\";\nconst basePath = \"https://cdn.jsdelivr.net/npm/handtrackjs@latest/models/webmodel/\"; // const basePath = \"webmodel/\";\n\nconst labelMap = {\n  1: \"open\",\n  2: \"closed\",\n  3: \"pinch\",\n  4: \"point\",\n  5: \"face\",\n  6: \"pointtip\",\n  7: \"pinchtip\"\n};\nconst defaultRenderThresholds = {\n  open: 0.6,\n  closed: 0.6,\n  pinch: 0.6,\n  point: 0.6,\n  face: 0.8,\n  pointtip: 0.6,\n  pinchtip: 0.6\n};\nconst defaultParams = {\n  flipHorizontal: false,\n  outputStride: 16,\n  imageScaleFactor: 1,\n  maxNumBoxes: 20,\n  iouThreshold: 0.2,\n  scoreThreshold: 0.6,\n  modelType: \"ssd320fpnlite\",\n  // centernet512fpn,\n  modelSize: \"small\",\n  bboxLineWidth: \"2\",\n  fontSize: 17,\n  basePath: basePath,\n  labelMap: labelMap,\n  renderThresholds: null\n};\nconst modelSizeMap = {\n  large: \"base\",\n  medium: \"fp16\",\n  small: \"int8\"\n};\nexport const colorMap = {\n  open: \"#374151\",\n  closed: \"#B91C1C\",\n  pinch: \"#F59E0B\",\n  point: \"#10B981\",\n  face: \"#3B82F6\",\n  pointtip: \"#6366F1\",\n  pinchtip: \"#EC4899\"\n}; // const modelOutputNodes = [\n//   // \"StatefulPartitionedCall/Postprocessor/Slice\",\n//   // \"StatefulPartitionedCall/Postprocessor/convert_scores\",\n//   // \"StatefulPartitionedCall/Postprocessor/ExpandDims_1\",\n//   \"Identity_4:0\",\n//   \"Identity:0\",\n// ];\n\nconst modelOutputNodes = {\n  ssd320fpnlite: [\"StatefulPartitionedCall/Postprocessor/Slice\", \"StatefulPartitionedCall/Postprocessor/ExpandDims_1\"],\n  ssd640fpnlite: [\"StatefulPartitionedCall/Postprocessor/Slice\", \"StatefulPartitionedCall/Postprocessor/ExpandDims_1\"],\n  centernet512fpn: [\"Identity_4:0\", \"Identity:0\", \"Identity_2:0\"]\n};\nexport function load(_x) {\n  return _load.apply(this, arguments);\n}\n\nfunction _load() {\n  _load = _asyncToGenerator(function* (params) {\n    let modelParams = Object.assign({}, defaultParams, params); // console.log(modelParams)\n\n    const objectDetection = new ObjectDetection(modelParams);\n    yield objectDetection.load();\n    return objectDetection;\n  });\n  return _load.apply(this, arguments);\n}\n\nexport function startVideo(video) {\n  return new Promise(function (resolve, reject) {\n    // Video must have height and width in order to be used as input for NN\n    // Aspect ratio of 3/4 is used to support safari browser.\n    if (!video) {\n      resolve({\n        status: false,\n        msg: \"please provide a valid video element\"\n      });\n    }\n\n    video.width = video.width || 640;\n    video.height = video.width * (video.videoHeight / video.videoWidth); //* (3 / 4);\n\n    video.style.height = \"20px\";\n    navigator.mediaDevices.getUserMedia({\n      audio: false,\n      video: {\n        facingMode: \"user\"\n      }\n    }).then(stream => {\n      window.localStream = stream;\n      video.srcObject = stream;\n\n      video.onloadedmetadata = () => {\n        video.height = video.width * (video.videoHeight / video.videoWidth); //* (3 / 4);\n\n        video.style.height = parseInt(video.style.width) * (video.videoHeight / video.videoWidth).toFixed(2) + \"px\";\n        video.play();\n        resolve({\n          status: true,\n          msg: \"webcam successfully initiated.\"\n        });\n      };\n    }).catch(function (err) {\n      resolve({\n        status: false,\n        msg: err\n      });\n    });\n  });\n}\nexport function stopVideo() {\n  return _stopVideo.apply(this, arguments);\n}\n\nfunction _stopVideo() {\n  _stopVideo = _asyncToGenerator(function* () {\n    if (window.localStream) {\n      window.localStream.getTracks().forEach(track => {\n        track.stop();\n        return true;\n      });\n    } else {\n      return false;\n    }\n  });\n  return _stopVideo.apply(this, arguments);\n}\n\nexport class ObjectDetection {\n  constructor(modelParams) {\n    this.modelPath = modelParams.basePath + modelParams.modelType + \"/\" + (modelSizeMap[modelParams.modelSize] || \"base\") + \"/model.json \"; // this.weightPath =\n    //   basePath + modelParams.modelType + \"/weights_manifest.json\";\n\n    this.modelParams = modelParams;\n  }\n\n  load() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.fps = 0;\n      _this.model = yield loadGraphModel(_this.modelPath); // console.log(this.model.executor._signature);\n      // Warmup the model.\n\n      const dummyInput = tf.zeros([1, 300, 300, 3], \"int32\"); // this.model.executeAsync(dummyInput).then((result) => {\n      //   tf.dispose(result);\n      //   tf.dispose(dummyInput);\n      // });\n\n      const result = yield _this.model.executeAsync(dummyInput, modelOutputNodes[_this.modelParams.modelType]);\n      result.map( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (t) {\n          return yield t.data();\n        });\n\n        return function (_x2) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n      result.map( /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator(function* (t) {\n          return t.dispose();\n        });\n\n        return function (_x3) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n      tf.dispose(dummyInput); // console.log(tf.memory());\n    })();\n  }\n\n  detect(input) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      let timeBegin = Date.now();\n      const [height, width] = getInputTensorDimensions(input);\n      const resizedHeight = getValidResolution(_this2.modelParams.imageScaleFactor, height, _this2.modelParams.outputStride);\n      const resizedWidth = getValidResolution(_this2.modelParams.imageScaleFactor, width, _this2.modelParams.outputStride);\n      const batched = tf.tidy(() => {\n        const imageTensor = tf.browser.fromPixels(input);\n\n        if (_this2.modelParams.flipHorizontal) {\n          return imageTensor //   .transpose([0, 1, 2])\n          .reverse(1).resizeBilinear([resizedHeight, resizedWidth]).expandDims(0).toInt();\n        } else {\n          return imageTensor //   .transpose([0, 1, 2])\n          .resizeBilinear([resizedHeight, resizedWidth]).expandDims(0).toInt();\n        }\n      }); // const result = await this.model.executeAsync(batched);\n\n      const self = _this2;\n      return _this2.model.executeAsync(batched, modelOutputNodes[_this2.modelParams.modelType]).then(function (result) {\n        // clean the webgl tensors\n        batched.dispose();\n        let predictions = [];\n\n        if (self.modelParams.modelType === \"centernet512fpn\") {\n          const scores = result[0].dataSync();\n          const boxes = result[1].arraySync();\n          const classes = result[2].dataSync(); // console.log(boxes[0]);\n          // clean the webgl tensors\n\n          tf.dispose(result);\n          predictions = self.buildDetectObjectsCenternet(width, height, boxes[0], scores, classes);\n          console.log(predictions);\n        } else {\n          const scores = result[0].dataSync();\n          const boxes = result[1].dataSync(); // clean the webgl tensors\n\n          tf.dispose(result);\n          const [maxScores, classes] = calculateMaxScores(scores, result[0].shape[1], result[0].shape[2]); // console.log(classes.length);\n\n          const prevBackend = tf.getBackend(); // run post process in cpu\n\n          tf.setBackend(\"cpu\");\n          const indexTensor = tf.tidy(() => {\n            const boxes2 = tf.tensor2d(boxes, [result[1].shape[1], result[1].shape[3]]);\n            return tf.image.nonMaxSuppression(boxes2, maxScores, self.modelParams.maxNumBoxes, // maxNumBoxes\n            self.modelParams.iouThreshold, // iou_threshold\n            self.modelParams.scoreThreshold // score_threshold\n            );\n          });\n          const indexes = indexTensor.dataSync();\n          indexTensor.dispose(); // // restore previous backend\n\n          tf.setBackend(prevBackend);\n          predictions = self.buildDetectedObjects(width, height, boxes, maxScores, indexes, classes);\n        }\n\n        let timeEnd = Date.now();\n        self.fps = Math.round(1000 / (timeEnd - timeBegin));\n        return predictions;\n      });\n    })();\n  }\n\n  buildDetectedObjects(width, height, boxes, scores, indexes, classes) {\n    const count = indexes.length;\n    const objects = [];\n\n    for (let i = 0; i < count; i++) {\n      const bbox = [];\n\n      for (let j = 0; j < 4; j++) {\n        bbox[j] = boxes[indexes[i] * 4 + j];\n      }\n\n      const minY = bbox[0] * height;\n      const minX = bbox[1] * width;\n      const maxY = bbox[2] * height;\n      const maxX = bbox[3] * width;\n      bbox[0] = minX;\n      bbox[1] = minY;\n      bbox[2] = maxX - minX;\n      bbox[3] = maxY - minY;\n      const detectionClass = Math.round(classes[indexes[i]]) + 1;\n      objects.push({\n        bbox: bbox,\n        class: detectionClass,\n        label: this.modelParams.labelMap[detectionClass],\n        score: scores[indexes[i]].toFixed(2)\n      });\n    }\n\n    return objects;\n  }\n\n  buildDetectObjectsCenternet(width, height, boxes, scores, classes) {\n    const objects = [];\n\n    for (let i = 0; i < scores.length; i++) {\n      const bbox = boxes[i];\n      const minY = bbox[0] * height;\n      const minX = bbox[1] * width;\n      const maxY = bbox[2] * height;\n      const maxX = bbox[3] * width;\n      bbox[0] = minX;\n      bbox[1] = minY;\n      bbox[2] = maxX - minX;\n      bbox[3] = maxY - minY;\n      const detectionClass = Math.round(classes[i]) + 1;\n      objects.push({\n        bbox: bbox,\n        class: detectionClass,\n        label: this.modelParams.labelMap[detectionClass],\n        score: scores[i].toFixed(2)\n      });\n    }\n\n    return objects.slice(0, 10);\n  }\n\n  getFPS() {\n    return this.fps;\n  }\n\n  setModelParameters(params) {\n    this.modelParams = Object.assign({}, this.modelParams, params);\n  }\n\n  getModelParameters() {\n    return this.modelParams;\n  }\n\n  roundRect(ctx, x, y, width, height, radius, fill, stroke) {\n    if (typeof stroke === \"undefined\") {\n      stroke = true;\n    }\n\n    if (typeof radius === \"undefined\") {\n      radius = 5;\n    }\n\n    if (typeof radius === \"number\") {\n      radius = {\n        tl: radius,\n        tr: radius,\n        br: radius,\n        bl: radius\n      };\n    } else {\n      var defaultRadius = {\n        tl: 0,\n        tr: 0,\n        br: 0,\n        bl: 0\n      };\n\n      for (var side in defaultRadius) {\n        radius[side] = radius[side] || defaultRadius[side];\n      }\n    }\n\n    ctx.beginPath();\n    ctx.moveTo(x + radius.tl, y);\n    ctx.lineTo(x + width - radius.tr, y);\n    ctx.quadraticCurveTo(x + width, y, x + width, y + radius.tr);\n    ctx.lineTo(x + width, y + height - radius.br);\n    ctx.quadraticCurveTo(x + width, y + height, x + width - radius.br, y + height);\n    ctx.lineTo(x + radius.bl, y + height);\n    ctx.quadraticCurveTo(x, y + height, x, y + height - radius.bl);\n    ctx.lineTo(x, y + radius.tl);\n    ctx.quadraticCurveTo(x, y, x + radius.tl, y);\n    ctx.closePath();\n\n    if (fill) {\n      ctx.fill();\n    }\n\n    if (stroke) {\n      ctx.stroke();\n    }\n  }\n\n  renderPredictions(predictions, canvas, context, mediasource) {\n    context.clearRect(0, 0, canvas.width, canvas.height);\n    canvas.width = mediasource.width;\n    canvas.height = mediasource.height; // console.log(\"render\", mediasource.width, mediasource.height);\n\n    canvas.style.height = parseInt(canvas.style.width) * (mediasource.height / mediasource.width).toFixed(2) + \"px\"; // console.log(\"render\", canvas.style.width, canvas.style.height);\n\n    context.save();\n\n    if (this.modelParams.flipHorizontal) {\n      context.scale(-1, 1);\n      context.translate(-mediasource.width, 0);\n    }\n\n    context.drawImage(mediasource, 0, 0, mediasource.width, mediasource.height);\n    context.restore();\n    context.font = \"bold \" + this.modelParams.fontSize + \"px Arial\";\n    const renderThresholds = this.modelParams.renderThresholds; // console.log('number of detections: ', predictions.length);\n\n    for (let i = 0; i < predictions.length; i++) {\n      const pred = predictions[i]; // console.log(pred.score, renderThresholds[pred.label]);\n\n      if (!renderThresholds || pred.score > renderThresholds[pred.label]) {\n        context.beginPath();\n        context.fillStyle = \"rgba(255, 255, 255, 0.6)\";\n        context.fillRect(pred.bbox[0] + 1, pred.bbox[1] + 1, pred.bbox[2] - 1, this.modelParams.fontSize * 1.5);\n        context.lineWidth = this.modelParams.bboxLineWidth; // context.rect(...pred.bbox);\n\n        this.roundRect(context, pred.bbox[0], pred.bbox[1], pred.bbox[2], pred.bbox[3], 5, false, true); // draw a dot at the center of bounding box\n        // context.lineWidth = 1;\n\n        context.strokeStyle = colorMap[pred.label];\n        context.fillStyle = colorMap[pred.label]; //draw dot at center of each bounding box\n\n        context.stroke();\n        context.beginPath();\n        context.arc(pred.bbox[0] + pred.bbox[2] / 2, pred.bbox[1] + pred.bbox[3] / 2, 2, 0, 2 * Math.PI);\n        context.fill(); //draw label in each box\n\n        context.stroke();\n        context.fillText(pred.score + \" | \" + pred.label, pred.bbox[0] + 5, pred.bbox[1] + this.modelParams.fontSize * 1.1);\n      }\n    } // FPS background\n\n\n    context.fillStyle = \"rgba(255, 255, 255, 0.6)\"; // context.fillRect(5, 5, 80, 24);\n\n    this.roundRect(context, 10, 10, this.modelParams.fontSize * 4.6, this.modelParams.fontSize + 8, 5, true, false); // Write FPS to top left\n    // context.stroke();\n\n    context.strokeStyle = \"#374151\";\n    context.fillStyle = \"#374151\";\n    context.font = \"bold \" + this.modelParams.fontSize + \"px Arial\";\n    context.fillText(\"FPS: \" + this.fps, 18, this.modelParams.fontSize + 12);\n  }\n\n  dispose() {\n    if (this.model) {\n      this.model.dispose();\n    }\n  }\n\n}\n\nfunction getValidResolution(imageScaleFactor, inputDimension, outputStride) {\n  const evenResolution = inputDimension * imageScaleFactor - 1;\n  return evenResolution - evenResolution % outputStride + 1;\n}\n\nfunction getInputTensorDimensions(input) {\n  return input instanceof tf.Tensor ? [input.shape[0], input.shape[1]] : [input.height, input.width];\n}\n\nfunction calculateMaxScores(scores, numBoxes, numClasses) {\n  const maxes = [];\n  const classes = [];\n\n  for (let i = 0; i < numBoxes; i++) {\n    let max = Number.MIN_VALUE;\n    let index = -1;\n\n    for (let j = 0; j < numClasses; j++) {\n      if (scores[i * numClasses + j] > max) {\n        max = scores[i * numClasses + j];\n        index = j;\n      }\n    }\n\n    maxes[i] = max;\n    classes[i] = index;\n  }\n\n  return [maxes, classes];\n}","map":{"version":3,"sources":["/Users/ryanliang/Downloads/main_movir_picker/node_modules/handtrackjs/src/index.js"],"names":["tf","loadGraphModel","version","basePath","labelMap","defaultRenderThresholds","open","closed","pinch","point","face","pointtip","pinchtip","defaultParams","flipHorizontal","outputStride","imageScaleFactor","maxNumBoxes","iouThreshold","scoreThreshold","modelType","modelSize","bboxLineWidth","fontSize","renderThresholds","modelSizeMap","large","medium","small","colorMap","modelOutputNodes","ssd320fpnlite","ssd640fpnlite","centernet512fpn","load","params","modelParams","Object","assign","objectDetection","ObjectDetection","startVideo","video","Promise","resolve","reject","status","msg","width","height","videoHeight","videoWidth","style","navigator","mediaDevices","getUserMedia","audio","facingMode","then","stream","window","localStream","srcObject","onloadedmetadata","parseInt","toFixed","play","catch","err","stopVideo","getTracks","forEach","track","stop","constructor","modelPath","fps","model","dummyInput","zeros","result","executeAsync","map","t","data","dispose","detect","input","timeBegin","Date","now","getInputTensorDimensions","resizedHeight","getValidResolution","resizedWidth","batched","tidy","imageTensor","browser","fromPixels","reverse","resizeBilinear","expandDims","toInt","self","predictions","scores","dataSync","boxes","arraySync","classes","buildDetectObjectsCenternet","console","log","maxScores","calculateMaxScores","shape","prevBackend","getBackend","setBackend","indexTensor","boxes2","tensor2d","image","nonMaxSuppression","indexes","buildDetectedObjects","timeEnd","Math","round","count","length","objects","i","bbox","j","minY","minX","maxY","maxX","detectionClass","push","class","label","score","slice","getFPS","setModelParameters","getModelParameters","roundRect","ctx","x","y","radius","fill","stroke","tl","tr","br","bl","defaultRadius","side","beginPath","moveTo","lineTo","quadraticCurveTo","closePath","renderPredictions","canvas","context","mediasource","clearRect","save","scale","translate","drawImage","restore","font","pred","fillStyle","fillRect","lineWidth","strokeStyle","arc","PI","fillText","inputDimension","evenResolution","Tensor","numBoxes","numClasses","maxes","max","Number","MIN_VALUE","index"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2019 Victor Dibia.\n * Handtrack.js - A library for prototyping realtime hand tracking using neural networks.\n * Licensed under the MIT License (the \"License\");\n * Code snippets from the tensorflow coco-ssd example are reused here - https://github.com/tensorflow/tfjs-models/tree/master/coco-ssd\n * =============================================================================\n */\n\nimport * as tf from \"@tensorflow/tfjs\";\nimport { loadGraphModel } from \"@tensorflow/tfjs-converter\";\n\nexport const version = \"0.1.5\";\n\nconst basePath =\n  \"https://cdn.jsdelivr.net/npm/handtrackjs@latest/models/webmodel/\";\n// const basePath = \"webmodel/\";\n\nconst labelMap = {\n  1: \"open\",\n  2: \"closed\",\n  3: \"pinch\",\n  4: \"point\",\n  5: \"face\",\n  6: \"pointtip\",\n  7: \"pinchtip\",\n};\n\nconst defaultRenderThresholds = {\n  open: 0.6,\n  closed: 0.6,\n  pinch: 0.6,\n  point: 0.6,\n  face: 0.8,\n  pointtip: 0.6,\n  pinchtip: 0.6,\n};\nconst defaultParams = {\n  flipHorizontal: false,\n  outputStride: 16,\n  imageScaleFactor: 1,\n  maxNumBoxes: 20,\n  iouThreshold: 0.2,\n  scoreThreshold: 0.6,\n  modelType: \"ssd320fpnlite\", // centernet512fpn,\n  modelSize: \"small\",\n  bboxLineWidth: \"2\",\n  fontSize: 17,\n  basePath: basePath,\n  labelMap: labelMap,\n  renderThresholds: null,\n};\n\nconst modelSizeMap = {\n  large: \"base\",\n  medium: \"fp16\",\n  small: \"int8\",\n};\nexport const colorMap = {\n  open: \"#374151\",\n  closed: \"#B91C1C\",\n  pinch: \"#F59E0B\",\n  point: \"#10B981\",\n  face: \"#3B82F6\",\n  pointtip: \"#6366F1\",\n  pinchtip: \"#EC4899\",\n};\n\n// const modelOutputNodes = [\n//   // \"StatefulPartitionedCall/Postprocessor/Slice\",\n//   // \"StatefulPartitionedCall/Postprocessor/convert_scores\",\n//   // \"StatefulPartitionedCall/Postprocessor/ExpandDims_1\",\n//   \"Identity_4:0\",\n//   \"Identity:0\",\n// ];\n\nconst modelOutputNodes = {\n  ssd320fpnlite: [\n    \"StatefulPartitionedCall/Postprocessor/Slice\",\n    \"StatefulPartitionedCall/Postprocessor/ExpandDims_1\",\n  ],\n  ssd640fpnlite: [\n    \"StatefulPartitionedCall/Postprocessor/Slice\",\n    \"StatefulPartitionedCall/Postprocessor/ExpandDims_1\",\n  ],\n  centernet512fpn: [\"Identity_4:0\", \"Identity:0\", \"Identity_2:0\"],\n};\n\nexport async function load(params) {\n  let modelParams = Object.assign({}, defaultParams, params);\n  // console.log(modelParams)\n  const objectDetection = new ObjectDetection(modelParams);\n  await objectDetection.load();\n  return objectDetection;\n}\n\nexport function startVideo(video) {\n  return new Promise(function (resolve, reject) {\n    // Video must have height and width in order to be used as input for NN\n    // Aspect ratio of 3/4 is used to support safari browser.\n\n    if (!video) {\n      resolve({ status: false, msg: \"please provide a valid video element\" });\n    }\n\n    video.width = video.width || 640;\n    video.height = video.width * (video.videoHeight / video.videoWidth); //* (3 / 4);\n    video.style.height = \"20px\";\n\n    navigator.mediaDevices\n      .getUserMedia({\n        audio: false,\n        video: {\n          facingMode: \"user\",\n        },\n      })\n      .then((stream) => {\n        window.localStream = stream;\n        video.srcObject = stream;\n        video.onloadedmetadata = () => {\n          video.height = video.width * (video.videoHeight / video.videoWidth); //* (3 / 4);\n          video.style.height =\n            parseInt(video.style.width) *\n              (video.videoHeight / video.videoWidth).toFixed(2) +\n            \"px\";\n          video.play();\n          resolve({ status: true, msg: \"webcam successfully initiated.\" });\n        };\n      })\n      .catch(function (err) {\n        resolve({ status: false, msg: err });\n      });\n  });\n}\n\nexport async function stopVideo() {\n  if (window.localStream) {\n    window.localStream.getTracks().forEach((track) => {\n      track.stop();\n      return true;\n    });\n  } else {\n    return false;\n  }\n}\n\nexport class ObjectDetection {\n  constructor(modelParams) {\n    this.modelPath =\n      modelParams.basePath +\n      modelParams.modelType +\n      \"/\" +\n      (modelSizeMap[modelParams.modelSize] || \"base\") +\n      \"/model.json \";\n    // this.weightPath =\n    //   basePath + modelParams.modelType + \"/weights_manifest.json\";\n    this.modelParams = modelParams;\n  }\n\n  async load() {\n    this.fps = 0;\n\n    this.model = await loadGraphModel(this.modelPath);\n    // console.log(this.model.executor._signature);\n    // Warmup the model.\n    const dummyInput = tf.zeros([1, 300, 300, 3], \"int32\");\n    // this.model.executeAsync(dummyInput).then((result) => {\n    //   tf.dispose(result);\n    //   tf.dispose(dummyInput);\n    // });\n    const result = await this.model.executeAsync(\n      dummyInput,\n      modelOutputNodes[this.modelParams.modelType]\n    );\n    result.map(async (t) => await t.data());\n    result.map(async (t) => t.dispose());\n    tf.dispose(dummyInput);\n    // console.log(tf.memory());\n  }\n\n  async detect(input) {\n    let timeBegin = Date.now();\n    const [height, width] = getInputTensorDimensions(input);\n    const resizedHeight = getValidResolution(\n      this.modelParams.imageScaleFactor,\n      height,\n      this.modelParams.outputStride\n    );\n    const resizedWidth = getValidResolution(\n      this.modelParams.imageScaleFactor,\n      width,\n      this.modelParams.outputStride\n    );\n\n    const batched = tf.tidy(() => {\n      const imageTensor = tf.browser.fromPixels(input);\n      if (this.modelParams.flipHorizontal) {\n        return (\n          imageTensor\n            //   .transpose([0, 1, 2])\n            .reverse(1)\n            .resizeBilinear([resizedHeight, resizedWidth])\n            .expandDims(0)\n            .toInt()\n        );\n      } else {\n        return (\n          imageTensor\n            //   .transpose([0, 1, 2])\n            .resizeBilinear([resizedHeight, resizedWidth])\n            .expandDims(0)\n            .toInt()\n        );\n      }\n    });\n    // const result = await this.model.executeAsync(batched);\n    const self = this;\n\n    return this.model\n      .executeAsync(batched, modelOutputNodes[this.modelParams.modelType])\n      .then(function (result) {\n        // clean the webgl tensors\n        batched.dispose();\n\n        let predictions = [];\n\n        if (self.modelParams.modelType === \"centernet512fpn\") {\n          const scores = result[0].dataSync();\n          const boxes = result[1].arraySync();\n          const classes = result[2].dataSync();\n          // console.log(boxes[0]);\n\n          // clean the webgl tensors\n          tf.dispose(result);\n\n          predictions = self.buildDetectObjectsCenternet(\n            width,\n            height,\n            boxes[0],\n            scores,\n            classes\n          );\n\n          console.log(predictions);\n        } else {\n          const scores = result[0].dataSync();\n          const boxes = result[1].dataSync();\n\n          // clean the webgl tensors\n          tf.dispose(result);\n\n          const [maxScores, classes] = calculateMaxScores(\n            scores,\n            result[0].shape[1],\n            result[0].shape[2]\n          );\n\n          // console.log(classes.length);\n          const prevBackend = tf.getBackend();\n          // run post process in cpu\n          tf.setBackend(\"cpu\");\n          const indexTensor = tf.tidy(() => {\n            const boxes2 = tf.tensor2d(boxes, [\n              result[1].shape[1],\n              result[1].shape[3],\n            ]);\n            return tf.image.nonMaxSuppression(\n              boxes2,\n              maxScores,\n              self.modelParams.maxNumBoxes, // maxNumBoxes\n              self.modelParams.iouThreshold, // iou_threshold\n              self.modelParams.scoreThreshold // score_threshold\n            );\n          });\n          const indexes = indexTensor.dataSync();\n          indexTensor.dispose();\n          // // restore previous backend\n          tf.setBackend(prevBackend);\n\n          predictions = self.buildDetectedObjects(\n            width,\n            height,\n            boxes,\n            maxScores,\n            indexes,\n            classes\n          );\n        }\n        let timeEnd = Date.now();\n        self.fps = Math.round(1000 / (timeEnd - timeBegin));\n\n        return predictions;\n      });\n  }\n\n  buildDetectedObjects(width, height, boxes, scores, indexes, classes) {\n    const count = indexes.length;\n    const objects = [];\n    for (let i = 0; i < count; i++) {\n      const bbox = [];\n      for (let j = 0; j < 4; j++) {\n        bbox[j] = boxes[indexes[i] * 4 + j];\n      }\n      const minY = bbox[0] * height;\n      const minX = bbox[1] * width;\n      const maxY = bbox[2] * height;\n      const maxX = bbox[3] * width;\n      bbox[0] = minX;\n      bbox[1] = minY;\n      bbox[2] = maxX - minX;\n      bbox[3] = maxY - minY;\n      const detectionClass = Math.round(classes[indexes[i]]) + 1;\n      objects.push({\n        bbox: bbox,\n        class: detectionClass,\n        label: this.modelParams.labelMap[detectionClass],\n        score: scores[indexes[i]].toFixed(2),\n      });\n    }\n    return objects;\n  }\n\n  buildDetectObjectsCenternet(width, height, boxes, scores, classes) {\n    const objects = [];\n    for (let i = 0; i < scores.length; i++) {\n      const bbox = boxes[i];\n      const minY = bbox[0] * height;\n      const minX = bbox[1] * width;\n      const maxY = bbox[2] * height;\n      const maxX = bbox[3] * width;\n      bbox[0] = minX;\n      bbox[1] = minY;\n      bbox[2] = maxX - minX;\n      bbox[3] = maxY - minY;\n      const detectionClass = Math.round(classes[i]) + 1;\n      objects.push({\n        bbox: bbox,\n        class: detectionClass,\n        label: this.modelParams.labelMap[detectionClass],\n        score: scores[i].toFixed(2),\n      });\n    }\n    return objects.slice(0, 10);\n  }\n\n  getFPS() {\n    return this.fps;\n  }\n\n  setModelParameters(params) {\n    this.modelParams = Object.assign({}, this.modelParams, params);\n  }\n\n  getModelParameters() {\n    return this.modelParams;\n  }\n\n  roundRect(ctx, x, y, width, height, radius, fill, stroke) {\n    if (typeof stroke === \"undefined\") {\n      stroke = true;\n    }\n    if (typeof radius === \"undefined\") {\n      radius = 5;\n    }\n    if (typeof radius === \"number\") {\n      radius = { tl: radius, tr: radius, br: radius, bl: radius };\n    } else {\n      var defaultRadius = { tl: 0, tr: 0, br: 0, bl: 0 };\n      for (var side in defaultRadius) {\n        radius[side] = radius[side] || defaultRadius[side];\n      }\n    }\n    ctx.beginPath();\n    ctx.moveTo(x + radius.tl, y);\n    ctx.lineTo(x + width - radius.tr, y);\n    ctx.quadraticCurveTo(x + width, y, x + width, y + radius.tr);\n    ctx.lineTo(x + width, y + height - radius.br);\n    ctx.quadraticCurveTo(\n      x + width,\n      y + height,\n      x + width - radius.br,\n      y + height\n    );\n    ctx.lineTo(x + radius.bl, y + height);\n    ctx.quadraticCurveTo(x, y + height, x, y + height - radius.bl);\n    ctx.lineTo(x, y + radius.tl);\n    ctx.quadraticCurveTo(x, y, x + radius.tl, y);\n    ctx.closePath();\n    if (fill) {\n      ctx.fill();\n    }\n    if (stroke) {\n      ctx.stroke();\n    }\n  }\n\n  renderPredictions(predictions, canvas, context, mediasource) {\n    context.clearRect(0, 0, canvas.width, canvas.height);\n    canvas.width = mediasource.width;\n    canvas.height = mediasource.height;\n    // console.log(\"render\", mediasource.width, mediasource.height);\n    canvas.style.height =\n      parseInt(canvas.style.width) *\n        (mediasource.height / mediasource.width).toFixed(2) +\n      \"px\";\n    // console.log(\"render\", canvas.style.width, canvas.style.height);\n\n    context.save();\n    if (this.modelParams.flipHorizontal) {\n      context.scale(-1, 1);\n      context.translate(-mediasource.width, 0);\n    }\n    context.drawImage(mediasource, 0, 0, mediasource.width, mediasource.height);\n    context.restore();\n    context.font = \"bold \" + this.modelParams.fontSize + \"px Arial\";\n\n    const renderThresholds = this.modelParams.renderThresholds;\n    // console.log('number of detections: ', predictions.length);\n    for (let i = 0; i < predictions.length; i++) {\n      const pred = predictions[i];\n      // console.log(pred.score, renderThresholds[pred.label]);\n      if (!renderThresholds || pred.score > renderThresholds[pred.label]) {\n        context.beginPath();\n        context.fillStyle = \"rgba(255, 255, 255, 0.6)\";\n\n        context.fillRect(\n          pred.bbox[0] + 1,\n          pred.bbox[1] + 1,\n          pred.bbox[2] - 1,\n          this.modelParams.fontSize * 1.5\n        );\n        context.lineWidth = this.modelParams.bboxLineWidth;\n        // context.rect(...pred.bbox);\n        this.roundRect(\n          context,\n          pred.bbox[0],\n          pred.bbox[1],\n          pred.bbox[2],\n          pred.bbox[3],\n          5,\n          false,\n          true\n        );\n\n        // draw a dot at the center of bounding box\n\n        // context.lineWidth = 1;\n        context.strokeStyle = colorMap[pred.label];\n        context.fillStyle = colorMap[pred.label];\n\n        //draw dot at center of each bounding box\n        context.stroke();\n        context.beginPath();\n        context.arc(\n          pred.bbox[0] + pred.bbox[2] / 2,\n          pred.bbox[1] + pred.bbox[3] / 2,\n          2,\n          0,\n          2 * Math.PI\n        );\n        context.fill();\n\n        //draw label in each box\n        context.stroke();\n        context.fillText(\n          pred.score + \" | \" + pred.label,\n          pred.bbox[0] + 5,\n          pred.bbox[1] + this.modelParams.fontSize * 1.1\n        );\n      }\n    }\n\n    // FPS background\n    context.fillStyle = \"rgba(255, 255, 255, 0.6)\";\n\n    // context.fillRect(5, 5, 80, 24);\n    this.roundRect(\n      context,\n      10,\n      10,\n      this.modelParams.fontSize * 4.6,\n      this.modelParams.fontSize + 8,\n      5,\n      true,\n      false\n    );\n    // Write FPS to top left\n    // context.stroke();\n    context.strokeStyle = \"#374151\";\n    context.fillStyle = \"#374151\";\n    context.font = \"bold \" + this.modelParams.fontSize + \"px Arial\";\n    context.fillText(\"FPS: \" + this.fps, 18, this.modelParams.fontSize + 12);\n  }\n\n  dispose() {\n    if (this.model) {\n      this.model.dispose();\n    }\n  }\n}\n\nfunction getValidResolution(imageScaleFactor, inputDimension, outputStride) {\n  const evenResolution = inputDimension * imageScaleFactor - 1;\n  return evenResolution - (evenResolution % outputStride) + 1;\n}\n\nfunction getInputTensorDimensions(input) {\n  return input instanceof tf.Tensor\n    ? [input.shape[0], input.shape[1]]\n    : [input.height, input.width];\n}\n\nfunction calculateMaxScores(scores, numBoxes, numClasses) {\n  const maxes = [];\n  const classes = [];\n  for (let i = 0; i < numBoxes; i++) {\n    let max = Number.MIN_VALUE;\n    let index = -1;\n    for (let j = 0; j < numClasses; j++) {\n      if (scores[i * numClasses + j] > max) {\n        max = scores[i * numClasses + j];\n        index = j;\n      }\n    }\n    maxes[i] = max;\n    classes[i] = index;\n  }\n  return [maxes, classes];\n}\n"]},"metadata":{},"sourceType":"module"}
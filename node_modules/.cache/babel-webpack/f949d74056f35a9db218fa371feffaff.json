{"ast":null,"code":"import _asyncToGenerator from \"/Users/ryanliang/Downloads/main_movir_picker/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { io, Tensor } from '@tensorflow/tfjs-core';\nimport { OperationMapper } from '../operations/operation_mapper';\nimport { GraphExecutor } from './graph_executor';\nimport { ResourceManager } from './resource_manager';\nexport const TFHUB_SEARCH_PARAM = '?tfjs-format=file';\nexport const DEFAULT_MODEL_NAME = 'model.json';\n/**\n * A `tf.GraphModel` is a directed, acyclic graph built from a\n * SavedModel GraphDef and allows inference execution.\n *\n * A `tf.GraphModel` can only be created by loading from a model converted from\n * a [TensorFlow SavedModel](https://www.tensorflow.org/guide/saved_model) using\n * the command line converter tool and loaded via `tf.loadGraphModel`.\n *\n * @doc {heading: 'Models', subheading: 'Classes'}\n */\n\nexport class GraphModel {\n  /**\n   * @param modelUrl url for the model, or an `io.IOHandler`.\n   * @param weightManifestUrl url for the weight file generated by\n   * scripts/convert.py script.\n   * @param requestOption options for Request, which allows to send credentials\n   * and custom headers.\n   * @param onProgress Optional, progress callback function, fired periodically\n   * before the load is completed.\n   */\n  constructor(modelUrl, loadOptions = {}) {\n    this.modelUrl = modelUrl;\n    this.loadOptions = loadOptions;\n    this.version = 'n/a';\n\n    if (loadOptions == null) {\n      this.loadOptions = {};\n    }\n\n    this.resourceManager = new ResourceManager();\n  } // Returns the version information for the tensorflow model GraphDef.\n\n\n  get modelVersion() {\n    return this.version;\n  }\n\n  get inputNodes() {\n    return this.executor.inputNodes;\n  }\n\n  get outputNodes() {\n    return this.executor.outputNodes;\n  }\n\n  get inputs() {\n    return this.executor.inputs;\n  }\n\n  get outputs() {\n    return this.executor.outputs;\n  }\n\n  get weights() {\n    return this.executor.weightMap;\n  }\n\n  get metadata() {\n    return this.artifacts.userDefinedMetadata;\n  }\n\n  get modelSignature() {\n    return this.signature;\n  }\n\n  findIOHandler() {\n    const path = this.modelUrl;\n\n    if (path.load != null) {\n      // Path is an IO Handler.\n      this.handler = path;\n    } else if (this.loadOptions.requestInit != null) {\n      this.handler = io.browserHTTPRequest(path, this.loadOptions);\n    } else {\n      const handlers = io.getLoadHandlers(path, this.loadOptions);\n\n      if (handlers.length === 0) {\n        // For backward compatibility: if no load handler can be found,\n        // assume it is a relative http path.\n        handlers.push(io.browserHTTPRequest(path, this.loadOptions));\n      } else if (handlers.length > 1) {\n        throw new Error(`Found more than one (${handlers.length}) load handlers for ` + `URL '${[path]}'`);\n      }\n\n      this.handler = handlers[0];\n    }\n  }\n  /**\n   * Loads the model and weight files, construct the in memory weight map and\n   * compile the inference graph.\n   */\n\n\n  load() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.findIOHandler();\n\n      if (_this.handler.load == null) {\n        throw new Error('Cannot proceed with model loading because the IOHandler provided ' + 'does not have the `load` method implemented.');\n      }\n\n      const artifacts = yield _this.handler.load();\n      return _this.loadSync(artifacts);\n    })();\n  }\n  /**\n   * Synchronously construct the in memory weight map and\n   * compile the inference graph. Also initialize hashtable if any.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}\n   */\n\n\n  loadSync(artifacts) {\n    this.artifacts = artifacts;\n    const graph = this.artifacts.modelTopology;\n    let signature;\n\n    if (this.artifacts.userDefinedMetadata != null && this.artifacts.userDefinedMetadata.signature != null) {\n      signature = // tslint:disable-next-line:no-any\n      this.artifacts.userDefinedMetadata.signature;\n    } else {\n      signature = this.artifacts.signature;\n    }\n\n    this.signature = signature;\n    this.version = `${graph.versions.producer}.${graph.versions.minConsumer}`;\n    const weightMap = io.decodeWeights(this.artifacts.weightData, this.artifacts.weightSpecs);\n    this.executor = new GraphExecutor(OperationMapper.Instance.transformGraph(graph, this.signature));\n    this.executor.weightMap = this.convertTensorMapToTensorsMap(weightMap); // Attach a model-level resourceManager to each executor to share resources,\n    // such as `HashTable`.\n\n    this.executor.resourceManager = this.resourceManager;\n\n    if (artifacts.modelInitializer != null && artifacts.modelInitializer.node != null) {\n      const initializer = OperationMapper.Instance.transformGraph(artifacts.modelInitializer);\n      this.initializer = new GraphExecutor(initializer);\n      this.initializer.weightMap = this.executor.weightMap; // Attach a model-level resourceManager to the initializer, the\n      // hashTables created from when executing the initializer will be stored\n      // in the resourceManager.\n\n      this.initializer.resourceManager = this.resourceManager;\n      this.initializer.executeAsync({}, []);\n    }\n\n    return true;\n  }\n  /**\n   * Save the configuration and/or weights of the GraphModel.\n   *\n   * An `IOHandler` is an object that has a `save` method of the proper\n   * signature defined. The `save` method manages the storing or\n   * transmission of serialized data (\"artifacts\") that represent the\n   * model's topology and weights onto or via a specific medium, such as\n   * file downloads, local storage, IndexedDB in the web browser and HTTP\n   * requests to a server. TensorFlow.js provides `IOHandler`\n   * implementations for a number of frequently used saving mediums, such as\n   * `tf.io.browserDownloads` and `tf.io.browserLocalStorage`. See `tf.io`\n   * for more details.\n   *\n   * This method also allows you to refer to certain types of `IOHandler`s\n   * as URL-like string shortcuts, such as 'localstorage://' and\n   * 'indexeddb://'.\n   *\n   * Example 1: Save `model`'s topology and weights to browser [local\n   * storage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage);\n   * then load it back.\n   *\n   * ```js\n   * const modelUrl =\n   *    'https://storage.googleapis.com/tfjs-models/savedmodel/mobilenet_v2_1.0_224/model.json';\n   * const model = await tf.loadGraphModel(modelUrl);\n   * const zeros = tf.zeros([1, 224, 224, 3]);\n   * model.predict(zeros).print();\n   *\n   * const saveResults = await model.save('localstorage://my-model-1');\n   *\n   * const loadedModel = await tf.loadGraphModel('localstorage://my-model-1');\n   * console.log('Prediction from loaded model:');\n   * model.predict(zeros).print();\n   * ```\n   *\n   * @param handlerOrURL An instance of `IOHandler` or a URL-like,\n   * scheme-based string shortcut for `IOHandler`.\n   * @param config Options for saving the model.\n   * @returns A `Promise` of `SaveResult`, which summarizes the result of\n   * the saving, such as byte sizes of the saved artifacts for the model's\n   *   topology and weight values.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}\n   */\n\n\n  save(handlerOrURL, config) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      if (typeof handlerOrURL === 'string') {\n        const handlers = io.getSaveHandlers(handlerOrURL);\n\n        if (handlers.length === 0) {\n          throw new Error(`Cannot find any save handlers for URL '${handlerOrURL}'`);\n        } else if (handlers.length > 1) {\n          throw new Error(`Found more than one (${handlers.length}) save handlers for ` + `URL '${handlerOrURL}'`);\n        }\n\n        handlerOrURL = handlers[0];\n      }\n\n      if (handlerOrURL.save == null) {\n        throw new Error('GraphModel.save() cannot proceed because the IOHandler ' + 'provided does not have the `save` attribute defined.');\n      }\n\n      return handlerOrURL.save(_this2.artifacts);\n    })();\n  }\n  /**\n   * Execute the inference for the input tensors.\n   *\n   * @param input The input tensors, when there is single input for the model,\n   * inputs param should be a `tf.Tensor`. For models with mutliple inputs,\n   * inputs params should be in either `tf.Tensor`[] if the input order is\n   * fixed, or otherwise NamedTensorMap format.\n   *\n   * For model with multiple inputs, we recommend you use NamedTensorMap as the\n   * input type, if you use `tf.Tensor`[], the order of the array needs to\n   * follow the\n   * order of inputNodes array. @see {@link GraphModel.inputNodes}\n   *\n   * You can also feed any intermediate nodes using the NamedTensorMap as the\n   * input type. For example, given the graph\n   *    InputNode => Intermediate => OutputNode,\n   * you can execute the subgraph Intermediate => OutputNode by calling\n   *    model.execute('IntermediateNode' : tf.tensor(...));\n   *\n   * This is useful for models that uses tf.dynamic_rnn, where the intermediate\n   * state needs to be fed manually.\n   *\n   * For batch inference execution, the tensors for each input need to be\n   * concatenated together. For example with mobilenet, the required input shape\n   * is [1, 244, 244, 3], which represents the [batch, height, width, channel].\n   * If we are provide a batched data of 100 images, the input tensor should be\n   * in the shape of [100, 244, 244, 3].\n   *\n   * @param config Prediction configuration for specifying the batch size and\n   * output node names. Currently the batch size option is ignored for graph\n   * model.\n   *\n   * @returns Inference result tensors. The output would be single `tf.Tensor`\n   * if model has single output node, otherwise Tensor[] or NamedTensorMap[]\n   * will be returned for model with multiple outputs.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n\n\n  predict(inputs, config) {\n    return this.execute(inputs, this.outputNodes);\n  }\n\n  normalizeInputs(inputs) {\n    if (!(inputs instanceof Tensor) && !Array.isArray(inputs)) {\n      // The input is already a NamedTensorMap.\n      return inputs;\n    }\n\n    inputs = Array.isArray(inputs) ? inputs : [inputs];\n\n    if (inputs.length !== this.inputNodes.length) {\n      throw new Error('Input tensor count mismatch,' + `the graph model has ${this.inputNodes.length} placeholders, ` + `while there are ${inputs.length} input tensors.`);\n    }\n\n    return this.inputNodes.reduce((map, inputName, i) => {\n      map[inputName] = inputs[i];\n      return map;\n    }, {});\n  }\n\n  normalizeOutputs(outputs) {\n    outputs = outputs || this.outputNodes;\n    return !Array.isArray(outputs) ? [outputs] : outputs;\n  }\n  /**\n   * Executes inference for the model for given input tensors.\n   * @param inputs tensor, tensor array or tensor map of the inputs for the\n   * model, keyed by the input node names.\n   * @param outputs output node name from the Tensorflow model, if no\n   * outputs are specified, the default outputs of the model would be used.\n   * You can inspect intermediate nodes of the model by adding them to the\n   * outputs array.\n   *\n   * @returns A single tensor if provided with a single output or no outputs\n   * are provided and there is only one default output, otherwise return a\n   * tensor array. The order of the tensor array is the same as the outputs\n   * if provided, otherwise the order of outputNodes attribute of the model.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n\n\n  execute(inputs, outputs) {\n    inputs = this.normalizeInputs(inputs);\n    outputs = this.normalizeOutputs(outputs);\n    const result = this.executor.execute(inputs, outputs);\n    return result.length > 1 ? result : result[0];\n  }\n  /**\n   * Executes inference for the model for given input tensors in async\n   * fashion, use this method when your model contains control flow ops.\n   * @param inputs tensor, tensor array or tensor map of the inputs for the\n   * model, keyed by the input node names.\n   * @param outputs output node name from the Tensorflow model, if no outputs\n   * are specified, the default outputs of the model would be used. You can\n   * inspect intermediate nodes of the model by adding them to the outputs\n   * array.\n   *\n   * @returns A Promise of single tensor if provided with a single output or\n   * no outputs are provided and there is only one default output, otherwise\n   * return a tensor map.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n\n\n  executeAsync(inputs, outputs) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      inputs = _this3.normalizeInputs(inputs);\n      outputs = _this3.normalizeOutputs(outputs);\n      const result = yield _this3.executor.executeAsync(inputs, outputs);\n      return result.length > 1 ? result : result[0];\n    })();\n  }\n\n  convertTensorMapToTensorsMap(map) {\n    return Object.keys(map).reduce((newMap, key) => {\n      newMap[key] = [map[key]];\n      return newMap;\n    }, {});\n  }\n  /**\n   * Releases the memory used by the weight tensors and resourceManager.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n\n\n  dispose() {\n    this.executor.dispose();\n\n    if (this.initializer) {\n      this.initializer.dispose();\n    }\n\n    this.resourceManager.dispose();\n  }\n\n}\n/**\n * Load a graph model given a URL to the model definition.\n *\n * Example of loading MobileNetV2 from a URL and making a prediction with a\n * zeros input:\n *\n * ```js\n * const modelUrl =\n *    'https://storage.googleapis.com/tfjs-models/savedmodel/mobilenet_v2_1.0_224/model.json';\n * const model = await tf.loadGraphModel(modelUrl);\n * const zeros = tf.zeros([1, 224, 224, 3]);\n * model.predict(zeros).print();\n * ```\n *\n * Example of loading MobileNetV2 from a TF Hub URL and making a prediction with\n * a zeros input:\n *\n * ```js\n * const modelUrl =\n *    'https://tfhub.dev/google/imagenet/mobilenet_v2_140_224/classification/2';\n * const model = await tf.loadGraphModel(modelUrl, {fromTFHub: true});\n * const zeros = tf.zeros([1, 224, 224, 3]);\n * model.predict(zeros).print();\n * ```\n * @param modelUrl The url or an `io.IOHandler` that loads the model.\n * @param options Options for the HTTP request, which allows to send credentials\n *    and custom headers.\n *\n * @doc {heading: 'Models', subheading: 'Loading'}\n */\n\nexport function loadGraphModel(_x) {\n  return _loadGraphModel.apply(this, arguments);\n}\n\nfunction _loadGraphModel() {\n  _loadGraphModel = _asyncToGenerator(function* (modelUrl, options = {}) {\n    if (modelUrl == null) {\n      throw new Error('modelUrl in loadGraphModel() cannot be null. Please provide a url ' + 'or an IOHandler that loads the model');\n    }\n\n    if (options == null) {\n      options = {};\n    }\n\n    if (options.fromTFHub) {\n      if (modelUrl.load == null) {\n        if (!modelUrl.endsWith('/')) {\n          modelUrl = modelUrl + '/';\n        }\n\n        modelUrl = `${modelUrl}${DEFAULT_MODEL_NAME}${TFHUB_SEARCH_PARAM}`;\n      }\n    }\n\n    const model = new GraphModel(modelUrl, options);\n    yield model.load();\n    return model;\n  });\n  return _loadGraphModel.apply(this, arguments);\n}","map":{"version":3,"sources":["/Users/ryanliang/Downloads/main_movir_picker/node_modules/@tensorflow/tfjs-converter/dist/executor/graph_model.js"],"names":["io","Tensor","OperationMapper","GraphExecutor","ResourceManager","TFHUB_SEARCH_PARAM","DEFAULT_MODEL_NAME","GraphModel","constructor","modelUrl","loadOptions","version","resourceManager","modelVersion","inputNodes","executor","outputNodes","inputs","outputs","weights","weightMap","metadata","artifacts","userDefinedMetadata","modelSignature","signature","findIOHandler","path","load","handler","requestInit","browserHTTPRequest","handlers","getLoadHandlers","length","push","Error","loadSync","graph","modelTopology","versions","producer","minConsumer","decodeWeights","weightData","weightSpecs","Instance","transformGraph","convertTensorMapToTensorsMap","modelInitializer","node","initializer","executeAsync","save","handlerOrURL","config","getSaveHandlers","predict","execute","normalizeInputs","Array","isArray","reduce","map","inputName","i","normalizeOutputs","result","Object","keys","newMap","key","dispose","loadGraphModel","options","fromTFHub","endsWith","model"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { io, Tensor } from '@tensorflow/tfjs-core';\nimport { OperationMapper } from '../operations/operation_mapper';\nimport { GraphExecutor } from './graph_executor';\nimport { ResourceManager } from './resource_manager';\nexport const TFHUB_SEARCH_PARAM = '?tfjs-format=file';\nexport const DEFAULT_MODEL_NAME = 'model.json';\n/**\n * A `tf.GraphModel` is a directed, acyclic graph built from a\n * SavedModel GraphDef and allows inference execution.\n *\n * A `tf.GraphModel` can only be created by loading from a model converted from\n * a [TensorFlow SavedModel](https://www.tensorflow.org/guide/saved_model) using\n * the command line converter tool and loaded via `tf.loadGraphModel`.\n *\n * @doc {heading: 'Models', subheading: 'Classes'}\n */\nexport class GraphModel {\n    /**\n     * @param modelUrl url for the model, or an `io.IOHandler`.\n     * @param weightManifestUrl url for the weight file generated by\n     * scripts/convert.py script.\n     * @param requestOption options for Request, which allows to send credentials\n     * and custom headers.\n     * @param onProgress Optional, progress callback function, fired periodically\n     * before the load is completed.\n     */\n    constructor(modelUrl, loadOptions = {}) {\n        this.modelUrl = modelUrl;\n        this.loadOptions = loadOptions;\n        this.version = 'n/a';\n        if (loadOptions == null) {\n            this.loadOptions = {};\n        }\n        this.resourceManager = new ResourceManager();\n    }\n    // Returns the version information for the tensorflow model GraphDef.\n    get modelVersion() {\n        return this.version;\n    }\n    get inputNodes() {\n        return this.executor.inputNodes;\n    }\n    get outputNodes() {\n        return this.executor.outputNodes;\n    }\n    get inputs() {\n        return this.executor.inputs;\n    }\n    get outputs() {\n        return this.executor.outputs;\n    }\n    get weights() {\n        return this.executor.weightMap;\n    }\n    get metadata() {\n        return this.artifacts.userDefinedMetadata;\n    }\n    get modelSignature() {\n        return this.signature;\n    }\n    findIOHandler() {\n        const path = this.modelUrl;\n        if (path.load != null) {\n            // Path is an IO Handler.\n            this.handler = path;\n        }\n        else if (this.loadOptions.requestInit != null) {\n            this.handler = io.browserHTTPRequest(path, this.loadOptions);\n        }\n        else {\n            const handlers = io.getLoadHandlers(path, this.loadOptions);\n            if (handlers.length === 0) {\n                // For backward compatibility: if no load handler can be found,\n                // assume it is a relative http path.\n                handlers.push(io.browserHTTPRequest(path, this.loadOptions));\n            }\n            else if (handlers.length > 1) {\n                throw new Error(`Found more than one (${handlers.length}) load handlers for ` +\n                    `URL '${[path]}'`);\n            }\n            this.handler = handlers[0];\n        }\n    }\n    /**\n     * Loads the model and weight files, construct the in memory weight map and\n     * compile the inference graph.\n     */\n    async load() {\n        this.findIOHandler();\n        if (this.handler.load == null) {\n            throw new Error('Cannot proceed with model loading because the IOHandler provided ' +\n                'does not have the `load` method implemented.');\n        }\n        const artifacts = await this.handler.load();\n        return this.loadSync(artifacts);\n    }\n    /**\n     * Synchronously construct the in memory weight map and\n     * compile the inference graph. Also initialize hashtable if any.\n     *\n     * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}\n     */\n    loadSync(artifacts) {\n        this.artifacts = artifacts;\n        const graph = this.artifacts.modelTopology;\n        let signature;\n        if (this.artifacts.userDefinedMetadata != null &&\n            this.artifacts.userDefinedMetadata.signature != null) {\n            signature = // tslint:disable-next-line:no-any\n                this.artifacts.userDefinedMetadata.signature;\n        }\n        else {\n            signature = this.artifacts.signature;\n        }\n        this.signature = signature;\n        this.version = `${graph.versions.producer}.${graph.versions.minConsumer}`;\n        const weightMap = io.decodeWeights(this.artifacts.weightData, this.artifacts.weightSpecs);\n        this.executor = new GraphExecutor(OperationMapper.Instance.transformGraph(graph, this.signature));\n        this.executor.weightMap = this.convertTensorMapToTensorsMap(weightMap);\n        // Attach a model-level resourceManager to each executor to share resources,\n        // such as `HashTable`.\n        this.executor.resourceManager = this.resourceManager;\n        if (artifacts.modelInitializer != null &&\n            artifacts.modelInitializer.node != null) {\n            const initializer = OperationMapper.Instance.transformGraph(artifacts.modelInitializer);\n            this.initializer = new GraphExecutor(initializer);\n            this.initializer.weightMap = this.executor.weightMap;\n            // Attach a model-level resourceManager to the initializer, the\n            // hashTables created from when executing the initializer will be stored\n            // in the resourceManager.\n            this.initializer.resourceManager = this.resourceManager;\n            this.initializer.executeAsync({}, []);\n        }\n        return true;\n    }\n    /**\n     * Save the configuration and/or weights of the GraphModel.\n     *\n     * An `IOHandler` is an object that has a `save` method of the proper\n     * signature defined. The `save` method manages the storing or\n     * transmission of serialized data (\"artifacts\") that represent the\n     * model's topology and weights onto or via a specific medium, such as\n     * file downloads, local storage, IndexedDB in the web browser and HTTP\n     * requests to a server. TensorFlow.js provides `IOHandler`\n     * implementations for a number of frequently used saving mediums, such as\n     * `tf.io.browserDownloads` and `tf.io.browserLocalStorage`. See `tf.io`\n     * for more details.\n     *\n     * This method also allows you to refer to certain types of `IOHandler`s\n     * as URL-like string shortcuts, such as 'localstorage://' and\n     * 'indexeddb://'.\n     *\n     * Example 1: Save `model`'s topology and weights to browser [local\n     * storage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage);\n     * then load it back.\n     *\n     * ```js\n     * const modelUrl =\n     *    'https://storage.googleapis.com/tfjs-models/savedmodel/mobilenet_v2_1.0_224/model.json';\n     * const model = await tf.loadGraphModel(modelUrl);\n     * const zeros = tf.zeros([1, 224, 224, 3]);\n     * model.predict(zeros).print();\n     *\n     * const saveResults = await model.save('localstorage://my-model-1');\n     *\n     * const loadedModel = await tf.loadGraphModel('localstorage://my-model-1');\n     * console.log('Prediction from loaded model:');\n     * model.predict(zeros).print();\n     * ```\n     *\n     * @param handlerOrURL An instance of `IOHandler` or a URL-like,\n     * scheme-based string shortcut for `IOHandler`.\n     * @param config Options for saving the model.\n     * @returns A `Promise` of `SaveResult`, which summarizes the result of\n     * the saving, such as byte sizes of the saved artifacts for the model's\n     *   topology and weight values.\n     *\n     * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}\n     */\n    async save(handlerOrURL, config) {\n        if (typeof handlerOrURL === 'string') {\n            const handlers = io.getSaveHandlers(handlerOrURL);\n            if (handlers.length === 0) {\n                throw new Error(`Cannot find any save handlers for URL '${handlerOrURL}'`);\n            }\n            else if (handlers.length > 1) {\n                throw new Error(`Found more than one (${handlers.length}) save handlers for ` +\n                    `URL '${handlerOrURL}'`);\n            }\n            handlerOrURL = handlers[0];\n        }\n        if (handlerOrURL.save == null) {\n            throw new Error('GraphModel.save() cannot proceed because the IOHandler ' +\n                'provided does not have the `save` attribute defined.');\n        }\n        return handlerOrURL.save(this.artifacts);\n    }\n    /**\n     * Execute the inference for the input tensors.\n     *\n     * @param input The input tensors, when there is single input for the model,\n     * inputs param should be a `tf.Tensor`. For models with mutliple inputs,\n     * inputs params should be in either `tf.Tensor`[] if the input order is\n     * fixed, or otherwise NamedTensorMap format.\n     *\n     * For model with multiple inputs, we recommend you use NamedTensorMap as the\n     * input type, if you use `tf.Tensor`[], the order of the array needs to\n     * follow the\n     * order of inputNodes array. @see {@link GraphModel.inputNodes}\n     *\n     * You can also feed any intermediate nodes using the NamedTensorMap as the\n     * input type. For example, given the graph\n     *    InputNode => Intermediate => OutputNode,\n     * you can execute the subgraph Intermediate => OutputNode by calling\n     *    model.execute('IntermediateNode' : tf.tensor(...));\n     *\n     * This is useful for models that uses tf.dynamic_rnn, where the intermediate\n     * state needs to be fed manually.\n     *\n     * For batch inference execution, the tensors for each input need to be\n     * concatenated together. For example with mobilenet, the required input shape\n     * is [1, 244, 244, 3], which represents the [batch, height, width, channel].\n     * If we are provide a batched data of 100 images, the input tensor should be\n     * in the shape of [100, 244, 244, 3].\n     *\n     * @param config Prediction configuration for specifying the batch size and\n     * output node names. Currently the batch size option is ignored for graph\n     * model.\n     *\n     * @returns Inference result tensors. The output would be single `tf.Tensor`\n     * if model has single output node, otherwise Tensor[] or NamedTensorMap[]\n     * will be returned for model with multiple outputs.\n     *\n     * @doc {heading: 'Models', subheading: 'Classes'}\n     */\n    predict(inputs, config) {\n        return this.execute(inputs, this.outputNodes);\n    }\n    normalizeInputs(inputs) {\n        if (!(inputs instanceof Tensor) && !Array.isArray(inputs)) {\n            // The input is already a NamedTensorMap.\n            return inputs;\n        }\n        inputs = Array.isArray(inputs) ? inputs : [inputs];\n        if (inputs.length !== this.inputNodes.length) {\n            throw new Error('Input tensor count mismatch,' +\n                `the graph model has ${this.inputNodes.length} placeholders, ` +\n                `while there are ${inputs.length} input tensors.`);\n        }\n        return this.inputNodes.reduce((map, inputName, i) => {\n            map[inputName] = inputs[i];\n            return map;\n        }, {});\n    }\n    normalizeOutputs(outputs) {\n        outputs = outputs || this.outputNodes;\n        return !Array.isArray(outputs) ? [outputs] : outputs;\n    }\n    /**\n     * Executes inference for the model for given input tensors.\n     * @param inputs tensor, tensor array or tensor map of the inputs for the\n     * model, keyed by the input node names.\n     * @param outputs output node name from the Tensorflow model, if no\n     * outputs are specified, the default outputs of the model would be used.\n     * You can inspect intermediate nodes of the model by adding them to the\n     * outputs array.\n     *\n     * @returns A single tensor if provided with a single output or no outputs\n     * are provided and there is only one default output, otherwise return a\n     * tensor array. The order of the tensor array is the same as the outputs\n     * if provided, otherwise the order of outputNodes attribute of the model.\n     *\n     * @doc {heading: 'Models', subheading: 'Classes'}\n     */\n    execute(inputs, outputs) {\n        inputs = this.normalizeInputs(inputs);\n        outputs = this.normalizeOutputs(outputs);\n        const result = this.executor.execute(inputs, outputs);\n        return result.length > 1 ? result : result[0];\n    }\n    /**\n     * Executes inference for the model for given input tensors in async\n     * fashion, use this method when your model contains control flow ops.\n     * @param inputs tensor, tensor array or tensor map of the inputs for the\n     * model, keyed by the input node names.\n     * @param outputs output node name from the Tensorflow model, if no outputs\n     * are specified, the default outputs of the model would be used. You can\n     * inspect intermediate nodes of the model by adding them to the outputs\n     * array.\n     *\n     * @returns A Promise of single tensor if provided with a single output or\n     * no outputs are provided and there is only one default output, otherwise\n     * return a tensor map.\n     *\n     * @doc {heading: 'Models', subheading: 'Classes'}\n     */\n    async executeAsync(inputs, outputs) {\n        inputs = this.normalizeInputs(inputs);\n        outputs = this.normalizeOutputs(outputs);\n        const result = await this.executor.executeAsync(inputs, outputs);\n        return result.length > 1 ? result : result[0];\n    }\n    convertTensorMapToTensorsMap(map) {\n        return Object.keys(map).reduce((newMap, key) => {\n            newMap[key] = [map[key]];\n            return newMap;\n        }, {});\n    }\n    /**\n     * Releases the memory used by the weight tensors and resourceManager.\n     *\n     * @doc {heading: 'Models', subheading: 'Classes'}\n     */\n    dispose() {\n        this.executor.dispose();\n        if (this.initializer) {\n            this.initializer.dispose();\n        }\n        this.resourceManager.dispose();\n    }\n}\n/**\n * Load a graph model given a URL to the model definition.\n *\n * Example of loading MobileNetV2 from a URL and making a prediction with a\n * zeros input:\n *\n * ```js\n * const modelUrl =\n *    'https://storage.googleapis.com/tfjs-models/savedmodel/mobilenet_v2_1.0_224/model.json';\n * const model = await tf.loadGraphModel(modelUrl);\n * const zeros = tf.zeros([1, 224, 224, 3]);\n * model.predict(zeros).print();\n * ```\n *\n * Example of loading MobileNetV2 from a TF Hub URL and making a prediction with\n * a zeros input:\n *\n * ```js\n * const modelUrl =\n *    'https://tfhub.dev/google/imagenet/mobilenet_v2_140_224/classification/2';\n * const model = await tf.loadGraphModel(modelUrl, {fromTFHub: true});\n * const zeros = tf.zeros([1, 224, 224, 3]);\n * model.predict(zeros).print();\n * ```\n * @param modelUrl The url or an `io.IOHandler` that loads the model.\n * @param options Options for the HTTP request, which allows to send credentials\n *    and custom headers.\n *\n * @doc {heading: 'Models', subheading: 'Loading'}\n */\nexport async function loadGraphModel(modelUrl, options = {}) {\n    if (modelUrl == null) {\n        throw new Error('modelUrl in loadGraphModel() cannot be null. Please provide a url ' +\n            'or an IOHandler that loads the model');\n    }\n    if (options == null) {\n        options = {};\n    }\n    if (options.fromTFHub) {\n        if (modelUrl.load == null) {\n            if (!modelUrl.endsWith('/')) {\n                modelUrl = modelUrl + '/';\n            }\n            modelUrl = `${modelUrl}${DEFAULT_MODEL_NAME}${TFHUB_SEARCH_PARAM}`;\n        }\n    }\n    const model = new GraphModel(modelUrl, options);\n    await model.load();\n    return model;\n}\n"]},"metadata":{},"sourceType":"module"}
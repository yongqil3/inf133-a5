{"ast":null,"code":"import _asyncToGenerator from \"/Users/ryanliang/Downloads/main_movir_picker/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { nonMaxSuppressionV5Impl } from '../../backends/non_max_suppression_impl';\nimport { convertToTensor } from '../../tensor_util_env';\nimport { nonMaxSuppSanityCheck } from '../nonmax_util';\nimport { tensor1d } from '../tensor1d';\n/**\n * Asynchronously performs non maximum suppression of bounding boxes based on\n * iou (intersection over union).\n *\n * This op also supports a Soft-NMS mode (c.f.\n * Bodla et al, https://arxiv.org/abs/1704.04503) where boxes reduce the score\n * of other overlapping boxes, therefore favoring different regions of the image\n * with high scores. To enable this Soft-NMS mode, set the `softNmsSigma`\n * parameter to be larger than 0.\n *\n * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is\n *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of\n *     the bounding box.\n * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.\n * @param maxOutputSize The maximum number of boxes to be selected.\n * @param iouThreshold A float representing the threshold for deciding whether\n *     boxes overlap too much with respect to IOU. Must be between [0, 1].\n *     Defaults to 0.5 (50% box overlap).\n * @param scoreThreshold A threshold for deciding when to remove boxes based\n *     on score. Defaults to -inf, which means any score is accepted.\n * @param softNmsSigma A float representing the sigma parameter for Soft NMS.\n *     When sigma is 0, it falls back to nonMaxSuppression.\n * @return A map with the following properties:\n *     - selectedIndices: A 1D tensor with the selected box indices.\n *     - selectedScores: A 1D tensor with the corresponding scores for each\n *       selected box.\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\n\nfunction nonMaxSuppressionWithScoreAsync_(_x, _x2, _x3) {\n  return _nonMaxSuppressionWithScoreAsync_.apply(this, arguments);\n}\n\nfunction _nonMaxSuppressionWithScoreAsync_() {\n  _nonMaxSuppressionWithScoreAsync_ = _asyncToGenerator(function* (boxes, scores, maxOutputSize, iouThreshold = 0.5, scoreThreshold = Number.NEGATIVE_INFINITY, softNmsSigma = 0.0) {\n    const $boxes = convertToTensor(boxes, 'boxes', 'nonMaxSuppressionAsync');\n    const $scores = convertToTensor(scores, 'scores', 'nonMaxSuppressionAsync');\n    const params = nonMaxSuppSanityCheck($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma);\n    maxOutputSize = params.maxOutputSize;\n    iouThreshold = params.iouThreshold;\n    scoreThreshold = params.scoreThreshold;\n    softNmsSigma = params.softNmsSigma;\n    const boxesAndScores = yield Promise.all([$boxes.data(), $scores.data()]);\n    const boxesVals = boxesAndScores[0];\n    const scoresVals = boxesAndScores[1]; // We call a cpu based impl directly with the typedarray data  here rather\n    // than a kernel because all kernels are synchronous (and thus cannot await\n    // .data()).\n\n    const {\n      selectedIndices,\n      selectedScores\n    } = nonMaxSuppressionV5Impl(boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma);\n\n    if ($boxes !== boxes) {\n      $boxes.dispose();\n    }\n\n    if ($scores !== scores) {\n      $scores.dispose();\n    }\n\n    return {\n      selectedIndices: tensor1d(selectedIndices, 'int32'),\n      selectedScores: tensor1d(selectedScores)\n    };\n  });\n  return _nonMaxSuppressionWithScoreAsync_.apply(this, arguments);\n}\n\nexport const nonMaxSuppressionWithScoreAsync = nonMaxSuppressionWithScoreAsync_;","map":{"version":3,"sources":["/Users/ryanliang/Downloads/main_movir_picker/node_modules/@tensorflow/tfjs-core/dist/ops/image/non_max_suppression_with_score_async.js"],"names":["nonMaxSuppressionV5Impl","convertToTensor","nonMaxSuppSanityCheck","tensor1d","nonMaxSuppressionWithScoreAsync_","boxes","scores","maxOutputSize","iouThreshold","scoreThreshold","Number","NEGATIVE_INFINITY","softNmsSigma","$boxes","$scores","params","boxesAndScores","Promise","all","data","boxesVals","scoresVals","selectedIndices","selectedScores","dispose","nonMaxSuppressionWithScoreAsync"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,uBAAT,QAAwC,yCAAxC;AACA,SAASC,eAAT,QAAgC,uBAAhC;AACA,SAASC,qBAAT,QAAsC,gBAAtC;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;SACeC,gC;;;;;wDAAf,WAAgDC,KAAhD,EAAuDC,MAAvD,EAA+DC,aAA/D,EAA8EC,YAAY,GAAG,GAA7F,EAAkGC,cAAc,GAAGC,MAAM,CAACC,iBAA1H,EAA6IC,YAAY,GAAG,GAA5J,EAAiK;AAC7J,UAAMC,MAAM,GAAGZ,eAAe,CAACI,KAAD,EAAQ,OAAR,EAAiB,wBAAjB,CAA9B;AACA,UAAMS,OAAO,GAAGb,eAAe,CAACK,MAAD,EAAS,QAAT,EAAmB,wBAAnB,CAA/B;AACA,UAAMS,MAAM,GAAGb,qBAAqB,CAACW,MAAD,EAASC,OAAT,EAAkBP,aAAlB,EAAiCC,YAAjC,EAA+CC,cAA/C,EAA+DG,YAA/D,CAApC;AACAL,IAAAA,aAAa,GAAGQ,MAAM,CAACR,aAAvB;AACAC,IAAAA,YAAY,GAAGO,MAAM,CAACP,YAAtB;AACAC,IAAAA,cAAc,GAAGM,MAAM,CAACN,cAAxB;AACAG,IAAAA,YAAY,GAAGG,MAAM,CAACH,YAAtB;AACA,UAAMI,cAAc,SAASC,OAAO,CAACC,GAAR,CAAY,CAACL,MAAM,CAACM,IAAP,EAAD,EAAgBL,OAAO,CAACK,IAAR,EAAhB,CAAZ,CAA7B;AACA,UAAMC,SAAS,GAAGJ,cAAc,CAAC,CAAD,CAAhC;AACA,UAAMK,UAAU,GAAGL,cAAc,CAAC,CAAD,CAAjC,CAV6J,CAW7J;AACA;AACA;;AACA,UAAM;AAAEM,MAAAA,eAAF;AAAmBC,MAAAA;AAAnB,QAAsCvB,uBAAuB,CAACoB,SAAD,EAAYC,UAAZ,EAAwBd,aAAxB,EAAuCC,YAAvC,EAAqDC,cAArD,EAAqEG,YAArE,CAAnE;;AACA,QAAIC,MAAM,KAAKR,KAAf,EAAsB;AAClBQ,MAAAA,MAAM,CAACW,OAAP;AACH;;AACD,QAAIV,OAAO,KAAKR,MAAhB,EAAwB;AACpBQ,MAAAA,OAAO,CAACU,OAAR;AACH;;AACD,WAAO;AACHF,MAAAA,eAAe,EAAEnB,QAAQ,CAACmB,eAAD,EAAkB,OAAlB,CADtB;AAEHC,MAAAA,cAAc,EAAEpB,QAAQ,CAACoB,cAAD;AAFrB,KAAP;AAIH,G;;;;AACD,OAAO,MAAME,+BAA+B,GAAGrB,gCAAxC","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { nonMaxSuppressionV5Impl } from '../../backends/non_max_suppression_impl';\nimport { convertToTensor } from '../../tensor_util_env';\nimport { nonMaxSuppSanityCheck } from '../nonmax_util';\nimport { tensor1d } from '../tensor1d';\n/**\n * Asynchronously performs non maximum suppression of bounding boxes based on\n * iou (intersection over union).\n *\n * This op also supports a Soft-NMS mode (c.f.\n * Bodla et al, https://arxiv.org/abs/1704.04503) where boxes reduce the score\n * of other overlapping boxes, therefore favoring different regions of the image\n * with high scores. To enable this Soft-NMS mode, set the `softNmsSigma`\n * parameter to be larger than 0.\n *\n * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is\n *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of\n *     the bounding box.\n * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.\n * @param maxOutputSize The maximum number of boxes to be selected.\n * @param iouThreshold A float representing the threshold for deciding whether\n *     boxes overlap too much with respect to IOU. Must be between [0, 1].\n *     Defaults to 0.5 (50% box overlap).\n * @param scoreThreshold A threshold for deciding when to remove boxes based\n *     on score. Defaults to -inf, which means any score is accepted.\n * @param softNmsSigma A float representing the sigma parameter for Soft NMS.\n *     When sigma is 0, it falls back to nonMaxSuppression.\n * @return A map with the following properties:\n *     - selectedIndices: A 1D tensor with the selected box indices.\n *     - selectedScores: A 1D tensor with the corresponding scores for each\n *       selected box.\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\nasync function nonMaxSuppressionWithScoreAsync_(boxes, scores, maxOutputSize, iouThreshold = 0.5, scoreThreshold = Number.NEGATIVE_INFINITY, softNmsSigma = 0.0) {\n    const $boxes = convertToTensor(boxes, 'boxes', 'nonMaxSuppressionAsync');\n    const $scores = convertToTensor(scores, 'scores', 'nonMaxSuppressionAsync');\n    const params = nonMaxSuppSanityCheck($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma);\n    maxOutputSize = params.maxOutputSize;\n    iouThreshold = params.iouThreshold;\n    scoreThreshold = params.scoreThreshold;\n    softNmsSigma = params.softNmsSigma;\n    const boxesAndScores = await Promise.all([$boxes.data(), $scores.data()]);\n    const boxesVals = boxesAndScores[0];\n    const scoresVals = boxesAndScores[1];\n    // We call a cpu based impl directly with the typedarray data  here rather\n    // than a kernel because all kernels are synchronous (and thus cannot await\n    // .data()).\n    const { selectedIndices, selectedScores } = nonMaxSuppressionV5Impl(boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma);\n    if ($boxes !== boxes) {\n        $boxes.dispose();\n    }\n    if ($scores !== scores) {\n        $scores.dispose();\n    }\n    return {\n        selectedIndices: tensor1d(selectedIndices, 'int32'),\n        selectedScores: tensor1d(selectedScores)\n    };\n}\nexport const nonMaxSuppressionWithScoreAsync = nonMaxSuppressionWithScoreAsync_;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _asyncToGenerator from \"/Users/ryanliang/Downloads/main_movir_picker/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport '../flags';\nimport { env } from '../environment';\nimport { assert } from '../util';\nimport { arrayBufferToBase64String, base64StringToArrayBuffer, getModelArtifactsInfoForJSON } from './io_utils';\nimport { IORouterRegistry } from './router_registry';\nconst PATH_SEPARATOR = '/';\nconst PATH_PREFIX = 'tensorflowjs_models';\nconst INFO_SUFFIX = 'info';\nconst MODEL_TOPOLOGY_SUFFIX = 'model_topology';\nconst WEIGHT_SPECS_SUFFIX = 'weight_specs';\nconst WEIGHT_DATA_SUFFIX = 'weight_data';\nconst MODEL_METADATA_SUFFIX = 'model_metadata';\n/**\n * Purge all tensorflow.js-saved model artifacts from local storage.\n *\n * @returns Paths of the models purged.\n */\n\nexport function purgeLocalStorageArtifacts() {\n  if (!env().getBool('IS_BROWSER') || typeof window === 'undefined' || typeof window.localStorage === 'undefined') {\n    throw new Error('purgeLocalStorageModels() cannot proceed because local storage is ' + 'unavailable in the current environment.');\n  }\n\n  const LS = window.localStorage;\n  const purgedModelPaths = [];\n\n  for (let i = 0; i < LS.length; ++i) {\n    const key = LS.key(i);\n    const prefix = PATH_PREFIX + PATH_SEPARATOR;\n\n    if (key.startsWith(prefix) && key.length > prefix.length) {\n      LS.removeItem(key);\n      const modelName = getModelPathFromKey(key);\n\n      if (purgedModelPaths.indexOf(modelName) === -1) {\n        purgedModelPaths.push(modelName);\n      }\n    }\n  }\n\n  return purgedModelPaths;\n}\n\nfunction getModelKeys(path) {\n  return {\n    info: [PATH_PREFIX, path, INFO_SUFFIX].join(PATH_SEPARATOR),\n    topology: [PATH_PREFIX, path, MODEL_TOPOLOGY_SUFFIX].join(PATH_SEPARATOR),\n    weightSpecs: [PATH_PREFIX, path, WEIGHT_SPECS_SUFFIX].join(PATH_SEPARATOR),\n    weightData: [PATH_PREFIX, path, WEIGHT_DATA_SUFFIX].join(PATH_SEPARATOR),\n    modelMetadata: [PATH_PREFIX, path, MODEL_METADATA_SUFFIX].join(PATH_SEPARATOR)\n  };\n}\n/**\n * Get model path from a local-storage key.\n *\n * E.g., 'tensorflowjs_models/my/model/1/info' --> 'my/model/1'\n *\n * @param key\n */\n\n\nfunction getModelPathFromKey(key) {\n  const items = key.split(PATH_SEPARATOR);\n\n  if (items.length < 3) {\n    throw new Error(`Invalid key format: ${key}`);\n  }\n\n  return items.slice(1, items.length - 1).join(PATH_SEPARATOR);\n}\n\nfunction maybeStripScheme(key) {\n  return key.startsWith(BrowserLocalStorage.URL_SCHEME) ? key.slice(BrowserLocalStorage.URL_SCHEME.length) : key;\n}\n/**\n * IOHandler subclass: Browser Local Storage.\n *\n * See the doc string to `browserLocalStorage` for more details.\n */\n\n\nexport class BrowserLocalStorage {\n  constructor(modelPath) {\n    if (!env().getBool('IS_BROWSER') || typeof window === 'undefined' || typeof window.localStorage === 'undefined') {\n      // TODO(cais): Add more info about what IOHandler subtypes are\n      // available.\n      //   Maybe point to a doc page on the web and/or automatically determine\n      //   the available IOHandlers and print them in the error message.\n      throw new Error('The current environment does not support local storage.');\n    }\n\n    this.LS = window.localStorage;\n\n    if (modelPath == null || !modelPath) {\n      throw new Error('For local storage, modelPath must not be null, undefined or empty.');\n    }\n\n    this.modelPath = modelPath;\n    this.keys = getModelKeys(this.modelPath);\n  }\n  /**\n   * Save model artifacts to browser local storage.\n   *\n   * See the documentation to `browserLocalStorage` for details on the saved\n   * artifacts.\n   *\n   * @param modelArtifacts The model artifacts to be stored.\n   * @returns An instance of SaveResult.\n   */\n\n\n  save(modelArtifacts) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n        throw new Error('BrowserLocalStorage.save() does not support saving model topology ' + 'in binary formats yet.');\n      } else {\n        const topology = JSON.stringify(modelArtifacts.modelTopology);\n        const weightSpecs = JSON.stringify(modelArtifacts.weightSpecs);\n        const modelArtifactsInfo = getModelArtifactsInfoForJSON(modelArtifacts);\n\n        try {\n          _this.LS.setItem(_this.keys.info, JSON.stringify(modelArtifactsInfo));\n\n          _this.LS.setItem(_this.keys.topology, topology);\n\n          _this.LS.setItem(_this.keys.weightSpecs, weightSpecs);\n\n          _this.LS.setItem(_this.keys.weightData, arrayBufferToBase64String(modelArtifacts.weightData));\n\n          const result = {\n            format: modelArtifacts.format,\n            generatedBy: modelArtifacts.generatedBy,\n            convertedBy: modelArtifacts.convertedBy\n          };\n\n          if (modelArtifacts.signature != null) {\n            result.signature = modelArtifacts.signature;\n          }\n\n          if (modelArtifacts.userDefinedMetadata != null) {\n            result.userDefinedMetadata = modelArtifacts.userDefinedMetadata;\n          }\n\n          if (modelArtifacts.modelInitializer != null) {\n            result.modelInitializer = modelArtifacts.modelInitializer;\n          }\n\n          _this.LS.setItem(_this.keys.modelMetadata, JSON.stringify(result));\n\n          return {\n            modelArtifactsInfo\n          };\n        } catch (err) {\n          // If saving failed, clean up all items saved so far.\n          _this.LS.removeItem(_this.keys.info);\n\n          _this.LS.removeItem(_this.keys.topology);\n\n          _this.LS.removeItem(_this.keys.weightSpecs);\n\n          _this.LS.removeItem(_this.keys.weightData);\n\n          _this.LS.removeItem(_this.keys.modelMetadata);\n\n          throw new Error(`Failed to save model '${_this.modelPath}' to local storage: ` + `size quota being exceeded is a possible cause of this failure: ` + `modelTopologyBytes=${modelArtifactsInfo.modelTopologyBytes}, ` + `weightSpecsBytes=${modelArtifactsInfo.weightSpecsBytes}, ` + `weightDataBytes=${modelArtifactsInfo.weightDataBytes}.`);\n        }\n      }\n    })();\n  }\n  /**\n   * Load a model from local storage.\n   *\n   * See the documentation to `browserLocalStorage` for details on the saved\n   * artifacts.\n   *\n   * @returns The loaded model (if loading succeeds).\n   */\n\n\n  load() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const info = JSON.parse(_this2.LS.getItem(_this2.keys.info));\n\n      if (info == null) {\n        throw new Error(`In local storage, there is no model with name '${_this2.modelPath}'`);\n      }\n\n      if (info.modelTopologyType !== 'JSON') {\n        throw new Error('BrowserLocalStorage does not support loading non-JSON model ' + 'topology yet.');\n      }\n\n      const out = {}; // Load topology.\n\n      const topology = JSON.parse(_this2.LS.getItem(_this2.keys.topology));\n\n      if (topology == null) {\n        throw new Error(`In local storage, the topology of model '${_this2.modelPath}' ` + `is missing.`);\n      }\n\n      out.modelTopology = topology; // Load weight specs.\n\n      const weightSpecs = JSON.parse(_this2.LS.getItem(_this2.keys.weightSpecs));\n\n      if (weightSpecs == null) {\n        throw new Error(`In local storage, the weight specs of model '${_this2.modelPath}' ` + `are missing.`);\n      }\n\n      out.weightSpecs = weightSpecs; // Load meta-data fields.\n\n      const metadataString = _this2.LS.getItem(_this2.keys.modelMetadata);\n\n      if (metadataString != null) {\n        const metadata = JSON.parse(metadataString);\n        out.format = metadata['format'];\n        out.generatedBy = metadata['generatedBy'];\n        out.convertedBy = metadata['convertedBy'];\n\n        if (metadata['signature'] != null) {\n          out.signature = metadata['signature'];\n        }\n\n        if (metadata['userDefinedMetadata'] != null) {\n          out.userDefinedMetadata = metadata['userDefinedMetadata'];\n        }\n\n        if (metadata['modelInitializer'] != null) {\n          out.modelInitializer = metadata['modelInitializer'];\n        }\n      } // Load weight data.\n\n\n      const weightDataBase64 = _this2.LS.getItem(_this2.keys.weightData);\n\n      if (weightDataBase64 == null) {\n        throw new Error(`In local storage, the binary weight values of model ` + `'${_this2.modelPath}' are missing.`);\n      }\n\n      out.weightData = base64StringToArrayBuffer(weightDataBase64);\n      return out;\n    })();\n  }\n\n}\nBrowserLocalStorage.URL_SCHEME = 'localstorage://';\nexport const localStorageRouter = url => {\n  if (!env().getBool('IS_BROWSER')) {\n    return null;\n  } else {\n    if (!Array.isArray(url) && url.startsWith(BrowserLocalStorage.URL_SCHEME)) {\n      return browserLocalStorage(url.slice(BrowserLocalStorage.URL_SCHEME.length));\n    } else {\n      return null;\n    }\n  }\n};\nIORouterRegistry.registerSaveRouter(localStorageRouter);\nIORouterRegistry.registerLoadRouter(localStorageRouter);\n/**\n * Factory function for local storage IOHandler.\n *\n * This `IOHandler` supports both `save` and `load`.\n *\n * For each model's saved artifacts, four items are saved to local storage.\n *   - `${PATH_SEPARATOR}/${modelPath}/info`: Contains meta-info about the\n *     model, such as date saved, type of the topology, size in bytes, etc.\n *   - `${PATH_SEPARATOR}/${modelPath}/topology`: Model topology. For Keras-\n *     style models, this is a stringized JSON.\n *   - `${PATH_SEPARATOR}/${modelPath}/weight_specs`: Weight specs of the\n *     model, can be used to decode the saved binary weight values (see\n *     item below).\n *   - `${PATH_SEPARATOR}/${modelPath}/weight_data`: Concatenated binary\n *     weight values, stored as a base64-encoded string.\n *\n * Saving may throw an `Error` if the total size of the artifacts exceed the\n * browser-specific quota.\n *\n * @param modelPath A unique identifier for the model to be saved. Must be a\n *   non-empty string.\n * @returns An instance of `IOHandler`, which can be used with, e.g.,\n *   `tf.Model.save`.\n */\n\nexport function browserLocalStorage(modelPath) {\n  return new BrowserLocalStorage(modelPath);\n}\nexport class BrowserLocalStorageManager {\n  constructor() {\n    assert(env().getBool('IS_BROWSER'), () => 'Current environment is not a web browser');\n    assert(typeof window === 'undefined' || typeof window.localStorage !== 'undefined', () => 'Current browser does not appear to support localStorage');\n    this.LS = window.localStorage;\n  }\n\n  listModels() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      const out = {};\n      const prefix = PATH_PREFIX + PATH_SEPARATOR;\n      const suffix = PATH_SEPARATOR + INFO_SUFFIX;\n\n      for (let i = 0; i < _this3.LS.length; ++i) {\n        const key = _this3.LS.key(i);\n\n        if (key.startsWith(prefix) && key.endsWith(suffix)) {\n          const modelPath = getModelPathFromKey(key);\n          out[modelPath] = JSON.parse(_this3.LS.getItem(key));\n        }\n      }\n\n      return out;\n    })();\n  }\n\n  removeModel(path) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      path = maybeStripScheme(path);\n      const keys = getModelKeys(path);\n\n      if (_this4.LS.getItem(keys.info) == null) {\n        throw new Error(`Cannot find model at path '${path}'`);\n      }\n\n      const info = JSON.parse(_this4.LS.getItem(keys.info));\n\n      _this4.LS.removeItem(keys.info);\n\n      _this4.LS.removeItem(keys.topology);\n\n      _this4.LS.removeItem(keys.weightSpecs);\n\n      _this4.LS.removeItem(keys.weightData);\n\n      return info;\n    })();\n  }\n\n}","map":{"version":3,"sources":["/Users/ryanliang/Downloads/main_movir_picker/node_modules/@tensorflow/tfjs-core/dist/io/local_storage.js"],"names":["env","assert","arrayBufferToBase64String","base64StringToArrayBuffer","getModelArtifactsInfoForJSON","IORouterRegistry","PATH_SEPARATOR","PATH_PREFIX","INFO_SUFFIX","MODEL_TOPOLOGY_SUFFIX","WEIGHT_SPECS_SUFFIX","WEIGHT_DATA_SUFFIX","MODEL_METADATA_SUFFIX","purgeLocalStorageArtifacts","getBool","window","localStorage","Error","LS","purgedModelPaths","i","length","key","prefix","startsWith","removeItem","modelName","getModelPathFromKey","indexOf","push","getModelKeys","path","info","join","topology","weightSpecs","weightData","modelMetadata","items","split","slice","maybeStripScheme","BrowserLocalStorage","URL_SCHEME","constructor","modelPath","keys","save","modelArtifacts","modelTopology","ArrayBuffer","JSON","stringify","modelArtifactsInfo","setItem","result","format","generatedBy","convertedBy","signature","userDefinedMetadata","modelInitializer","err","modelTopologyBytes","weightSpecsBytes","weightDataBytes","load","parse","getItem","modelTopologyType","out","metadataString","metadata","weightDataBase64","localStorageRouter","url","Array","isArray","browserLocalStorage","registerSaveRouter","registerLoadRouter","BrowserLocalStorageManager","listModels","suffix","endsWith","removeModel"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport '../flags';\nimport { env } from '../environment';\nimport { assert } from '../util';\nimport { arrayBufferToBase64String, base64StringToArrayBuffer, getModelArtifactsInfoForJSON } from './io_utils';\nimport { IORouterRegistry } from './router_registry';\nconst PATH_SEPARATOR = '/';\nconst PATH_PREFIX = 'tensorflowjs_models';\nconst INFO_SUFFIX = 'info';\nconst MODEL_TOPOLOGY_SUFFIX = 'model_topology';\nconst WEIGHT_SPECS_SUFFIX = 'weight_specs';\nconst WEIGHT_DATA_SUFFIX = 'weight_data';\nconst MODEL_METADATA_SUFFIX = 'model_metadata';\n/**\n * Purge all tensorflow.js-saved model artifacts from local storage.\n *\n * @returns Paths of the models purged.\n */\nexport function purgeLocalStorageArtifacts() {\n    if (!env().getBool('IS_BROWSER') || typeof window === 'undefined' ||\n        typeof window.localStorage === 'undefined') {\n        throw new Error('purgeLocalStorageModels() cannot proceed because local storage is ' +\n            'unavailable in the current environment.');\n    }\n    const LS = window.localStorage;\n    const purgedModelPaths = [];\n    for (let i = 0; i < LS.length; ++i) {\n        const key = LS.key(i);\n        const prefix = PATH_PREFIX + PATH_SEPARATOR;\n        if (key.startsWith(prefix) && key.length > prefix.length) {\n            LS.removeItem(key);\n            const modelName = getModelPathFromKey(key);\n            if (purgedModelPaths.indexOf(modelName) === -1) {\n                purgedModelPaths.push(modelName);\n            }\n        }\n    }\n    return purgedModelPaths;\n}\nfunction getModelKeys(path) {\n    return {\n        info: [PATH_PREFIX, path, INFO_SUFFIX].join(PATH_SEPARATOR),\n        topology: [PATH_PREFIX, path, MODEL_TOPOLOGY_SUFFIX].join(PATH_SEPARATOR),\n        weightSpecs: [PATH_PREFIX, path, WEIGHT_SPECS_SUFFIX].join(PATH_SEPARATOR),\n        weightData: [PATH_PREFIX, path, WEIGHT_DATA_SUFFIX].join(PATH_SEPARATOR),\n        modelMetadata: [PATH_PREFIX, path, MODEL_METADATA_SUFFIX].join(PATH_SEPARATOR)\n    };\n}\n/**\n * Get model path from a local-storage key.\n *\n * E.g., 'tensorflowjs_models/my/model/1/info' --> 'my/model/1'\n *\n * @param key\n */\nfunction getModelPathFromKey(key) {\n    const items = key.split(PATH_SEPARATOR);\n    if (items.length < 3) {\n        throw new Error(`Invalid key format: ${key}`);\n    }\n    return items.slice(1, items.length - 1).join(PATH_SEPARATOR);\n}\nfunction maybeStripScheme(key) {\n    return key.startsWith(BrowserLocalStorage.URL_SCHEME) ?\n        key.slice(BrowserLocalStorage.URL_SCHEME.length) :\n        key;\n}\n/**\n * IOHandler subclass: Browser Local Storage.\n *\n * See the doc string to `browserLocalStorage` for more details.\n */\nexport class BrowserLocalStorage {\n    constructor(modelPath) {\n        if (!env().getBool('IS_BROWSER') || typeof window === 'undefined' ||\n            typeof window.localStorage === 'undefined') {\n            // TODO(cais): Add more info about what IOHandler subtypes are\n            // available.\n            //   Maybe point to a doc page on the web and/or automatically determine\n            //   the available IOHandlers and print them in the error message.\n            throw new Error('The current environment does not support local storage.');\n        }\n        this.LS = window.localStorage;\n        if (modelPath == null || !modelPath) {\n            throw new Error('For local storage, modelPath must not be null, undefined or empty.');\n        }\n        this.modelPath = modelPath;\n        this.keys = getModelKeys(this.modelPath);\n    }\n    /**\n     * Save model artifacts to browser local storage.\n     *\n     * See the documentation to `browserLocalStorage` for details on the saved\n     * artifacts.\n     *\n     * @param modelArtifacts The model artifacts to be stored.\n     * @returns An instance of SaveResult.\n     */\n    async save(modelArtifacts) {\n        if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n            throw new Error('BrowserLocalStorage.save() does not support saving model topology ' +\n                'in binary formats yet.');\n        }\n        else {\n            const topology = JSON.stringify(modelArtifacts.modelTopology);\n            const weightSpecs = JSON.stringify(modelArtifacts.weightSpecs);\n            const modelArtifactsInfo = getModelArtifactsInfoForJSON(modelArtifacts);\n            try {\n                this.LS.setItem(this.keys.info, JSON.stringify(modelArtifactsInfo));\n                this.LS.setItem(this.keys.topology, topology);\n                this.LS.setItem(this.keys.weightSpecs, weightSpecs);\n                this.LS.setItem(this.keys.weightData, arrayBufferToBase64String(modelArtifacts.weightData));\n                const result = {\n                    format: modelArtifacts.format,\n                    generatedBy: modelArtifacts.generatedBy,\n                    convertedBy: modelArtifacts.convertedBy\n                };\n                if (modelArtifacts.signature != null) {\n                    result.signature = modelArtifacts.signature;\n                }\n                if (modelArtifacts.userDefinedMetadata != null) {\n                    result.userDefinedMetadata = modelArtifacts.userDefinedMetadata;\n                }\n                if (modelArtifacts.modelInitializer != null) {\n                    result.modelInitializer = modelArtifacts.modelInitializer;\n                }\n                this.LS.setItem(this.keys.modelMetadata, JSON.stringify(result));\n                return { modelArtifactsInfo };\n            }\n            catch (err) {\n                // If saving failed, clean up all items saved so far.\n                this.LS.removeItem(this.keys.info);\n                this.LS.removeItem(this.keys.topology);\n                this.LS.removeItem(this.keys.weightSpecs);\n                this.LS.removeItem(this.keys.weightData);\n                this.LS.removeItem(this.keys.modelMetadata);\n                throw new Error(`Failed to save model '${this.modelPath}' to local storage: ` +\n                    `size quota being exceeded is a possible cause of this failure: ` +\n                    `modelTopologyBytes=${modelArtifactsInfo.modelTopologyBytes}, ` +\n                    `weightSpecsBytes=${modelArtifactsInfo.weightSpecsBytes}, ` +\n                    `weightDataBytes=${modelArtifactsInfo.weightDataBytes}.`);\n            }\n        }\n    }\n    /**\n     * Load a model from local storage.\n     *\n     * See the documentation to `browserLocalStorage` for details on the saved\n     * artifacts.\n     *\n     * @returns The loaded model (if loading succeeds).\n     */\n    async load() {\n        const info = JSON.parse(this.LS.getItem(this.keys.info));\n        if (info == null) {\n            throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);\n        }\n        if (info.modelTopologyType !== 'JSON') {\n            throw new Error('BrowserLocalStorage does not support loading non-JSON model ' +\n                'topology yet.');\n        }\n        const out = {};\n        // Load topology.\n        const topology = JSON.parse(this.LS.getItem(this.keys.topology));\n        if (topology == null) {\n            throw new Error(`In local storage, the topology of model '${this.modelPath}' ` +\n                `is missing.`);\n        }\n        out.modelTopology = topology;\n        // Load weight specs.\n        const weightSpecs = JSON.parse(this.LS.getItem(this.keys.weightSpecs));\n        if (weightSpecs == null) {\n            throw new Error(`In local storage, the weight specs of model '${this.modelPath}' ` +\n                `are missing.`);\n        }\n        out.weightSpecs = weightSpecs;\n        // Load meta-data fields.\n        const metadataString = this.LS.getItem(this.keys.modelMetadata);\n        if (metadataString != null) {\n            const metadata = JSON.parse(metadataString);\n            out.format = metadata['format'];\n            out.generatedBy = metadata['generatedBy'];\n            out.convertedBy = metadata['convertedBy'];\n            if (metadata['signature'] != null) {\n                out.signature = metadata['signature'];\n            }\n            if (metadata['userDefinedMetadata'] != null) {\n                out.userDefinedMetadata = metadata['userDefinedMetadata'];\n            }\n            if (metadata['modelInitializer'] != null) {\n                out.modelInitializer = metadata['modelInitializer'];\n            }\n        }\n        // Load weight data.\n        const weightDataBase64 = this.LS.getItem(this.keys.weightData);\n        if (weightDataBase64 == null) {\n            throw new Error(`In local storage, the binary weight values of model ` +\n                `'${this.modelPath}' are missing.`);\n        }\n        out.weightData = base64StringToArrayBuffer(weightDataBase64);\n        return out;\n    }\n}\nBrowserLocalStorage.URL_SCHEME = 'localstorage://';\nexport const localStorageRouter = (url) => {\n    if (!env().getBool('IS_BROWSER')) {\n        return null;\n    }\n    else {\n        if (!Array.isArray(url) && url.startsWith(BrowserLocalStorage.URL_SCHEME)) {\n            return browserLocalStorage(url.slice(BrowserLocalStorage.URL_SCHEME.length));\n        }\n        else {\n            return null;\n        }\n    }\n};\nIORouterRegistry.registerSaveRouter(localStorageRouter);\nIORouterRegistry.registerLoadRouter(localStorageRouter);\n/**\n * Factory function for local storage IOHandler.\n *\n * This `IOHandler` supports both `save` and `load`.\n *\n * For each model's saved artifacts, four items are saved to local storage.\n *   - `${PATH_SEPARATOR}/${modelPath}/info`: Contains meta-info about the\n *     model, such as date saved, type of the topology, size in bytes, etc.\n *   - `${PATH_SEPARATOR}/${modelPath}/topology`: Model topology. For Keras-\n *     style models, this is a stringized JSON.\n *   - `${PATH_SEPARATOR}/${modelPath}/weight_specs`: Weight specs of the\n *     model, can be used to decode the saved binary weight values (see\n *     item below).\n *   - `${PATH_SEPARATOR}/${modelPath}/weight_data`: Concatenated binary\n *     weight values, stored as a base64-encoded string.\n *\n * Saving may throw an `Error` if the total size of the artifacts exceed the\n * browser-specific quota.\n *\n * @param modelPath A unique identifier for the model to be saved. Must be a\n *   non-empty string.\n * @returns An instance of `IOHandler`, which can be used with, e.g.,\n *   `tf.Model.save`.\n */\nexport function browserLocalStorage(modelPath) {\n    return new BrowserLocalStorage(modelPath);\n}\nexport class BrowserLocalStorageManager {\n    constructor() {\n        assert(env().getBool('IS_BROWSER'), () => 'Current environment is not a web browser');\n        assert(typeof window === 'undefined' ||\n            typeof window.localStorage !== 'undefined', () => 'Current browser does not appear to support localStorage');\n        this.LS = window.localStorage;\n    }\n    async listModels() {\n        const out = {};\n        const prefix = PATH_PREFIX + PATH_SEPARATOR;\n        const suffix = PATH_SEPARATOR + INFO_SUFFIX;\n        for (let i = 0; i < this.LS.length; ++i) {\n            const key = this.LS.key(i);\n            if (key.startsWith(prefix) && key.endsWith(suffix)) {\n                const modelPath = getModelPathFromKey(key);\n                out[modelPath] = JSON.parse(this.LS.getItem(key));\n            }\n        }\n        return out;\n    }\n    async removeModel(path) {\n        path = maybeStripScheme(path);\n        const keys = getModelKeys(path);\n        if (this.LS.getItem(keys.info) == null) {\n            throw new Error(`Cannot find model at path '${path}'`);\n        }\n        const info = JSON.parse(this.LS.getItem(keys.info));\n        this.LS.removeItem(keys.info);\n        this.LS.removeItem(keys.topology);\n        this.LS.removeItem(keys.weightSpecs);\n        this.LS.removeItem(keys.weightData);\n        return info;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _asyncToGenerator from \"/Users/ryanliang/Downloads/main_movir_picker/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getGlobal } from './global_util';\nimport { tensorToString } from './tensor_format';\nimport * as util from './util';\nimport { computeStrides, toNestedArray } from './util';\n/**\n * A mutable object, similar to `tf.Tensor`, that allows users to set values\n * at locations before converting to an immutable `tf.Tensor`.\n *\n * See `tf.buffer` for creating a tensor buffer.\n *\n * @doc {heading: 'Tensors', subheading: 'Classes'}\n */\n\nexport class TensorBuffer {\n  constructor(shape, dtype, values) {\n    this.dtype = dtype;\n    this.shape = shape.slice();\n    this.size = util.sizeFromShape(shape);\n\n    if (values != null) {\n      const n = values.length;\n      util.assert(n === this.size, () => `Length of values '${n}' does not match the size ` + `inferred by the shape '${this.size}'.`);\n    }\n\n    if (dtype === 'complex64') {\n      throw new Error(`complex64 dtype TensorBuffers are not supported. Please create ` + `a TensorBuffer for the real and imaginary parts separately and ` + `call tf.complex(real, imag).`);\n    }\n\n    this.values = values || util.getArrayFromDType(dtype, this.size);\n    this.strides = computeStrides(shape);\n  }\n  /**\n   * Sets a value in the buffer at a given location.\n   *\n   * @param value The value to set.\n   * @param locs  The location indices.\n   *\n   * @doc {heading: 'Tensors', subheading: 'Creation'}\n   */\n\n\n  set(value, ...locs) {\n    if (locs.length === 0) {\n      locs = [0];\n    }\n\n    util.assert(locs.length === this.rank, () => `The number of provided coordinates (${locs.length}) must ` + `match the rank (${this.rank})`);\n    const index = this.locToIndex(locs);\n    this.values[index] = value;\n  }\n  /**\n   * Returns the value in the buffer at the provided location.\n   *\n   * @param locs The location indices.\n   *\n   * @doc {heading: 'Tensors', subheading: 'Creation'}\n   */\n\n\n  get(...locs) {\n    if (locs.length === 0) {\n      locs = [0];\n    }\n\n    let i = 0;\n\n    for (const loc of locs) {\n      if (loc < 0 || loc >= this.shape[i]) {\n        const msg = `Requested out of range element at ${locs}. ` + `  Buffer shape=${this.shape}`;\n        throw new Error(msg);\n      }\n\n      i++;\n    }\n\n    let index = locs[locs.length - 1];\n\n    for (let i = 0; i < locs.length - 1; ++i) {\n      index += this.strides[i] * locs[i];\n    }\n\n    return this.values[index];\n  }\n\n  locToIndex(locs) {\n    if (this.rank === 0) {\n      return 0;\n    } else if (this.rank === 1) {\n      return locs[0];\n    }\n\n    let index = locs[locs.length - 1];\n\n    for (let i = 0; i < locs.length - 1; ++i) {\n      index += this.strides[i] * locs[i];\n    }\n\n    return index;\n  }\n\n  indexToLoc(index) {\n    if (this.rank === 0) {\n      return [];\n    } else if (this.rank === 1) {\n      return [index];\n    }\n\n    const locs = new Array(this.shape.length);\n\n    for (let i = 0; i < locs.length - 1; ++i) {\n      locs[i] = Math.floor(index / this.strides[i]);\n      index -= locs[i] * this.strides[i];\n    }\n\n    locs[locs.length - 1] = index;\n    return locs;\n  }\n\n  get rank() {\n    return this.shape.length;\n  }\n  /**\n   * Creates an immutable `tf.Tensor` object from the buffer.\n   *\n   * @doc {heading: 'Tensors', subheading: 'Creation'}\n   */\n\n\n  toTensor() {\n    return trackerFn().makeTensor(this.values, this.shape, this.dtype);\n  }\n\n} // For tracking tensor creation and disposal.\n\nlet trackerFn = null; // Used by chaining methods to call into ops.\n\nlet opHandler = null; // Used to warn about deprecated methods.\n\nlet deprecationWarningFn = null; // This here so that we can use this method on dev branches and keep the\n// functionality at master.\n// tslint:disable-next-line:no-unused-expression\n\n[deprecationWarningFn];\n/**\n * An external consumer can register itself as the tensor tracker. This way\n * the Tensor class can notify the tracker for every tensor created and\n * disposed.\n */\n\nexport function setTensorTracker(fn) {\n  trackerFn = fn;\n}\n/**\n * An external consumer can register itself as the op handler. This way the\n * Tensor class can have chaining methods that call into ops via the op\n * handler.\n */\n\nexport function setOpHandler(handler) {\n  opHandler = handler;\n}\n/**\n * Sets the deprecation warning function to be used by this file. This way the\n * Tensor class can be a leaf but still use the environment.\n */\n\nexport function setDeprecationWarningFn(fn) {\n  deprecationWarningFn = fn;\n}\n/**\n * A `tf.Tensor` object represents an immutable, multidimensional array of\n * numbers that has a shape and a data type.\n *\n * See `tf.tensor` for details on how to create a `tf.Tensor`.\n *\n * @doc {heading: 'Tensors', subheading: 'Classes'}\n */\n\nexport class Tensor {\n  constructor(shape, dtype, dataId, id) {\n    /** Whether this tensor has been globally kept. */\n    this.kept = false;\n    this.isDisposedInternal = false;\n    this.shape = shape.slice();\n    this.dtype = dtype || 'float32';\n    this.size = util.sizeFromShape(shape);\n    this.strides = computeStrides(shape);\n    this.dataId = dataId;\n    this.id = id;\n    this.rankType = this.rank < 5 ? this.rank.toString() : 'higher';\n  }\n\n  get rank() {\n    return this.shape.length;\n  }\n  /**\n   * Returns a promise of `tf.TensorBuffer` that holds the underlying data.\n   *\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\n   */\n\n\n  buffer() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const vals = yield _this.data();\n      return opHandler.buffer(_this.shape, _this.dtype, vals);\n    })();\n  }\n  /**\n   * Returns a `tf.TensorBuffer` that holds the underlying data.\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\n   */\n\n\n  bufferSync() {\n    return opHandler.buffer(this.shape, this.dtype, this.dataSync());\n  }\n  /**\n   * Returns the tensor data as a nested array. The transfer of data is done\n   * asynchronously.\n   *\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\n   */\n\n\n  array() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const vals = yield _this2.data();\n      return toNestedArray(_this2.shape, vals);\n    })();\n  }\n  /**\n   * Returns the tensor data as a nested array. The transfer of data is done\n   * synchronously.\n   *\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\n   */\n\n\n  arraySync() {\n    return toNestedArray(this.shape, this.dataSync());\n  }\n  /**\n   * Asynchronously downloads the values from the `tf.Tensor`. Returns a\n   * promise of `TypedArray` that resolves when the computation has finished.\n   *\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\n   */\n\n\n  data() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      _this3.throwIfDisposed();\n\n      const data = trackerFn().read(_this3.dataId);\n\n      if (_this3.dtype === 'string') {\n        const bytes = yield data;\n\n        try {\n          return bytes.map(b => util.decodeString(b));\n        } catch (_a) {\n          throw new Error('Failed to decode the string bytes into utf-8. ' + 'To get the original bytes, call tensor.bytes().');\n        }\n      }\n\n      return data;\n    })();\n  }\n  /**\n   * Synchronously downloads the values from the `tf.Tensor`. This blocks the\n   * UI thread until the values are ready, which can cause performance issues.\n   *\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\n   */\n\n\n  dataSync() {\n    this.throwIfDisposed();\n    const data = trackerFn().readSync(this.dataId);\n\n    if (this.dtype === 'string') {\n      try {\n        return data.map(b => util.decodeString(b));\n      } catch (_a) {\n        throw new Error('Failed to decode the string bytes into utf-8. ' + 'To get the original bytes, call tensor.bytes().');\n      }\n    }\n\n    return data;\n  }\n  /** Returns the underlying bytes of the tensor's data. */\n\n\n  bytes() {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      _this4.throwIfDisposed();\n\n      const data = yield trackerFn().read(_this4.dataId);\n\n      if (_this4.dtype === 'string') {\n        return data;\n      } else {\n        return new Uint8Array(data.buffer);\n      }\n    })();\n  }\n  /**\n   * Disposes `tf.Tensor` from memory.\n   *\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\n   */\n\n\n  dispose() {\n    if (this.isDisposed) {\n      return;\n    }\n\n    trackerFn().disposeTensor(this);\n    this.isDisposedInternal = true;\n  }\n\n  get isDisposed() {\n    return this.isDisposedInternal;\n  }\n\n  throwIfDisposed() {\n    if (this.isDisposed) {\n      throw new Error(`Tensor is disposed.`);\n    }\n  }\n  /**\n   * Prints the `tf.Tensor`. See `tf.print` for details.\n   *\n   * @param verbose Whether to print verbose information about the tensor,\n   *    including dtype and size.\n   *\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\n   */\n\n\n  print(verbose = false) {\n    return opHandler.print(this, verbose);\n  }\n  /**\n   * Returns a copy of the tensor. See `tf.clone` for details.\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\n   */\n\n\n  clone() {\n    this.throwIfDisposed();\n    return opHandler.clone(this);\n  }\n  /**\n   * Returns a human-readable description of the tensor. Useful for logging.\n   *\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\n   */\n\n\n  toString(verbose = false) {\n    const vals = this.dataSync();\n    return tensorToString(vals, this.shape, this.dtype, verbose);\n  }\n\n  cast(dtype) {\n    this.throwIfDisposed();\n    return opHandler.cast(this, dtype);\n  }\n\n  variable(trainable = true, name, dtype) {\n    this.throwIfDisposed();\n    return trackerFn().makeVariable(this, trainable, name, dtype);\n  }\n\n}\nObject.defineProperty(Tensor, Symbol.hasInstance, {\n  value: instance => {\n    // Implementation note: we should use properties of the object that will be\n    // defined before the constructor body has finished executing (methods).\n    // This is because when this code is transpiled by babel, babel will call\n    // classCallCheck before the constructor body is run.\n    // See https://github.com/tensorflow/tfjs/issues/3384 for backstory.\n    return !!instance && instance.data != null && instance.dataSync != null && instance.throwIfDisposed != null;\n  }\n});\nexport function getGlobalTensorClass() {\n  // Use getGlobal so that we can augment the Tensor class across package\n  // boundaries becase the node resolution alg may result in different modules\n  // being returned for this file depending on the path they are loaded from.\n  return getGlobal('Tensor', () => {\n    return Tensor;\n  });\n} // Global side effect. Cache global reference to Tensor class\n\ngetGlobalTensorClass();\n/**\n * A mutable `tf.Tensor`, useful for persisting state, e.g. for training.\n *\n * @doc {heading: 'Tensors', subheading: 'Classes'}\n */\n\nexport class Variable extends Tensor {\n  constructor(initialValue, trainable, name, tensorId) {\n    super(initialValue.shape, initialValue.dtype, initialValue.dataId, tensorId);\n    this.trainable = trainable;\n    this.name = name;\n  }\n  /**\n   * Assign a new `tf.Tensor` to this variable. The new `tf.Tensor` must have\n   * the same shape and dtype as the old `tf.Tensor`.\n   *\n   * @param newValue New tensor to be assigned to this variable.\n   *\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\n   */\n\n\n  assign(newValue) {\n    if (newValue.dtype !== this.dtype) {\n      throw new Error(`dtype of the new value (${newValue.dtype}) and ` + `previous value (${this.dtype}) must match`);\n    }\n\n    if (!util.arraysEqual(newValue.shape, this.shape)) {\n      throw new Error(`shape of the new value (${newValue.shape}) and ` + `previous value (${this.shape}) must match`);\n    }\n\n    trackerFn().disposeTensor(this);\n    this.dataId = newValue.dataId;\n    trackerFn().incRef(this, null\n    /* backend */\n    );\n  }\n\n  dispose() {\n    trackerFn().disposeVariable(this);\n    this.isDisposedInternal = true;\n  }\n\n}\nObject.defineProperty(Variable, Symbol.hasInstance, {\n  value: instance => {\n    return instance instanceof Tensor && instance.assign != null && instance.assign instanceof Function;\n  }\n});","map":{"version":3,"sources":["/Users/ryanliang/Downloads/main_movir_picker/node_modules/@tensorflow/tfjs-core/dist/tensor.js"],"names":["getGlobal","tensorToString","util","computeStrides","toNestedArray","TensorBuffer","constructor","shape","dtype","values","slice","size","sizeFromShape","n","length","assert","Error","getArrayFromDType","strides","set","value","locs","rank","index","locToIndex","get","i","loc","msg","indexToLoc","Array","Math","floor","toTensor","trackerFn","makeTensor","opHandler","deprecationWarningFn","setTensorTracker","fn","setOpHandler","handler","setDeprecationWarningFn","Tensor","dataId","id","kept","isDisposedInternal","rankType","toString","buffer","vals","data","bufferSync","dataSync","array","arraySync","throwIfDisposed","read","bytes","map","b","decodeString","_a","readSync","Uint8Array","dispose","isDisposed","disposeTensor","print","verbose","clone","cast","variable","trainable","name","makeVariable","Object","defineProperty","Symbol","hasInstance","instance","getGlobalTensorClass","Variable","initialValue","tensorId","assign","newValue","arraysEqual","incRef","disposeVariable","Function"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getGlobal } from './global_util';\nimport { tensorToString } from './tensor_format';\nimport * as util from './util';\nimport { computeStrides, toNestedArray } from './util';\n/**\n * A mutable object, similar to `tf.Tensor`, that allows users to set values\n * at locations before converting to an immutable `tf.Tensor`.\n *\n * See `tf.buffer` for creating a tensor buffer.\n *\n * @doc {heading: 'Tensors', subheading: 'Classes'}\n */\nexport class TensorBuffer {\n    constructor(shape, dtype, values) {\n        this.dtype = dtype;\n        this.shape = shape.slice();\n        this.size = util.sizeFromShape(shape);\n        if (values != null) {\n            const n = values.length;\n            util.assert(n === this.size, () => `Length of values '${n}' does not match the size ` +\n                `inferred by the shape '${this.size}'.`);\n        }\n        if (dtype === 'complex64') {\n            throw new Error(`complex64 dtype TensorBuffers are not supported. Please create ` +\n                `a TensorBuffer for the real and imaginary parts separately and ` +\n                `call tf.complex(real, imag).`);\n        }\n        this.values = values || util.getArrayFromDType(dtype, this.size);\n        this.strides = computeStrides(shape);\n    }\n    /**\n     * Sets a value in the buffer at a given location.\n     *\n     * @param value The value to set.\n     * @param locs  The location indices.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Creation'}\n     */\n    set(value, ...locs) {\n        if (locs.length === 0) {\n            locs = [0];\n        }\n        util.assert(locs.length === this.rank, () => `The number of provided coordinates (${locs.length}) must ` +\n            `match the rank (${this.rank})`);\n        const index = this.locToIndex(locs);\n        this.values[index] = value;\n    }\n    /**\n     * Returns the value in the buffer at the provided location.\n     *\n     * @param locs The location indices.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Creation'}\n     */\n    get(...locs) {\n        if (locs.length === 0) {\n            locs = [0];\n        }\n        let i = 0;\n        for (const loc of locs) {\n            if (loc < 0 || loc >= this.shape[i]) {\n                const msg = `Requested out of range element at ${locs}. ` +\n                    `  Buffer shape=${this.shape}`;\n                throw new Error(msg);\n            }\n            i++;\n        }\n        let index = locs[locs.length - 1];\n        for (let i = 0; i < locs.length - 1; ++i) {\n            index += this.strides[i] * locs[i];\n        }\n        return this.values[index];\n    }\n    locToIndex(locs) {\n        if (this.rank === 0) {\n            return 0;\n        }\n        else if (this.rank === 1) {\n            return locs[0];\n        }\n        let index = locs[locs.length - 1];\n        for (let i = 0; i < locs.length - 1; ++i) {\n            index += this.strides[i] * locs[i];\n        }\n        return index;\n    }\n    indexToLoc(index) {\n        if (this.rank === 0) {\n            return [];\n        }\n        else if (this.rank === 1) {\n            return [index];\n        }\n        const locs = new Array(this.shape.length);\n        for (let i = 0; i < locs.length - 1; ++i) {\n            locs[i] = Math.floor(index / this.strides[i]);\n            index -= locs[i] * this.strides[i];\n        }\n        locs[locs.length - 1] = index;\n        return locs;\n    }\n    get rank() {\n        return this.shape.length;\n    }\n    /**\n     * Creates an immutable `tf.Tensor` object from the buffer.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Creation'}\n     */\n    toTensor() {\n        return trackerFn().makeTensor(this.values, this.shape, this.dtype);\n    }\n}\n// For tracking tensor creation and disposal.\nlet trackerFn = null;\n// Used by chaining methods to call into ops.\nlet opHandler = null;\n// Used to warn about deprecated methods.\nlet deprecationWarningFn = null;\n// This here so that we can use this method on dev branches and keep the\n// functionality at master.\n// tslint:disable-next-line:no-unused-expression\n[deprecationWarningFn];\n/**\n * An external consumer can register itself as the tensor tracker. This way\n * the Tensor class can notify the tracker for every tensor created and\n * disposed.\n */\nexport function setTensorTracker(fn) {\n    trackerFn = fn;\n}\n/**\n * An external consumer can register itself as the op handler. This way the\n * Tensor class can have chaining methods that call into ops via the op\n * handler.\n */\nexport function setOpHandler(handler) {\n    opHandler = handler;\n}\n/**\n * Sets the deprecation warning function to be used by this file. This way the\n * Tensor class can be a leaf but still use the environment.\n */\nexport function setDeprecationWarningFn(fn) {\n    deprecationWarningFn = fn;\n}\n/**\n * A `tf.Tensor` object represents an immutable, multidimensional array of\n * numbers that has a shape and a data type.\n *\n * See `tf.tensor` for details on how to create a `tf.Tensor`.\n *\n * @doc {heading: 'Tensors', subheading: 'Classes'}\n */\nexport class Tensor {\n    constructor(shape, dtype, dataId, id) {\n        /** Whether this tensor has been globally kept. */\n        this.kept = false;\n        this.isDisposedInternal = false;\n        this.shape = shape.slice();\n        this.dtype = dtype || 'float32';\n        this.size = util.sizeFromShape(shape);\n        this.strides = computeStrides(shape);\n        this.dataId = dataId;\n        this.id = id;\n        this.rankType = (this.rank < 5 ? this.rank.toString() : 'higher');\n    }\n    get rank() {\n        return this.shape.length;\n    }\n    /**\n     * Returns a promise of `tf.TensorBuffer` that holds the underlying data.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n    async buffer() {\n        const vals = await this.data();\n        return opHandler.buffer(this.shape, this.dtype, vals);\n    }\n    /**\n     * Returns a `tf.TensorBuffer` that holds the underlying data.\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n    bufferSync() {\n        return opHandler.buffer(this.shape, this.dtype, this.dataSync());\n    }\n    /**\n     * Returns the tensor data as a nested array. The transfer of data is done\n     * asynchronously.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n    async array() {\n        const vals = await this.data();\n        return toNestedArray(this.shape, vals);\n    }\n    /**\n     * Returns the tensor data as a nested array. The transfer of data is done\n     * synchronously.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n    arraySync() {\n        return toNestedArray(this.shape, this.dataSync());\n    }\n    /**\n     * Asynchronously downloads the values from the `tf.Tensor`. Returns a\n     * promise of `TypedArray` that resolves when the computation has finished.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n    async data() {\n        this.throwIfDisposed();\n        const data = trackerFn().read(this.dataId);\n        if (this.dtype === 'string') {\n            const bytes = await data;\n            try {\n                return bytes.map(b => util.decodeString(b));\n            }\n            catch (_a) {\n                throw new Error('Failed to decode the string bytes into utf-8. ' +\n                    'To get the original bytes, call tensor.bytes().');\n            }\n        }\n        return data;\n    }\n    /**\n     * Synchronously downloads the values from the `tf.Tensor`. This blocks the\n     * UI thread until the values are ready, which can cause performance issues.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n    dataSync() {\n        this.throwIfDisposed();\n        const data = trackerFn().readSync(this.dataId);\n        if (this.dtype === 'string') {\n            try {\n                return data.map(b => util.decodeString(b));\n            }\n            catch (_a) {\n                throw new Error('Failed to decode the string bytes into utf-8. ' +\n                    'To get the original bytes, call tensor.bytes().');\n            }\n        }\n        return data;\n    }\n    /** Returns the underlying bytes of the tensor's data. */\n    async bytes() {\n        this.throwIfDisposed();\n        const data = await trackerFn().read(this.dataId);\n        if (this.dtype === 'string') {\n            return data;\n        }\n        else {\n            return new Uint8Array(data.buffer);\n        }\n    }\n    /**\n     * Disposes `tf.Tensor` from memory.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        trackerFn().disposeTensor(this);\n        this.isDisposedInternal = true;\n    }\n    get isDisposed() {\n        return this.isDisposedInternal;\n    }\n    throwIfDisposed() {\n        if (this.isDisposed) {\n            throw new Error(`Tensor is disposed.`);\n        }\n    }\n    /**\n     * Prints the `tf.Tensor`. See `tf.print` for details.\n     *\n     * @param verbose Whether to print verbose information about the tensor,\n     *    including dtype and size.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n    print(verbose = false) {\n        return opHandler.print(this, verbose);\n    }\n    /**\n     * Returns a copy of the tensor. See `tf.clone` for details.\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n    clone() {\n        this.throwIfDisposed();\n        return opHandler.clone(this);\n    }\n    /**\n     * Returns a human-readable description of the tensor. Useful for logging.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n    toString(verbose = false) {\n        const vals = this.dataSync();\n        return tensorToString(vals, this.shape, this.dtype, verbose);\n    }\n    cast(dtype) {\n        this.throwIfDisposed();\n        return opHandler.cast(this, dtype);\n    }\n    variable(trainable = true, name, dtype) {\n        this.throwIfDisposed();\n        return trackerFn().makeVariable(this, trainable, name, dtype);\n    }\n}\nObject.defineProperty(Tensor, Symbol.hasInstance, {\n    value: (instance) => {\n        // Implementation note: we should use properties of the object that will be\n        // defined before the constructor body has finished executing (methods).\n        // This is because when this code is transpiled by babel, babel will call\n        // classCallCheck before the constructor body is run.\n        // See https://github.com/tensorflow/tfjs/issues/3384 for backstory.\n        return !!instance && instance.data != null && instance.dataSync != null &&\n            instance.throwIfDisposed != null;\n    }\n});\nexport function getGlobalTensorClass() {\n    // Use getGlobal so that we can augment the Tensor class across package\n    // boundaries becase the node resolution alg may result in different modules\n    // being returned for this file depending on the path they are loaded from.\n    return getGlobal('Tensor', () => {\n        return Tensor;\n    });\n}\n// Global side effect. Cache global reference to Tensor class\ngetGlobalTensorClass();\n/**\n * A mutable `tf.Tensor`, useful for persisting state, e.g. for training.\n *\n * @doc {heading: 'Tensors', subheading: 'Classes'}\n */\nexport class Variable extends Tensor {\n    constructor(initialValue, trainable, name, tensorId) {\n        super(initialValue.shape, initialValue.dtype, initialValue.dataId, tensorId);\n        this.trainable = trainable;\n        this.name = name;\n    }\n    /**\n     * Assign a new `tf.Tensor` to this variable. The new `tf.Tensor` must have\n     * the same shape and dtype as the old `tf.Tensor`.\n     *\n     * @param newValue New tensor to be assigned to this variable.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n    assign(newValue) {\n        if (newValue.dtype !== this.dtype) {\n            throw new Error(`dtype of the new value (${newValue.dtype}) and ` +\n                `previous value (${this.dtype}) must match`);\n        }\n        if (!util.arraysEqual(newValue.shape, this.shape)) {\n            throw new Error(`shape of the new value (${newValue.shape}) and ` +\n                `previous value (${this.shape}) must match`);\n        }\n        trackerFn().disposeTensor(this);\n        this.dataId = newValue.dataId;\n        trackerFn().incRef(this, null /* backend */);\n    }\n    dispose() {\n        trackerFn().disposeVariable(this);\n        this.isDisposedInternal = true;\n    }\n}\nObject.defineProperty(Variable, Symbol.hasInstance, {\n    value: (instance) => {\n        return instance instanceof Tensor && instance.assign != null &&\n            instance.assign instanceof Function;\n    }\n});\n"]},"metadata":{},"sourceType":"module"}
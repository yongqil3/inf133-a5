{"ast":null,"code":"import _asyncToGenerator from \"/Users/ryanliang/Downloads/main_movir_picker/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { HashTable } from '../../executor/hash_table';\nimport { getParamValue } from './utils';\nexport const executeOp = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (node, tensorMap, context, resourceManager) {\n    switch (node.op) {\n      case 'HashTable':\n      case 'HashTableV2':\n        {\n          const keyDType = getParamValue('keyDType', node, tensorMap, context);\n          const valueDType = getParamValue('valueDType', node, tensorMap, context);\n          const hashTable = new HashTable(keyDType, valueDType);\n          resourceManager.addHashTable(node.name, hashTable);\n          return [hashTable.handle];\n        }\n\n      case 'LookupTableImport':\n      case 'LookupTableImportV2':\n        {\n          const handle = getParamValue('tableHandle', node, tensorMap, context, resourceManager);\n          const keys = getParamValue('keys', node, tensorMap, context);\n          const values = getParamValue('values', node, tensorMap, context);\n          const hashTable = resourceManager.getHashTableById(handle.id);\n          return [yield hashTable.import(keys, values)];\n        }\n\n      case 'LookupTableFind':\n      case 'LookupTableFindV2':\n        {\n          const handle = getParamValue('tableHandle', node, tensorMap, context, resourceManager);\n          const keys = getParamValue('keys', node, tensorMap, context);\n          const defaultValue = getParamValue('defaultValue', node, tensorMap, context);\n          const hashTable = resourceManager.getHashTableById(handle.id);\n          return [yield hashTable.find(keys, defaultValue)];\n        }\n\n      case 'LookupTableSize':\n      case 'LookupTableSizeV2':\n        {\n          const handle = getParamValue('tableHandle', node, tensorMap, context, resourceManager);\n          const hashTable = resourceManager.getHashTableById(handle.id);\n          return [hashTable.tensorSize()];\n        }\n\n      default:\n        throw TypeError(`Node type ${node.op} is not implemented`);\n    }\n  });\n\n  return function executeOp(_x, _x2, _x3, _x4) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport const CATEGORY = 'hash_table';","map":{"version":3,"sources":["/Users/ryanliang/Downloads/main_movir_picker/node_modules/@tensorflow/tfjs-converter/dist/operations/executors/hash_table_executor.js"],"names":["HashTable","getParamValue","executeOp","node","tensorMap","context","resourceManager","op","keyDType","valueDType","hashTable","addHashTable","name","handle","keys","values","getHashTableById","id","import","defaultValue","find","tensorSize","TypeError","CATEGORY"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,SAAT,QAA0B,2BAA1B;AACA,SAASC,aAAT,QAA8B,SAA9B;AACA,OAAO,MAAMC,SAAS;AAAA,+BAAG,WAAOC,IAAP,EAAaC,SAAb,EAAwBC,OAAxB,EAAiCC,eAAjC,EAAqD;AAC1E,YAAQH,IAAI,CAACI,EAAb;AACI,WAAK,WAAL;AACA,WAAK,aAAL;AAAoB;AAChB,gBAAMC,QAAQ,GAAGP,aAAa,CAAC,UAAD,EAAaE,IAAb,EAAmBC,SAAnB,EAA8BC,OAA9B,CAA9B;AACA,gBAAMI,UAAU,GAAGR,aAAa,CAAC,YAAD,EAAeE,IAAf,EAAqBC,SAArB,EAAgCC,OAAhC,CAAhC;AACA,gBAAMK,SAAS,GAAG,IAAIV,SAAJ,CAAcQ,QAAd,EAAwBC,UAAxB,CAAlB;AACAH,UAAAA,eAAe,CAACK,YAAhB,CAA6BR,IAAI,CAACS,IAAlC,EAAwCF,SAAxC;AACA,iBAAO,CAACA,SAAS,CAACG,MAAX,CAAP;AACH;;AACD,WAAK,mBAAL;AACA,WAAK,qBAAL;AAA4B;AACxB,gBAAMA,MAAM,GAAGZ,aAAa,CAAC,aAAD,EAAgBE,IAAhB,EAAsBC,SAAtB,EAAiCC,OAAjC,EAA0CC,eAA1C,CAA5B;AACA,gBAAMQ,IAAI,GAAGb,aAAa,CAAC,MAAD,EAASE,IAAT,EAAeC,SAAf,EAA0BC,OAA1B,CAA1B;AACA,gBAAMU,MAAM,GAAGd,aAAa,CAAC,QAAD,EAAWE,IAAX,EAAiBC,SAAjB,EAA4BC,OAA5B,CAA5B;AACA,gBAAMK,SAAS,GAAGJ,eAAe,CAACU,gBAAhB,CAAiCH,MAAM,CAACI,EAAxC,CAAlB;AACA,iBAAO,OAAOP,SAAS,CAACQ,MAAV,CAAiBJ,IAAjB,EAAuBC,MAAvB,CAAP,CAAP;AACH;;AACD,WAAK,iBAAL;AACA,WAAK,mBAAL;AAA0B;AACtB,gBAAMF,MAAM,GAAGZ,aAAa,CAAC,aAAD,EAAgBE,IAAhB,EAAsBC,SAAtB,EAAiCC,OAAjC,EAA0CC,eAA1C,CAA5B;AACA,gBAAMQ,IAAI,GAAGb,aAAa,CAAC,MAAD,EAASE,IAAT,EAAeC,SAAf,EAA0BC,OAA1B,CAA1B;AACA,gBAAMc,YAAY,GAAGlB,aAAa,CAAC,cAAD,EAAiBE,IAAjB,EAAuBC,SAAvB,EAAkCC,OAAlC,CAAlC;AACA,gBAAMK,SAAS,GAAGJ,eAAe,CAACU,gBAAhB,CAAiCH,MAAM,CAACI,EAAxC,CAAlB;AACA,iBAAO,OAAOP,SAAS,CAACU,IAAV,CAAeN,IAAf,EAAqBK,YAArB,CAAP,CAAP;AACH;;AACD,WAAK,iBAAL;AACA,WAAK,mBAAL;AAA0B;AACtB,gBAAMN,MAAM,GAAGZ,aAAa,CAAC,aAAD,EAAgBE,IAAhB,EAAsBC,SAAtB,EAAiCC,OAAjC,EAA0CC,eAA1C,CAA5B;AACA,gBAAMI,SAAS,GAAGJ,eAAe,CAACU,gBAAhB,CAAiCH,MAAM,CAACI,EAAxC,CAAlB;AACA,iBAAO,CAACP,SAAS,CAACW,UAAV,EAAD,CAAP;AACH;;AACD;AACI,cAAMC,SAAS,CAAE,aAAYnB,IAAI,CAACI,EAAG,qBAAtB,CAAf;AAhCR;AAkCH,GAnCqB;;AAAA,kBAATL,SAAS;AAAA;AAAA;AAAA,GAAf;AAoCP,OAAO,MAAMqB,QAAQ,GAAG,YAAjB","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { HashTable } from '../../executor/hash_table';\nimport { getParamValue } from './utils';\nexport const executeOp = async (node, tensorMap, context, resourceManager) => {\n    switch (node.op) {\n        case 'HashTable':\n        case 'HashTableV2': {\n            const keyDType = getParamValue('keyDType', node, tensorMap, context);\n            const valueDType = getParamValue('valueDType', node, tensorMap, context);\n            const hashTable = new HashTable(keyDType, valueDType);\n            resourceManager.addHashTable(node.name, hashTable);\n            return [hashTable.handle];\n        }\n        case 'LookupTableImport':\n        case 'LookupTableImportV2': {\n            const handle = getParamValue('tableHandle', node, tensorMap, context, resourceManager);\n            const keys = getParamValue('keys', node, tensorMap, context);\n            const values = getParamValue('values', node, tensorMap, context);\n            const hashTable = resourceManager.getHashTableById(handle.id);\n            return [await hashTable.import(keys, values)];\n        }\n        case 'LookupTableFind':\n        case 'LookupTableFindV2': {\n            const handle = getParamValue('tableHandle', node, tensorMap, context, resourceManager);\n            const keys = getParamValue('keys', node, tensorMap, context);\n            const defaultValue = getParamValue('defaultValue', node, tensorMap, context);\n            const hashTable = resourceManager.getHashTableById(handle.id);\n            return [await hashTable.find(keys, defaultValue)];\n        }\n        case 'LookupTableSize':\n        case 'LookupTableSizeV2': {\n            const handle = getParamValue('tableHandle', node, tensorMap, context, resourceManager);\n            const hashTable = resourceManager.getHashTableById(handle.id);\n            return [hashTable.tensorSize()];\n        }\n        default:\n            throw TypeError(`Node type ${node.op} is not implemented`);\n    }\n};\nexport const CATEGORY = 'hash_table';\n"]},"metadata":{},"sourceType":"module"}
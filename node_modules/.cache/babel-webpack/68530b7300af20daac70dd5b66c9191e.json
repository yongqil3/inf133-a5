{"ast":null,"code":"import _asyncToGenerator from \"/Users/ryanliang/Downloads/main_movir_picker/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { TensorBuffer } from '../tensor';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\n/**\n * Computes the difference between two lists of numbers.\n *\n * Given a Tensor `x` and a Tensor `y`, this operation returns a Tensor `out`\n * that represents all values that are in `x` but not in `y`. The returned\n * Tensor `out` is sorted in the same order that the numbers appear in `x`\n * (duplicates are preserved). This operation also returns a Tensor indices that\n * represents the position of each out element in `x`. In other words:\n *\n * `out[i] = x[idx[i]] for i in [0, 1, ..., out.length - 1]`\n *\n * ```js\n * const x = [1, 2, 3, 4, 5, 6];\n * const y = [1, 3, 5];\n *\n * const [out, indices] = await tf.setdiff1dAsync(x, y);\n * out.print(); // [2, 4, 6]\n * indices.print(); // [1, 3, 5]\n * ```\n *\n * @param x 1-D Tensor. Values to keep.\n * @param y 1-D Tensor. Must have the same type as x. Values to exclude in the\n *     output.\n * @returns Promise of Tensor tuple [out, indices].\n *  out: Tensor with the same type as x.\n *  indices: A Tensor of type int32.\n *\n * @doc {heading: 'Tensors', subheading: 'Transformations'}\n */\n\nfunction setdiff1dAsync_(_x, _x2) {\n  return _setdiff1dAsync_.apply(this, arguments);\n}\n\nfunction _setdiff1dAsync_() {\n  _setdiff1dAsync_ = _asyncToGenerator(function* (x, y) {\n    const $x = convertToTensor(x, 'x', 'setdiff1d');\n    const $y = convertToTensor(y, 'y', 'setdiff1d');\n    util.assert($x.dtype === $y.dtype, () => `x and y should have the same dtype, but got x (${$x.dtype}) and y (${$y.dtype}).`);\n    util.assert($x.rank === 1, () => `x should be 1D tensor, but got x (${$x.shape}).`);\n    util.assert($y.rank === 1, () => `y should be 1D tensor, but got y (${$y.shape}).`);\n    const xVals = yield $x.data();\n    const yVals = yield $y.data();\n    const ySet = new Set(yVals);\n    let outputSize = 0;\n\n    for (let i = 0; i < xVals.length; i++) {\n      if (!ySet.has(xVals[i])) {\n        outputSize++;\n      }\n    }\n\n    const buffer = new TensorBuffer([outputSize], $x.dtype);\n    const indices = new TensorBuffer([outputSize], 'int32');\n\n    for (let i = 0, p = 0; i < xVals.length; i++) {\n      if (!ySet.has(xVals[i])) {\n        buffer.values[p] = xVals[i];\n        indices.values[p] = i;\n        p++;\n      }\n    }\n\n    return [buffer.toTensor(), indices.toTensor()];\n  });\n  return _setdiff1dAsync_.apply(this, arguments);\n}\n\nexport const setdiff1dAsync = setdiff1dAsync_;","map":{"version":3,"sources":["/Users/ryanliang/Downloads/main_movir_picker/node_modules/@tensorflow/tfjs-core/dist/ops/setdiff1d_async.js"],"names":["TensorBuffer","convertToTensor","util","setdiff1dAsync_","x","y","$x","$y","assert","dtype","rank","shape","xVals","data","yVals","ySet","Set","outputSize","i","length","has","buffer","indices","p","values","toTensor","setdiff1dAsync"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,YAAT,QAA6B,WAA7B;AACA,SAASC,eAAT,QAAgC,oBAAhC;AACA,OAAO,KAAKC,IAAZ,MAAsB,SAAtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;SACeC,e;;;;;uCAAf,WAA+BC,CAA/B,EAAkCC,CAAlC,EAAqC;AACjC,UAAMC,EAAE,GAAGL,eAAe,CAACG,CAAD,EAAI,GAAJ,EAAS,WAAT,CAA1B;AACA,UAAMG,EAAE,GAAGN,eAAe,CAACI,CAAD,EAAI,GAAJ,EAAS,WAAT,CAA1B;AACAH,IAAAA,IAAI,CAACM,MAAL,CAAYF,EAAE,CAACG,KAAH,KAAaF,EAAE,CAACE,KAA5B,EAAmC,MAAO,kDAAiDH,EAAE,CAACG,KAAM,YAAWF,EAAE,CAACE,KAAM,IAAxH;AACAP,IAAAA,IAAI,CAACM,MAAL,CAAYF,EAAE,CAACI,IAAH,KAAY,CAAxB,EAA2B,MAAO,qCAAoCJ,EAAE,CAACK,KAAM,IAA/E;AACAT,IAAAA,IAAI,CAACM,MAAL,CAAYD,EAAE,CAACG,IAAH,KAAY,CAAxB,EAA2B,MAAO,qCAAoCH,EAAE,CAACI,KAAM,IAA/E;AACA,UAAMC,KAAK,SAASN,EAAE,CAACO,IAAH,EAApB;AACA,UAAMC,KAAK,SAASP,EAAE,CAACM,IAAH,EAApB;AACA,UAAME,IAAI,GAAG,IAAIC,GAAJ,CAAQF,KAAR,CAAb;AACA,QAAIG,UAAU,GAAG,CAAjB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,KAAK,CAACO,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACnC,UAAI,CAACH,IAAI,CAACK,GAAL,CAASR,KAAK,CAACM,CAAD,CAAd,CAAL,EAAyB;AACrBD,QAAAA,UAAU;AACb;AACJ;;AACD,UAAMI,MAAM,GAAG,IAAIrB,YAAJ,CAAiB,CAACiB,UAAD,CAAjB,EAA+BX,EAAE,CAACG,KAAlC,CAAf;AACA,UAAMa,OAAO,GAAG,IAAItB,YAAJ,CAAiB,CAACiB,UAAD,CAAjB,EAA+B,OAA/B,CAAhB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAR,EAAWK,CAAC,GAAG,CAApB,EAAuBL,CAAC,GAAGN,KAAK,CAACO,MAAjC,EAAyCD,CAAC,EAA1C,EAA8C;AAC1C,UAAI,CAACH,IAAI,CAACK,GAAL,CAASR,KAAK,CAACM,CAAD,CAAd,CAAL,EAAyB;AACrBG,QAAAA,MAAM,CAACG,MAAP,CAAcD,CAAd,IAAmBX,KAAK,CAACM,CAAD,CAAxB;AACAI,QAAAA,OAAO,CAACE,MAAR,CAAeD,CAAf,IAAoBL,CAApB;AACAK,QAAAA,CAAC;AACJ;AACJ;;AACD,WAAO,CAACF,MAAM,CAACI,QAAP,EAAD,EAAoBH,OAAO,CAACG,QAAR,EAApB,CAAP;AACH,G;;;;AACD,OAAO,MAAMC,cAAc,GAAGvB,eAAvB","sourcesContent":["/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { TensorBuffer } from '../tensor';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\n/**\n * Computes the difference between two lists of numbers.\n *\n * Given a Tensor `x` and a Tensor `y`, this operation returns a Tensor `out`\n * that represents all values that are in `x` but not in `y`. The returned\n * Tensor `out` is sorted in the same order that the numbers appear in `x`\n * (duplicates are preserved). This operation also returns a Tensor indices that\n * represents the position of each out element in `x`. In other words:\n *\n * `out[i] = x[idx[i]] for i in [0, 1, ..., out.length - 1]`\n *\n * ```js\n * const x = [1, 2, 3, 4, 5, 6];\n * const y = [1, 3, 5];\n *\n * const [out, indices] = await tf.setdiff1dAsync(x, y);\n * out.print(); // [2, 4, 6]\n * indices.print(); // [1, 3, 5]\n * ```\n *\n * @param x 1-D Tensor. Values to keep.\n * @param y 1-D Tensor. Must have the same type as x. Values to exclude in the\n *     output.\n * @returns Promise of Tensor tuple [out, indices].\n *  out: Tensor with the same type as x.\n *  indices: A Tensor of type int32.\n *\n * @doc {heading: 'Tensors', subheading: 'Transformations'}\n */\nasync function setdiff1dAsync_(x, y) {\n    const $x = convertToTensor(x, 'x', 'setdiff1d');\n    const $y = convertToTensor(y, 'y', 'setdiff1d');\n    util.assert($x.dtype === $y.dtype, () => `x and y should have the same dtype, but got x (${$x.dtype}) and y (${$y.dtype}).`);\n    util.assert($x.rank === 1, () => `x should be 1D tensor, but got x (${$x.shape}).`);\n    util.assert($y.rank === 1, () => `y should be 1D tensor, but got y (${$y.shape}).`);\n    const xVals = await $x.data();\n    const yVals = await $y.data();\n    const ySet = new Set(yVals);\n    let outputSize = 0;\n    for (let i = 0; i < xVals.length; i++) {\n        if (!ySet.has(xVals[i])) {\n            outputSize++;\n        }\n    }\n    const buffer = new TensorBuffer([outputSize], $x.dtype);\n    const indices = new TensorBuffer([outputSize], 'int32');\n    for (let i = 0, p = 0; i < xVals.length; i++) {\n        if (!ySet.has(xVals[i])) {\n            buffer.values[p] = xVals[i];\n            indices.values[p] = i;\n            p++;\n        }\n    }\n    return [buffer.toTensor(), indices.toTensor()];\n}\nexport const setdiff1dAsync = setdiff1dAsync_;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _asyncToGenerator from \"/Users/ryanliang/Downloads/main_movir_picker/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * IOHandler implementations based on HTTP requests in the web browser.\n *\n * Uses [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).\n */\nimport { env } from '../environment';\nimport { assert } from '../util';\nimport { concatenateArrayBuffers, getModelArtifactsInfoForJSON } from './io_utils';\nimport { IORouterRegistry } from './router_registry';\nimport { loadWeightsAsArrayBuffer } from './weights_loader';\nconst OCTET_STREAM_MIME_TYPE = 'application/octet-stream';\nconst JSON_TYPE = 'application/json';\nexport class HTTPRequest {\n  constructor(path, loadOptions) {\n    this.DEFAULT_METHOD = 'POST';\n\n    if (loadOptions == null) {\n      loadOptions = {};\n    }\n\n    this.weightPathPrefix = loadOptions.weightPathPrefix;\n    this.onProgress = loadOptions.onProgress;\n    this.weightUrlConverter = loadOptions.weightUrlConverter;\n\n    if (loadOptions.fetchFunc != null) {\n      assert(typeof loadOptions.fetchFunc === 'function', () => 'Must pass a function that matches the signature of ' + '`fetch` (see ' + 'https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)');\n      this.fetch = loadOptions.fetchFunc;\n    } else {\n      this.fetch = env().platform.fetch;\n    }\n\n    assert(path != null && path.length > 0, () => 'URL path for http must not be null, undefined or ' + 'empty.');\n\n    if (Array.isArray(path)) {\n      assert(path.length === 2, () => 'URL paths for http must have a length of 2, ' + `(actual length is ${path.length}).`);\n    }\n\n    this.path = path;\n\n    if (loadOptions.requestInit != null && loadOptions.requestInit.body != null) {\n      throw new Error('requestInit is expected to have no pre-existing body, but has one.');\n    }\n\n    this.requestInit = loadOptions.requestInit || {};\n  }\n\n  save(modelArtifacts) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n        throw new Error('BrowserHTTPRequest.save() does not support saving model topology ' + 'in binary formats yet.');\n      }\n\n      const init = Object.assign({\n        method: _this.DEFAULT_METHOD\n      }, _this.requestInit);\n      init.body = new FormData();\n      const weightsManifest = [{\n        paths: ['./model.weights.bin'],\n        weights: modelArtifacts.weightSpecs\n      }];\n      const modelTopologyAndWeightManifest = {\n        modelTopology: modelArtifacts.modelTopology,\n        format: modelArtifacts.format,\n        generatedBy: modelArtifacts.generatedBy,\n        convertedBy: modelArtifacts.convertedBy,\n        weightsManifest\n      };\n\n      if (modelArtifacts.signature != null) {\n        modelTopologyAndWeightManifest.signature = modelArtifacts.signature;\n      }\n\n      if (modelArtifacts.userDefinedMetadata != null) {\n        modelTopologyAndWeightManifest.userDefinedMetadata = modelArtifacts.userDefinedMetadata;\n      }\n\n      if (modelArtifacts.modelInitializer != null) {\n        modelTopologyAndWeightManifest.modelInitializer = modelArtifacts.modelInitializer;\n      }\n\n      init.body.append('model.json', new Blob([JSON.stringify(modelTopologyAndWeightManifest)], {\n        type: JSON_TYPE\n      }), 'model.json');\n\n      if (modelArtifacts.weightData != null) {\n        init.body.append('model.weights.bin', new Blob([modelArtifacts.weightData], {\n          type: OCTET_STREAM_MIME_TYPE\n        }), 'model.weights.bin');\n      }\n\n      const response = yield _this.fetch(_this.path, init);\n\n      if (response.ok) {\n        return {\n          modelArtifactsInfo: getModelArtifactsInfoForJSON(modelArtifacts),\n          responses: [response]\n        };\n      } else {\n        throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ` + `${response.status}.`);\n      }\n    })();\n  }\n  /**\n   * Load model artifacts via HTTP request(s).\n   *\n   * See the documentation to `tf.io.http` for details on the saved\n   * artifacts.\n   *\n   * @returns The loaded model artifacts (if loading succeeds).\n   */\n\n\n  load() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const modelConfigRequest = yield _this2.fetch(_this2.path, _this2.requestInit);\n\n      if (!modelConfigRequest.ok) {\n        throw new Error(`Request to ${_this2.path} failed with status code ` + `${modelConfigRequest.status}. Please verify this URL points to ` + `the model JSON of the model to load.`);\n      }\n\n      let modelConfig;\n\n      try {\n        modelConfig = yield modelConfigRequest.json();\n      } catch (e) {\n        let message = `Failed to parse model JSON of response from ${_this2.path}.`; // TODO(nsthorat): Remove this after some time when we're comfortable that\n        // .pb files are mostly gone.\n\n        if (_this2.path.endsWith('.pb')) {\n          message += ' Your path contains a .pb file extension. ' + 'Support for .pb models have been removed in TensorFlow.js 1.0 ' + 'in favor of .json models. You can re-convert your Python ' + 'TensorFlow model using the TensorFlow.js 1.0 conversion scripts ' + 'or you can convert your.pb models with the \\'pb2json\\'' + 'NPM script in the tensorflow/tfjs-converter repository.';\n        } else {\n          message += ' Please make sure the server is serving valid ' + 'JSON for this request.';\n        }\n\n        throw new Error(message);\n      }\n\n      const modelTopology = modelConfig.modelTopology;\n      const weightsManifest = modelConfig.weightsManifest;\n      const generatedBy = modelConfig.generatedBy;\n      const convertedBy = modelConfig.convertedBy;\n      const format = modelConfig.format;\n      const signature = modelConfig.signature;\n      const userDefinedMetadata = modelConfig.userDefinedMetadata; // We do not allow both modelTopology and weightsManifest to be missing.\n\n      if (modelTopology == null && weightsManifest == null) {\n        throw new Error(`The JSON from HTTP path ${_this2.path} contains neither model ` + `topology or manifest for weights.`);\n      }\n\n      let weightSpecs;\n      let weightData;\n\n      if (weightsManifest != null) {\n        const results = yield _this2.loadWeights(weightsManifest);\n        [weightSpecs, weightData] = results;\n      }\n\n      const artifacts = {\n        modelTopology,\n        weightSpecs,\n        weightData,\n        generatedBy,\n        convertedBy,\n        format\n      };\n\n      if (signature != null) {\n        artifacts.signature = signature;\n      }\n\n      if (userDefinedMetadata != null) {\n        artifacts.userDefinedMetadata = userDefinedMetadata;\n      }\n\n      const initializer = modelConfig.modelInitializer;\n\n      if (initializer) {\n        artifacts.modelInitializer = initializer;\n      }\n\n      return artifacts;\n    })();\n  }\n\n  loadWeights(weightsManifest) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      const weightPath = Array.isArray(_this3.path) ? _this3.path[1] : _this3.path;\n      const [prefix, suffix] = parseUrl(weightPath);\n      const pathPrefix = _this3.weightPathPrefix || prefix;\n      const weightSpecs = [];\n\n      for (const entry of weightsManifest) {\n        weightSpecs.push(...entry.weights);\n      }\n\n      const fetchURLs = [];\n      const urlPromises = [];\n\n      for (const weightsGroup of weightsManifest) {\n        for (const path of weightsGroup.paths) {\n          if (_this3.weightUrlConverter != null) {\n            urlPromises.push(_this3.weightUrlConverter(path));\n          } else {\n            fetchURLs.push(pathPrefix + path + suffix);\n          }\n        }\n      }\n\n      if (_this3.weightUrlConverter) {\n        fetchURLs.push(...(yield Promise.all(urlPromises)));\n      }\n\n      const buffers = yield loadWeightsAsArrayBuffer(fetchURLs, {\n        requestInit: _this3.requestInit,\n        fetchFunc: _this3.fetch,\n        onProgress: _this3.onProgress\n      });\n      return [weightSpecs, concatenateArrayBuffers(buffers)];\n    })();\n  }\n\n}\nHTTPRequest.URL_SCHEME_REGEX = /^https?:\\/\\//;\n/**\n * Extract the prefix and suffix of the url, where the prefix is the path before\n * the last file, and suffix is the search params after the last file.\n * ```\n * const url = 'http://tfhub.dev/model/1/tensorflowjs_model.pb?tfjs-format=file'\n * [prefix, suffix] = parseUrl(url)\n * // prefix = 'http://tfhub.dev/model/1/'\n * // suffix = '?tfjs-format=file'\n * ```\n * @param url the model url to be parsed.\n */\n\nexport function parseUrl(url) {\n  const lastSlash = url.lastIndexOf('/');\n  const lastSearchParam = url.lastIndexOf('?');\n  const prefix = url.substring(0, lastSlash);\n  const suffix = lastSearchParam > lastSlash ? url.substring(lastSearchParam) : '';\n  return [prefix + '/', suffix];\n}\nexport function isHTTPScheme(url) {\n  return url.match(HTTPRequest.URL_SCHEME_REGEX) != null;\n}\nexport const httpRouter = (url, loadOptions) => {\n  if (typeof fetch === 'undefined' && (loadOptions == null || loadOptions.fetchFunc == null)) {\n    // `http` uses `fetch` or `node-fetch`, if one wants to use it in\n    // an environment that is not the browser or node they have to setup a\n    // global fetch polyfill.\n    return null;\n  } else {\n    let isHTTP = true;\n\n    if (Array.isArray(url)) {\n      isHTTP = url.every(urlItem => isHTTPScheme(urlItem));\n    } else {\n      isHTTP = isHTTPScheme(url);\n    }\n\n    if (isHTTP) {\n      return http(url, loadOptions);\n    }\n  }\n\n  return null;\n};\nIORouterRegistry.registerSaveRouter(httpRouter);\nIORouterRegistry.registerLoadRouter(httpRouter);\n/**\n * Creates an IOHandler subtype that sends model artifacts to HTTP server.\n *\n * An HTTP request of the `multipart/form-data` mime type will be sent to the\n * `path` URL. The form data includes artifacts that represent the topology\n * and/or weights of the model. In the case of Keras-style `tf.Model`, two\n * blobs (files) exist in form-data:\n *   - A JSON file consisting of `modelTopology` and `weightsManifest`.\n *   - A binary weights file consisting of the concatenated weight values.\n * These files are in the same format as the one generated by\n * [tfjs_converter](https://js.tensorflow.org/tutorials/import-keras.html).\n *\n * The following code snippet exemplifies the client-side code that uses this\n * function:\n *\n * ```js\n * const model = tf.sequential();\n * model.add(\n *     tf.layers.dense({units: 1, inputShape: [100], activation: 'sigmoid'}));\n *\n * const saveResult = await model.save(tf.io.http(\n *     'http://model-server:5000/upload', {requestInit: {method: 'PUT'}}));\n * console.log(saveResult);\n * ```\n *\n * If the default `POST` method is to be used, without any custom parameters\n * such as headers, you can simply pass an HTTP or HTTPS URL to `model.save`:\n *\n * ```js\n * const saveResult = await model.save('http://model-server:5000/upload');\n * ```\n *\n * The following GitHub Gist\n * https://gist.github.com/dsmilkov/1b6046fd6132d7408d5257b0976f7864\n * implements a server based on [flask](https://github.com/pallets/flask) that\n * can receive the request. Upon receiving the model artifacts via the requst,\n * this particular server reconsistutes instances of [Keras\n * Models](https://keras.io/models/model/) in memory.\n *\n *\n * @param path A URL path to the model.\n *   Can be an absolute HTTP path (e.g.,\n *   'http://localhost:8000/model-upload)') or a relative path (e.g.,\n *   './model-upload').\n * @param requestInit Request configurations to be used when sending\n *    HTTP request to server using `fetch`. It can contain fields such as\n *    `method`, `credentials`, `headers`, `mode`, etc. See\n *    https://developer.mozilla.org/en-US/docs/Web/API/Request/Request\n *    for more information. `requestInit` must not have a body, because the\n * body will be set by TensorFlow.js. File blobs representing the model\n * topology (filename: 'model.json') and the weights of the model (filename:\n * 'model.weights.bin') will be appended to the body. If `requestInit` has a\n * `body`, an Error will be thrown.\n * @param loadOptions Optional configuration for the loading. It includes the\n *   following fields:\n *   - weightPathPrefix Optional, this specifies the path prefix for weight\n *     files, by default this is calculated from the path param.\n *   - fetchFunc Optional, custom `fetch` function. E.g., in Node.js,\n *     the `fetch` from node-fetch can be used here.\n *   - onProgress Optional, progress callback function, fired periodically\n *     before the load is completed.\n * @returns An instance of `IOHandler`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Loading',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\n\nexport function http(path, loadOptions) {\n  return new HTTPRequest(path, loadOptions);\n}\n/**\n * Deprecated. Use `tf.io.http`.\n * @param path\n * @param loadOptions\n */\n\nexport function browserHTTPRequest(path, loadOptions) {\n  return http(path, loadOptions);\n}","map":{"version":3,"sources":["/Users/ryanliang/Downloads/main_movir_picker/node_modules/@tensorflow/tfjs-core/dist/io/http.js"],"names":["env","assert","concatenateArrayBuffers","getModelArtifactsInfoForJSON","IORouterRegistry","loadWeightsAsArrayBuffer","OCTET_STREAM_MIME_TYPE","JSON_TYPE","HTTPRequest","constructor","path","loadOptions","DEFAULT_METHOD","weightPathPrefix","onProgress","weightUrlConverter","fetchFunc","fetch","platform","length","Array","isArray","requestInit","body","Error","save","modelArtifacts","modelTopology","ArrayBuffer","init","Object","assign","method","FormData","weightsManifest","paths","weights","weightSpecs","modelTopologyAndWeightManifest","format","generatedBy","convertedBy","signature","userDefinedMetadata","modelInitializer","append","Blob","JSON","stringify","type","weightData","response","ok","modelArtifactsInfo","responses","status","load","modelConfigRequest","modelConfig","json","e","message","endsWith","results","loadWeights","artifacts","initializer","weightPath","prefix","suffix","parseUrl","pathPrefix","entry","push","fetchURLs","urlPromises","weightsGroup","Promise","all","buffers","URL_SCHEME_REGEX","url","lastSlash","lastIndexOf","lastSearchParam","substring","isHTTPScheme","match","httpRouter","isHTTP","every","urlItem","http","registerSaveRouter","registerLoadRouter","browserHTTPRequest"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,GAAT,QAAoB,gBAApB;AACA,SAASC,MAAT,QAAuB,SAAvB;AACA,SAASC,uBAAT,EAAkCC,4BAAlC,QAAsE,YAAtE;AACA,SAASC,gBAAT,QAAiC,mBAAjC;AACA,SAASC,wBAAT,QAAyC,kBAAzC;AACA,MAAMC,sBAAsB,GAAG,0BAA/B;AACA,MAAMC,SAAS,GAAG,kBAAlB;AACA,OAAO,MAAMC,WAAN,CAAkB;AACrBC,EAAAA,WAAW,CAACC,IAAD,EAAOC,WAAP,EAAoB;AAC3B,SAAKC,cAAL,GAAsB,MAAtB;;AACA,QAAID,WAAW,IAAI,IAAnB,EAAyB;AACrBA,MAAAA,WAAW,GAAG,EAAd;AACH;;AACD,SAAKE,gBAAL,GAAwBF,WAAW,CAACE,gBAApC;AACA,SAAKC,UAAL,GAAkBH,WAAW,CAACG,UAA9B;AACA,SAAKC,kBAAL,GAA0BJ,WAAW,CAACI,kBAAtC;;AACA,QAAIJ,WAAW,CAACK,SAAZ,IAAyB,IAA7B,EAAmC;AAC/Bf,MAAAA,MAAM,CAAC,OAAOU,WAAW,CAACK,SAAnB,KAAiC,UAAlC,EAA8C,MAAM,wDACtD,eADsD,GAEtD,6DAFE,CAAN;AAGA,WAAKC,KAAL,GAAaN,WAAW,CAACK,SAAzB;AACH,KALD,MAMK;AACD,WAAKC,KAAL,GAAajB,GAAG,GAAGkB,QAAN,CAAeD,KAA5B;AACH;;AACDhB,IAAAA,MAAM,CAACS,IAAI,IAAI,IAAR,IAAgBA,IAAI,CAACS,MAAL,GAAc,CAA/B,EAAkC,MAAM,sDAC1C,QADE,CAAN;;AAEA,QAAIC,KAAK,CAACC,OAAN,CAAcX,IAAd,CAAJ,EAAyB;AACrBT,MAAAA,MAAM,CAACS,IAAI,CAACS,MAAL,KAAgB,CAAjB,EAAoB,MAAM,iDAC3B,qBAAoBT,IAAI,CAACS,MAAO,IAD/B,CAAN;AAEH;;AACD,SAAKT,IAAL,GAAYA,IAAZ;;AACA,QAAIC,WAAW,CAACW,WAAZ,IAA2B,IAA3B,IACAX,WAAW,CAACW,WAAZ,CAAwBC,IAAxB,IAAgC,IADpC,EAC0C;AACtC,YAAM,IAAIC,KAAJ,CAAU,oEAAV,CAAN;AACH;;AACD,SAAKF,WAAL,GAAmBX,WAAW,CAACW,WAAZ,IAA2B,EAA9C;AACH;;AACKG,EAAAA,IAAI,CAACC,cAAD,EAAiB;AAAA;;AAAA;AACvB,UAAIA,cAAc,CAACC,aAAf,YAAwCC,WAA5C,EAAyD;AACrD,cAAM,IAAIJ,KAAJ,CAAU,sEACZ,wBADE,CAAN;AAEH;;AACD,YAAMK,IAAI,GAAGC,MAAM,CAACC,MAAP,CAAc;AAAEC,QAAAA,MAAM,EAAE,KAAI,CAACpB;AAAf,OAAd,EAA+C,KAAI,CAACU,WAApD,CAAb;AACAO,MAAAA,IAAI,CAACN,IAAL,GAAY,IAAIU,QAAJ,EAAZ;AACA,YAAMC,eAAe,GAAG,CAAC;AACjBC,QAAAA,KAAK,EAAE,CAAC,qBAAD,CADU;AAEjBC,QAAAA,OAAO,EAAEV,cAAc,CAACW;AAFP,OAAD,CAAxB;AAIA,YAAMC,8BAA8B,GAAG;AACnCX,QAAAA,aAAa,EAAED,cAAc,CAACC,aADK;AAEnCY,QAAAA,MAAM,EAAEb,cAAc,CAACa,MAFY;AAGnCC,QAAAA,WAAW,EAAEd,cAAc,CAACc,WAHO;AAInCC,QAAAA,WAAW,EAAEf,cAAc,CAACe,WAJO;AAKnCP,QAAAA;AALmC,OAAvC;;AAOA,UAAIR,cAAc,CAACgB,SAAf,IAA4B,IAAhC,EAAsC;AAClCJ,QAAAA,8BAA8B,CAACI,SAA/B,GAA2ChB,cAAc,CAACgB,SAA1D;AACH;;AACD,UAAIhB,cAAc,CAACiB,mBAAf,IAAsC,IAA1C,EAAgD;AAC5CL,QAAAA,8BAA8B,CAACK,mBAA/B,GACIjB,cAAc,CAACiB,mBADnB;AAEH;;AACD,UAAIjB,cAAc,CAACkB,gBAAf,IAAmC,IAAvC,EAA6C;AACzCN,QAAAA,8BAA8B,CAACM,gBAA/B,GACIlB,cAAc,CAACkB,gBADnB;AAEH;;AACDf,MAAAA,IAAI,CAACN,IAAL,CAAUsB,MAAV,CAAiB,YAAjB,EAA+B,IAAIC,IAAJ,CAAS,CAACC,IAAI,CAACC,SAAL,CAAeV,8BAAf,CAAD,CAAT,EAA2D;AAAEW,QAAAA,IAAI,EAAE1C;AAAR,OAA3D,CAA/B,EAAgH,YAAhH;;AACA,UAAImB,cAAc,CAACwB,UAAf,IAA6B,IAAjC,EAAuC;AACnCrB,QAAAA,IAAI,CAACN,IAAL,CAAUsB,MAAV,CAAiB,mBAAjB,EAAsC,IAAIC,IAAJ,CAAS,CAACpB,cAAc,CAACwB,UAAhB,CAAT,EAAsC;AAAED,UAAAA,IAAI,EAAE3C;AAAR,SAAtC,CAAtC,EAA+G,mBAA/G;AACH;;AACD,YAAM6C,QAAQ,SAAS,KAAI,CAAClC,KAAL,CAAW,KAAI,CAACP,IAAhB,EAAsBmB,IAAtB,CAAvB;;AACA,UAAIsB,QAAQ,CAACC,EAAb,EAAiB;AACb,eAAO;AACHC,UAAAA,kBAAkB,EAAElD,4BAA4B,CAACuB,cAAD,CAD7C;AAEH4B,UAAAA,SAAS,EAAE,CAACH,QAAD;AAFR,SAAP;AAIH,OALD,MAMK;AACD,cAAM,IAAI3B,KAAJ,CAAW,+DAAD,GACX,GAAE2B,QAAQ,CAACI,MAAO,GADjB,CAAN;AAEH;AA3CsB;AA4C1B;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACUC,EAAAA,IAAI,GAAG;AAAA;;AAAA;AACT,YAAMC,kBAAkB,SAAS,MAAI,CAACxC,KAAL,CAAW,MAAI,CAACP,IAAhB,EAAsB,MAAI,CAACY,WAA3B,CAAjC;;AACA,UAAI,CAACmC,kBAAkB,CAACL,EAAxB,EAA4B;AACxB,cAAM,IAAI5B,KAAJ,CAAW,cAAa,MAAI,CAACd,IAAK,2BAAxB,GACX,GAAE+C,kBAAkB,CAACF,MAAO,qCADjB,GAEX,sCAFC,CAAN;AAGH;;AACD,UAAIG,WAAJ;;AACA,UAAI;AACAA,QAAAA,WAAW,SAASD,kBAAkB,CAACE,IAAnB,EAApB;AACH,OAFD,CAGA,OAAOC,CAAP,EAAU;AACN,YAAIC,OAAO,GAAI,+CAA8C,MAAI,CAACnD,IAAK,GAAvE,CADM,CAEN;AACA;;AACA,YAAI,MAAI,CAACA,IAAL,CAAUoD,QAAV,CAAmB,KAAnB,CAAJ,EAA+B;AAC3BD,UAAAA,OAAO,IAAI,+CACP,gEADO,GAEP,2DAFO,GAGP,kEAHO,GAIP,wDAJO,GAKP,yDALJ;AAMH,SAPD,MAQK;AACDA,UAAAA,OAAO,IAAI,mDACP,wBADJ;AAEH;;AACD,cAAM,IAAIrC,KAAJ,CAAUqC,OAAV,CAAN;AACH;;AACD,YAAMlC,aAAa,GAAG+B,WAAW,CAAC/B,aAAlC;AACA,YAAMO,eAAe,GAAGwB,WAAW,CAACxB,eAApC;AACA,YAAMM,WAAW,GAAGkB,WAAW,CAAClB,WAAhC;AACA,YAAMC,WAAW,GAAGiB,WAAW,CAACjB,WAAhC;AACA,YAAMF,MAAM,GAAGmB,WAAW,CAACnB,MAA3B;AACA,YAAMG,SAAS,GAAGgB,WAAW,CAAChB,SAA9B;AACA,YAAMC,mBAAmB,GAAGe,WAAW,CAACf,mBAAxC,CAnCS,CAoCT;;AACA,UAAIhB,aAAa,IAAI,IAAjB,IAAyBO,eAAe,IAAI,IAAhD,EAAsD;AAClD,cAAM,IAAIV,KAAJ,CAAW,2BAA0B,MAAI,CAACd,IAAK,0BAArC,GACX,mCADC,CAAN;AAEH;;AACD,UAAI2B,WAAJ;AACA,UAAIa,UAAJ;;AACA,UAAIhB,eAAe,IAAI,IAAvB,EAA6B;AACzB,cAAM6B,OAAO,SAAS,MAAI,CAACC,WAAL,CAAiB9B,eAAjB,CAAtB;AACA,SAACG,WAAD,EAAca,UAAd,IAA4Ba,OAA5B;AACH;;AACD,YAAME,SAAS,GAAG;AACdtC,QAAAA,aADc;AAEdU,QAAAA,WAFc;AAGda,QAAAA,UAHc;AAIdV,QAAAA,WAJc;AAKdC,QAAAA,WALc;AAMdF,QAAAA;AANc,OAAlB;;AAQA,UAAIG,SAAS,IAAI,IAAjB,EAAuB;AACnBuB,QAAAA,SAAS,CAACvB,SAAV,GAAsBA,SAAtB;AACH;;AACD,UAAIC,mBAAmB,IAAI,IAA3B,EAAiC;AAC7BsB,QAAAA,SAAS,CAACtB,mBAAV,GAAgCA,mBAAhC;AACH;;AACD,YAAMuB,WAAW,GAAGR,WAAW,CAACd,gBAAhC;;AACA,UAAIsB,WAAJ,EAAiB;AACbD,QAAAA,SAAS,CAACrB,gBAAV,GAA6BsB,WAA7B;AACH;;AACD,aAAOD,SAAP;AAjES;AAkEZ;;AACKD,EAAAA,WAAW,CAAC9B,eAAD,EAAkB;AAAA;;AAAA;AAC/B,YAAMiC,UAAU,GAAG/C,KAAK,CAACC,OAAN,CAAc,MAAI,CAACX,IAAnB,IAA2B,MAAI,CAACA,IAAL,CAAU,CAAV,CAA3B,GAA0C,MAAI,CAACA,IAAlE;AACA,YAAM,CAAC0D,MAAD,EAASC,MAAT,IAAmBC,QAAQ,CAACH,UAAD,CAAjC;AACA,YAAMI,UAAU,GAAG,MAAI,CAAC1D,gBAAL,IAAyBuD,MAA5C;AACA,YAAM/B,WAAW,GAAG,EAApB;;AACA,WAAK,MAAMmC,KAAX,IAAoBtC,eAApB,EAAqC;AACjCG,QAAAA,WAAW,CAACoC,IAAZ,CAAiB,GAAGD,KAAK,CAACpC,OAA1B;AACH;;AACD,YAAMsC,SAAS,GAAG,EAAlB;AACA,YAAMC,WAAW,GAAG,EAApB;;AACA,WAAK,MAAMC,YAAX,IAA2B1C,eAA3B,EAA4C;AACxC,aAAK,MAAMxB,IAAX,IAAmBkE,YAAY,CAACzC,KAAhC,EAAuC;AACnC,cAAI,MAAI,CAACpB,kBAAL,IAA2B,IAA/B,EAAqC;AACjC4D,YAAAA,WAAW,CAACF,IAAZ,CAAiB,MAAI,CAAC1D,kBAAL,CAAwBL,IAAxB,CAAjB;AACH,WAFD,MAGK;AACDgE,YAAAA,SAAS,CAACD,IAAV,CAAeF,UAAU,GAAG7D,IAAb,GAAoB2D,MAAnC;AACH;AACJ;AACJ;;AACD,UAAI,MAAI,CAACtD,kBAAT,EAA6B;AACzB2D,QAAAA,SAAS,CAACD,IAAV,CAAe,UAASI,OAAO,CAACC,GAAR,CAAYH,WAAZ,CAAT,CAAf;AACH;;AACD,YAAMI,OAAO,SAAS1E,wBAAwB,CAACqE,SAAD,EAAY;AACtDpD,QAAAA,WAAW,EAAE,MAAI,CAACA,WADoC;AAEtDN,QAAAA,SAAS,EAAE,MAAI,CAACC,KAFsC;AAGtDH,QAAAA,UAAU,EAAE,MAAI,CAACA;AAHqC,OAAZ,CAA9C;AAKA,aAAO,CAACuB,WAAD,EAAcnC,uBAAuB,CAAC6E,OAAD,CAArC,CAAP;AA5B+B;AA6BlC;;AApLoB;AAsLzBvE,WAAW,CAACwE,gBAAZ,GAA+B,cAA/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASV,QAAT,CAAkBW,GAAlB,EAAuB;AAC1B,QAAMC,SAAS,GAAGD,GAAG,CAACE,WAAJ,CAAgB,GAAhB,CAAlB;AACA,QAAMC,eAAe,GAAGH,GAAG,CAACE,WAAJ,CAAgB,GAAhB,CAAxB;AACA,QAAMf,MAAM,GAAGa,GAAG,CAACI,SAAJ,CAAc,CAAd,EAAiBH,SAAjB,CAAf;AACA,QAAMb,MAAM,GAAGe,eAAe,GAAGF,SAAlB,GAA8BD,GAAG,CAACI,SAAJ,CAAcD,eAAd,CAA9B,GAA+D,EAA9E;AACA,SAAO,CAAChB,MAAM,GAAG,GAAV,EAAeC,MAAf,CAAP;AACH;AACD,OAAO,SAASiB,YAAT,CAAsBL,GAAtB,EAA2B;AAC9B,SAAOA,GAAG,CAACM,KAAJ,CAAU/E,WAAW,CAACwE,gBAAtB,KAA2C,IAAlD;AACH;AACD,OAAO,MAAMQ,UAAU,GAAG,CAACP,GAAD,EAAMtE,WAAN,KAAsB;AAC5C,MAAI,OAAOM,KAAP,KAAiB,WAAjB,KACCN,WAAW,IAAI,IAAf,IAAuBA,WAAW,CAACK,SAAZ,IAAyB,IADjD,CAAJ,EAC4D;AACxD;AACA;AACA;AACA,WAAO,IAAP;AACH,GAND,MAOK;AACD,QAAIyE,MAAM,GAAG,IAAb;;AACA,QAAIrE,KAAK,CAACC,OAAN,CAAc4D,GAAd,CAAJ,EAAwB;AACpBQ,MAAAA,MAAM,GAAGR,GAAG,CAACS,KAAJ,CAAUC,OAAO,IAAIL,YAAY,CAACK,OAAD,CAAjC,CAAT;AACH,KAFD,MAGK;AACDF,MAAAA,MAAM,GAAGH,YAAY,CAACL,GAAD,CAArB;AACH;;AACD,QAAIQ,MAAJ,EAAY;AACR,aAAOG,IAAI,CAACX,GAAD,EAAMtE,WAAN,CAAX;AACH;AACJ;;AACD,SAAO,IAAP;AACH,CArBM;AAsBPP,gBAAgB,CAACyF,kBAAjB,CAAoCL,UAApC;AACApF,gBAAgB,CAAC0F,kBAAjB,CAAoCN,UAApC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASI,IAAT,CAAclF,IAAd,EAAoBC,WAApB,EAAiC;AACpC,SAAO,IAAIH,WAAJ,CAAgBE,IAAhB,EAAsBC,WAAtB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASoF,kBAAT,CAA4BrF,IAA5B,EAAkCC,WAAlC,EAA+C;AAClD,SAAOiF,IAAI,CAAClF,IAAD,EAAOC,WAAP,CAAX;AACH","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * IOHandler implementations based on HTTP requests in the web browser.\n *\n * Uses [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).\n */\nimport { env } from '../environment';\nimport { assert } from '../util';\nimport { concatenateArrayBuffers, getModelArtifactsInfoForJSON } from './io_utils';\nimport { IORouterRegistry } from './router_registry';\nimport { loadWeightsAsArrayBuffer } from './weights_loader';\nconst OCTET_STREAM_MIME_TYPE = 'application/octet-stream';\nconst JSON_TYPE = 'application/json';\nexport class HTTPRequest {\n    constructor(path, loadOptions) {\n        this.DEFAULT_METHOD = 'POST';\n        if (loadOptions == null) {\n            loadOptions = {};\n        }\n        this.weightPathPrefix = loadOptions.weightPathPrefix;\n        this.onProgress = loadOptions.onProgress;\n        this.weightUrlConverter = loadOptions.weightUrlConverter;\n        if (loadOptions.fetchFunc != null) {\n            assert(typeof loadOptions.fetchFunc === 'function', () => 'Must pass a function that matches the signature of ' +\n                '`fetch` (see ' +\n                'https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)');\n            this.fetch = loadOptions.fetchFunc;\n        }\n        else {\n            this.fetch = env().platform.fetch;\n        }\n        assert(path != null && path.length > 0, () => 'URL path for http must not be null, undefined or ' +\n            'empty.');\n        if (Array.isArray(path)) {\n            assert(path.length === 2, () => 'URL paths for http must have a length of 2, ' +\n                `(actual length is ${path.length}).`);\n        }\n        this.path = path;\n        if (loadOptions.requestInit != null &&\n            loadOptions.requestInit.body != null) {\n            throw new Error('requestInit is expected to have no pre-existing body, but has one.');\n        }\n        this.requestInit = loadOptions.requestInit || {};\n    }\n    async save(modelArtifacts) {\n        if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n            throw new Error('BrowserHTTPRequest.save() does not support saving model topology ' +\n                'in binary formats yet.');\n        }\n        const init = Object.assign({ method: this.DEFAULT_METHOD }, this.requestInit);\n        init.body = new FormData();\n        const weightsManifest = [{\n                paths: ['./model.weights.bin'],\n                weights: modelArtifacts.weightSpecs,\n            }];\n        const modelTopologyAndWeightManifest = {\n            modelTopology: modelArtifacts.modelTopology,\n            format: modelArtifacts.format,\n            generatedBy: modelArtifacts.generatedBy,\n            convertedBy: modelArtifacts.convertedBy,\n            weightsManifest\n        };\n        if (modelArtifacts.signature != null) {\n            modelTopologyAndWeightManifest.signature = modelArtifacts.signature;\n        }\n        if (modelArtifacts.userDefinedMetadata != null) {\n            modelTopologyAndWeightManifest.userDefinedMetadata =\n                modelArtifacts.userDefinedMetadata;\n        }\n        if (modelArtifacts.modelInitializer != null) {\n            modelTopologyAndWeightManifest.modelInitializer =\n                modelArtifacts.modelInitializer;\n        }\n        init.body.append('model.json', new Blob([JSON.stringify(modelTopologyAndWeightManifest)], { type: JSON_TYPE }), 'model.json');\n        if (modelArtifacts.weightData != null) {\n            init.body.append('model.weights.bin', new Blob([modelArtifacts.weightData], { type: OCTET_STREAM_MIME_TYPE }), 'model.weights.bin');\n        }\n        const response = await this.fetch(this.path, init);\n        if (response.ok) {\n            return {\n                modelArtifactsInfo: getModelArtifactsInfoForJSON(modelArtifacts),\n                responses: [response],\n            };\n        }\n        else {\n            throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ` +\n                `${response.status}.`);\n        }\n    }\n    /**\n     * Load model artifacts via HTTP request(s).\n     *\n     * See the documentation to `tf.io.http` for details on the saved\n     * artifacts.\n     *\n     * @returns The loaded model artifacts (if loading succeeds).\n     */\n    async load() {\n        const modelConfigRequest = await this.fetch(this.path, this.requestInit);\n        if (!modelConfigRequest.ok) {\n            throw new Error(`Request to ${this.path} failed with status code ` +\n                `${modelConfigRequest.status}. Please verify this URL points to ` +\n                `the model JSON of the model to load.`);\n        }\n        let modelConfig;\n        try {\n            modelConfig = await modelConfigRequest.json();\n        }\n        catch (e) {\n            let message = `Failed to parse model JSON of response from ${this.path}.`;\n            // TODO(nsthorat): Remove this after some time when we're comfortable that\n            // .pb files are mostly gone.\n            if (this.path.endsWith('.pb')) {\n                message += ' Your path contains a .pb file extension. ' +\n                    'Support for .pb models have been removed in TensorFlow.js 1.0 ' +\n                    'in favor of .json models. You can re-convert your Python ' +\n                    'TensorFlow model using the TensorFlow.js 1.0 conversion scripts ' +\n                    'or you can convert your.pb models with the \\'pb2json\\'' +\n                    'NPM script in the tensorflow/tfjs-converter repository.';\n            }\n            else {\n                message += ' Please make sure the server is serving valid ' +\n                    'JSON for this request.';\n            }\n            throw new Error(message);\n        }\n        const modelTopology = modelConfig.modelTopology;\n        const weightsManifest = modelConfig.weightsManifest;\n        const generatedBy = modelConfig.generatedBy;\n        const convertedBy = modelConfig.convertedBy;\n        const format = modelConfig.format;\n        const signature = modelConfig.signature;\n        const userDefinedMetadata = modelConfig.userDefinedMetadata;\n        // We do not allow both modelTopology and weightsManifest to be missing.\n        if (modelTopology == null && weightsManifest == null) {\n            throw new Error(`The JSON from HTTP path ${this.path} contains neither model ` +\n                `topology or manifest for weights.`);\n        }\n        let weightSpecs;\n        let weightData;\n        if (weightsManifest != null) {\n            const results = await this.loadWeights(weightsManifest);\n            [weightSpecs, weightData] = results;\n        }\n        const artifacts = {\n            modelTopology,\n            weightSpecs,\n            weightData,\n            generatedBy,\n            convertedBy,\n            format\n        };\n        if (signature != null) {\n            artifacts.signature = signature;\n        }\n        if (userDefinedMetadata != null) {\n            artifacts.userDefinedMetadata = userDefinedMetadata;\n        }\n        const initializer = modelConfig.modelInitializer;\n        if (initializer) {\n            artifacts.modelInitializer = initializer;\n        }\n        return artifacts;\n    }\n    async loadWeights(weightsManifest) {\n        const weightPath = Array.isArray(this.path) ? this.path[1] : this.path;\n        const [prefix, suffix] = parseUrl(weightPath);\n        const pathPrefix = this.weightPathPrefix || prefix;\n        const weightSpecs = [];\n        for (const entry of weightsManifest) {\n            weightSpecs.push(...entry.weights);\n        }\n        const fetchURLs = [];\n        const urlPromises = [];\n        for (const weightsGroup of weightsManifest) {\n            for (const path of weightsGroup.paths) {\n                if (this.weightUrlConverter != null) {\n                    urlPromises.push(this.weightUrlConverter(path));\n                }\n                else {\n                    fetchURLs.push(pathPrefix + path + suffix);\n                }\n            }\n        }\n        if (this.weightUrlConverter) {\n            fetchURLs.push(...await Promise.all(urlPromises));\n        }\n        const buffers = await loadWeightsAsArrayBuffer(fetchURLs, {\n            requestInit: this.requestInit,\n            fetchFunc: this.fetch,\n            onProgress: this.onProgress\n        });\n        return [weightSpecs, concatenateArrayBuffers(buffers)];\n    }\n}\nHTTPRequest.URL_SCHEME_REGEX = /^https?:\\/\\//;\n/**\n * Extract the prefix and suffix of the url, where the prefix is the path before\n * the last file, and suffix is the search params after the last file.\n * ```\n * const url = 'http://tfhub.dev/model/1/tensorflowjs_model.pb?tfjs-format=file'\n * [prefix, suffix] = parseUrl(url)\n * // prefix = 'http://tfhub.dev/model/1/'\n * // suffix = '?tfjs-format=file'\n * ```\n * @param url the model url to be parsed.\n */\nexport function parseUrl(url) {\n    const lastSlash = url.lastIndexOf('/');\n    const lastSearchParam = url.lastIndexOf('?');\n    const prefix = url.substring(0, lastSlash);\n    const suffix = lastSearchParam > lastSlash ? url.substring(lastSearchParam) : '';\n    return [prefix + '/', suffix];\n}\nexport function isHTTPScheme(url) {\n    return url.match(HTTPRequest.URL_SCHEME_REGEX) != null;\n}\nexport const httpRouter = (url, loadOptions) => {\n    if (typeof fetch === 'undefined' &&\n        (loadOptions == null || loadOptions.fetchFunc == null)) {\n        // `http` uses `fetch` or `node-fetch`, if one wants to use it in\n        // an environment that is not the browser or node they have to setup a\n        // global fetch polyfill.\n        return null;\n    }\n    else {\n        let isHTTP = true;\n        if (Array.isArray(url)) {\n            isHTTP = url.every(urlItem => isHTTPScheme(urlItem));\n        }\n        else {\n            isHTTP = isHTTPScheme(url);\n        }\n        if (isHTTP) {\n            return http(url, loadOptions);\n        }\n    }\n    return null;\n};\nIORouterRegistry.registerSaveRouter(httpRouter);\nIORouterRegistry.registerLoadRouter(httpRouter);\n/**\n * Creates an IOHandler subtype that sends model artifacts to HTTP server.\n *\n * An HTTP request of the `multipart/form-data` mime type will be sent to the\n * `path` URL. The form data includes artifacts that represent the topology\n * and/or weights of the model. In the case of Keras-style `tf.Model`, two\n * blobs (files) exist in form-data:\n *   - A JSON file consisting of `modelTopology` and `weightsManifest`.\n *   - A binary weights file consisting of the concatenated weight values.\n * These files are in the same format as the one generated by\n * [tfjs_converter](https://js.tensorflow.org/tutorials/import-keras.html).\n *\n * The following code snippet exemplifies the client-side code that uses this\n * function:\n *\n * ```js\n * const model = tf.sequential();\n * model.add(\n *     tf.layers.dense({units: 1, inputShape: [100], activation: 'sigmoid'}));\n *\n * const saveResult = await model.save(tf.io.http(\n *     'http://model-server:5000/upload', {requestInit: {method: 'PUT'}}));\n * console.log(saveResult);\n * ```\n *\n * If the default `POST` method is to be used, without any custom parameters\n * such as headers, you can simply pass an HTTP or HTTPS URL to `model.save`:\n *\n * ```js\n * const saveResult = await model.save('http://model-server:5000/upload');\n * ```\n *\n * The following GitHub Gist\n * https://gist.github.com/dsmilkov/1b6046fd6132d7408d5257b0976f7864\n * implements a server based on [flask](https://github.com/pallets/flask) that\n * can receive the request. Upon receiving the model artifacts via the requst,\n * this particular server reconsistutes instances of [Keras\n * Models](https://keras.io/models/model/) in memory.\n *\n *\n * @param path A URL path to the model.\n *   Can be an absolute HTTP path (e.g.,\n *   'http://localhost:8000/model-upload)') or a relative path (e.g.,\n *   './model-upload').\n * @param requestInit Request configurations to be used when sending\n *    HTTP request to server using `fetch`. It can contain fields such as\n *    `method`, `credentials`, `headers`, `mode`, etc. See\n *    https://developer.mozilla.org/en-US/docs/Web/API/Request/Request\n *    for more information. `requestInit` must not have a body, because the\n * body will be set by TensorFlow.js. File blobs representing the model\n * topology (filename: 'model.json') and the weights of the model (filename:\n * 'model.weights.bin') will be appended to the body. If `requestInit` has a\n * `body`, an Error will be thrown.\n * @param loadOptions Optional configuration for the loading. It includes the\n *   following fields:\n *   - weightPathPrefix Optional, this specifies the path prefix for weight\n *     files, by default this is calculated from the path param.\n *   - fetchFunc Optional, custom `fetch` function. E.g., in Node.js,\n *     the `fetch` from node-fetch can be used here.\n *   - onProgress Optional, progress callback function, fired periodically\n *     before the load is completed.\n * @returns An instance of `IOHandler`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Loading',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nexport function http(path, loadOptions) {\n    return new HTTPRequest(path, loadOptions);\n}\n/**\n * Deprecated. Use `tf.io.http`.\n * @param path\n * @param loadOptions\n */\nexport function browserHTTPRequest(path, loadOptions) {\n    return http(path, loadOptions);\n}\n"]},"metadata":{},"sourceType":"module"}
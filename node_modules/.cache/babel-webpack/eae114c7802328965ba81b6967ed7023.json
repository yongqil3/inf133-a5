{"ast":null,"code":"import _asyncToGenerator from \"/Users/ryanliang/Downloads/main_movir_picker/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { gather } from './gather';\nimport { reshape } from './reshape';\nimport { squeeze } from './squeeze';\nimport { whereAsync } from './where_async';\n/**\n * Apply boolean mask to tensor.\n *\n * ```js\n * const tensor = tf.tensor2d([1, 2, 3, 4, 5, 6], [3, 2]);\n * const mask = tf.tensor1d([1, 0, 1], 'bool');\n * const result = await tf.booleanMaskAsync(tensor, mask);\n * result.print();\n * ```\n *\n * @param tensor N-D tensor.\n * @param mask K-D boolean tensor, K <= N and K must be known statically.\n * @param axis A 0-D int Tensor representing the axis in tensor to mask from.\n *     By default, axis is 0 which will mask from the first dimension.\n *     Otherwise K + axis <= N.\n *\n * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}\n */\n\nfunction booleanMaskAsync_(_x, _x2, _x3) {\n  return _booleanMaskAsync_.apply(this, arguments);\n}\n\nfunction _booleanMaskAsync_() {\n  _booleanMaskAsync_ = _asyncToGenerator(function* (tensor, mask, axis) {\n    const $tensor = convertToTensor(tensor, 'tensor', 'boolMask');\n    const $mask = convertToTensor(mask, 'mask', 'boolMask', 'bool');\n    const axisFrom = axis == null ? 0 : axis;\n    const maskDim = $mask.rank;\n    const tensorShape = $tensor.shape;\n    util.assert(maskDim > 0, () => 'mask cannot be scalar');\n    util.assertShapesMatch(tensorShape.slice(axisFrom, axisFrom + maskDim), $mask.shape, `mask's shape must match the first K dimensions of tensor's shape,`);\n    let leadingSize = 1;\n\n    for (let i = axisFrom; i < axisFrom + maskDim; i++) {\n      leadingSize *= tensorShape[i];\n    }\n\n    const targetTensorShape = tensorShape.slice(0, axisFrom).concat([leadingSize], tensorShape.slice(axisFrom + maskDim));\n    const reshapedTensor = reshape($tensor, targetTensorShape);\n    const reshapedMask = reshape($mask, [-1]);\n    const positivePositions = yield whereAsync(reshapedMask);\n    const indices = squeeze(positivePositions, [1]);\n    const res = gather(reshapedTensor, indices, axisFrom); // Ensure no memory leak.\n\n    if (tensor !== $tensor) {\n      $tensor.dispose();\n    }\n\n    if (mask !== $mask) {\n      $mask.dispose();\n    }\n\n    indices.dispose();\n    reshapedTensor.dispose();\n    reshapedMask.dispose();\n    positivePositions.dispose();\n    return res;\n  });\n  return _booleanMaskAsync_.apply(this, arguments);\n}\n\nexport const booleanMaskAsync = booleanMaskAsync_;","map":{"version":3,"sources":["/Users/ryanliang/Downloads/main_movir_picker/node_modules/@tensorflow/tfjs-core/dist/ops/boolean_mask.js"],"names":["convertToTensor","util","gather","reshape","squeeze","whereAsync","booleanMaskAsync_","tensor","mask","axis","$tensor","$mask","axisFrom","maskDim","rank","tensorShape","shape","assert","assertShapesMatch","slice","leadingSize","i","targetTensorShape","concat","reshapedTensor","reshapedMask","positivePositions","indices","res","dispose","booleanMaskAsync"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,eAAT,QAAgC,oBAAhC;AACA,OAAO,KAAKC,IAAZ,MAAsB,SAAtB;AACA,SAASC,MAAT,QAAuB,UAAvB;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,SAASC,UAAT,QAA2B,eAA3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;SACeC,iB;;;;;yCAAf,WAAiCC,MAAjC,EAAyCC,IAAzC,EAA+CC,IAA/C,EAAqD;AACjD,UAAMC,OAAO,GAAGV,eAAe,CAACO,MAAD,EAAS,QAAT,EAAmB,UAAnB,CAA/B;AACA,UAAMI,KAAK,GAAGX,eAAe,CAACQ,IAAD,EAAO,MAAP,EAAe,UAAf,EAA2B,MAA3B,CAA7B;AACA,UAAMI,QAAQ,GAAGH,IAAI,IAAI,IAAR,GAAe,CAAf,GAAmBA,IAApC;AACA,UAAMI,OAAO,GAAGF,KAAK,CAACG,IAAtB;AACA,UAAMC,WAAW,GAAGL,OAAO,CAACM,KAA5B;AACAf,IAAAA,IAAI,CAACgB,MAAL,CAAYJ,OAAO,GAAG,CAAtB,EAAyB,MAAM,uBAA/B;AACAZ,IAAAA,IAAI,CAACiB,iBAAL,CAAuBH,WAAW,CAACI,KAAZ,CAAkBP,QAAlB,EAA4BA,QAAQ,GAAGC,OAAvC,CAAvB,EAAwEF,KAAK,CAACK,KAA9E,EAAsF,mEAAtF;AACA,QAAII,WAAW,GAAG,CAAlB;;AACA,SAAK,IAAIC,CAAC,GAAGT,QAAb,EAAuBS,CAAC,GAAGT,QAAQ,GAAGC,OAAtC,EAA+CQ,CAAC,EAAhD,EAAoD;AAChDD,MAAAA,WAAW,IAAIL,WAAW,CAACM,CAAD,CAA1B;AACH;;AACD,UAAMC,iBAAiB,GAAGP,WAAW,CAACI,KAAZ,CAAkB,CAAlB,EAAqBP,QAArB,EACrBW,MADqB,CACd,CAACH,WAAD,CADc,EACCL,WAAW,CAACI,KAAZ,CAAkBP,QAAQ,GAAGC,OAA7B,CADD,CAA1B;AAEA,UAAMW,cAAc,GAAGrB,OAAO,CAACO,OAAD,EAAUY,iBAAV,CAA9B;AACA,UAAMG,YAAY,GAAGtB,OAAO,CAACQ,KAAD,EAAQ,CAAC,CAAC,CAAF,CAAR,CAA5B;AACA,UAAMe,iBAAiB,SAASrB,UAAU,CAACoB,YAAD,CAA1C;AACA,UAAME,OAAO,GAAGvB,OAAO,CAACsB,iBAAD,EAAoB,CAAC,CAAD,CAApB,CAAvB;AACA,UAAME,GAAG,GAAG1B,MAAM,CAACsB,cAAD,EAAiBG,OAAjB,EAA0Bf,QAA1B,CAAlB,CAlBiD,CAmBjD;;AACA,QAAIL,MAAM,KAAKG,OAAf,EAAwB;AACpBA,MAAAA,OAAO,CAACmB,OAAR;AACH;;AACD,QAAIrB,IAAI,KAAKG,KAAb,EAAoB;AAChBA,MAAAA,KAAK,CAACkB,OAAN;AACH;;AACDF,IAAAA,OAAO,CAACE,OAAR;AACAL,IAAAA,cAAc,CAACK,OAAf;AACAJ,IAAAA,YAAY,CAACI,OAAb;AACAH,IAAAA,iBAAiB,CAACG,OAAlB;AACA,WAAOD,GAAP;AACH,G;;;;AACD,OAAO,MAAME,gBAAgB,GAAGxB,iBAAzB","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { gather } from './gather';\nimport { reshape } from './reshape';\nimport { squeeze } from './squeeze';\nimport { whereAsync } from './where_async';\n/**\n * Apply boolean mask to tensor.\n *\n * ```js\n * const tensor = tf.tensor2d([1, 2, 3, 4, 5, 6], [3, 2]);\n * const mask = tf.tensor1d([1, 0, 1], 'bool');\n * const result = await tf.booleanMaskAsync(tensor, mask);\n * result.print();\n * ```\n *\n * @param tensor N-D tensor.\n * @param mask K-D boolean tensor, K <= N and K must be known statically.\n * @param axis A 0-D int Tensor representing the axis in tensor to mask from.\n *     By default, axis is 0 which will mask from the first dimension.\n *     Otherwise K + axis <= N.\n *\n * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}\n */\nasync function booleanMaskAsync_(tensor, mask, axis) {\n    const $tensor = convertToTensor(tensor, 'tensor', 'boolMask');\n    const $mask = convertToTensor(mask, 'mask', 'boolMask', 'bool');\n    const axisFrom = axis == null ? 0 : axis;\n    const maskDim = $mask.rank;\n    const tensorShape = $tensor.shape;\n    util.assert(maskDim > 0, () => 'mask cannot be scalar');\n    util.assertShapesMatch(tensorShape.slice(axisFrom, axisFrom + maskDim), $mask.shape, `mask's shape must match the first K dimensions of tensor's shape,`);\n    let leadingSize = 1;\n    for (let i = axisFrom; i < axisFrom + maskDim; i++) {\n        leadingSize *= tensorShape[i];\n    }\n    const targetTensorShape = tensorShape.slice(0, axisFrom)\n        .concat([leadingSize], tensorShape.slice(axisFrom + maskDim));\n    const reshapedTensor = reshape($tensor, targetTensorShape);\n    const reshapedMask = reshape($mask, [-1]);\n    const positivePositions = await whereAsync(reshapedMask);\n    const indices = squeeze(positivePositions, [1]);\n    const res = gather(reshapedTensor, indices, axisFrom);\n    // Ensure no memory leak.\n    if (tensor !== $tensor) {\n        $tensor.dispose();\n    }\n    if (mask !== $mask) {\n        $mask.dispose();\n    }\n    indices.dispose();\n    reshapedTensor.dispose();\n    reshapedMask.dispose();\n    positivePositions.dispose();\n    return res;\n}\nexport const booleanMaskAsync = booleanMaskAsync_;\n"]},"metadata":{},"sourceType":"module"}
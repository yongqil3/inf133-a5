{"ast":null,"code":"import _asyncToGenerator from \"/Users/ryanliang/Downloads/main_movir_picker/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { keep, scalar, stack, tidy, unstack, util } from '@tensorflow/tfjs-core'; // tslint:disable-next-line: no-imports-from-dist\n\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n/**\n * Hashtable contains a set of tensors, which can be accessed by key.\n */\n\nexport class HashTable {\n  /**\n   * Constructor of HashTable. Creates a hash table.\n   *\n   * @param keyDType `dtype` of the table keys.\n   * @param valueDType `dtype` of the table values.\n   */\n  constructor(keyDType, valueDType) {\n    this.keyDType = keyDType;\n    this.valueDType = valueDType;\n    this.handle = scalar(0); // tslint:disable-next-line: no-any\n\n    this.tensorMap = new Map();\n    keep(this.handle);\n  }\n\n  get id() {\n    return this.handle.id;\n  }\n  /**\n   * Dispose the tensors and handle and clear the hashtable.\n   */\n\n\n  clearAndClose() {\n    this.tensorMap.forEach(value => value.dispose());\n    this.tensorMap.clear();\n    this.handle.dispose();\n  }\n  /**\n   * The number of items in the hash table.\n   */\n\n\n  size() {\n    return this.tensorMap.size;\n  }\n  /**\n   * The number of items in the hash table as a rank-0 tensor.\n   */\n\n\n  tensorSize() {\n    return tfOps.scalar(this.size(), 'int32');\n  }\n  /**\n   * Replaces the contents of the table with the specified keys and values.\n   * @param keys Keys to store in the hashtable.\n   * @param values Values to store in the hashtable.\n   */\n\n\n  import(keys, values) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.checkKeyAndValueTensor(keys, values); // We only store the primitive values of the keys, this allows lookup\n      // to be O(1).\n\n\n      const $keys = yield keys.data(); // Clear the hashTable before inserting new values.\n\n      _this.tensorMap.forEach(value => value.dispose());\n\n      _this.tensorMap.clear();\n\n      return tidy(() => {\n        const $values = unstack(values);\n        const keysLength = $keys.length;\n        const valuesLength = $values.length;\n        util.assert(keysLength === valuesLength, () => `The number of elements doesn't match, keys has ` + `${keysLength} elements, the values has ${valuesLength} ` + `elements.`);\n\n        for (let i = 0; i < keysLength; i++) {\n          const key = $keys[i];\n          const value = $values[i];\n          keep(value);\n\n          _this.tensorMap.set(key, value);\n        }\n\n        return _this.handle;\n      });\n    })();\n  }\n  /**\n   * Looks up keys in a hash table, outputs the corresponding values.\n   *\n   * Performs batch lookups, for every element in the key tensor, `find`\n   * stacks the corresponding value into the return tensor.\n   *\n   * If an element is not present in the table, the given `defaultValue` is\n   * used.\n   *\n   * @param keys Keys to look up. Must have the same type as the keys of the\n   *     table.\n   * @param defaultValue The scalar `defaultValue` is the value output for keys\n   *     not present in the table. It must also be of the same type as the\n   *     table values.\n   */\n\n\n  find(keys, defaultValue) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      _this2.checkKeyAndValueTensor(keys, defaultValue);\n\n      const $keys = yield keys.data();\n      return tidy(() => {\n        const result = [];\n\n        for (let i = 0; i < $keys.length; i++) {\n          const key = $keys[i];\n\n          const value = _this2.findWithDefault(key, defaultValue);\n\n          result.push(value);\n        }\n\n        return stack(result);\n      });\n    })();\n  } // tslint:disable-next-line: no-any\n\n\n  findWithDefault(key, defaultValue) {\n    const result = this.tensorMap.get(key);\n    return result != null ? result : defaultValue;\n  }\n\n  checkKeyAndValueTensor(key, value) {\n    if (key.dtype !== this.keyDType) {\n      throw new Error(`Expect key dtype ${this.keyDType}, but got ` + `${key.dtype}`);\n    }\n\n    if (value.dtype !== this.valueDType) {\n      throw new Error(`Expect value dtype ${this.valueDType}, but got ` + `${value.dtype}`);\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/ryanliang/Downloads/main_movir_picker/node_modules/@tensorflow/tfjs-converter/dist/executor/hash_table.js"],"names":["keep","scalar","stack","tidy","unstack","util","tfOps","HashTable","constructor","keyDType","valueDType","handle","tensorMap","Map","id","clearAndClose","forEach","value","dispose","clear","size","tensorSize","import","keys","values","checkKeyAndValueTensor","$keys","data","$values","keysLength","length","valuesLength","assert","i","key","set","find","defaultValue","result","findWithDefault","push","get","dtype","Error"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { keep, scalar, stack, tidy, unstack, util } from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n/**\n * Hashtable contains a set of tensors, which can be accessed by key.\n */\nexport class HashTable {\n    /**\n     * Constructor of HashTable. Creates a hash table.\n     *\n     * @param keyDType `dtype` of the table keys.\n     * @param valueDType `dtype` of the table values.\n     */\n    constructor(keyDType, valueDType) {\n        this.keyDType = keyDType;\n        this.valueDType = valueDType;\n        this.handle = scalar(0);\n        // tslint:disable-next-line: no-any\n        this.tensorMap = new Map();\n        keep(this.handle);\n    }\n    get id() {\n        return this.handle.id;\n    }\n    /**\n     * Dispose the tensors and handle and clear the hashtable.\n     */\n    clearAndClose() {\n        this.tensorMap.forEach(value => value.dispose());\n        this.tensorMap.clear();\n        this.handle.dispose();\n    }\n    /**\n     * The number of items in the hash table.\n     */\n    size() {\n        return this.tensorMap.size;\n    }\n    /**\n     * The number of items in the hash table as a rank-0 tensor.\n     */\n    tensorSize() {\n        return tfOps.scalar(this.size(), 'int32');\n    }\n    /**\n     * Replaces the contents of the table with the specified keys and values.\n     * @param keys Keys to store in the hashtable.\n     * @param values Values to store in the hashtable.\n     */\n    async import(keys, values) {\n        this.checkKeyAndValueTensor(keys, values);\n        // We only store the primitive values of the keys, this allows lookup\n        // to be O(1).\n        const $keys = await keys.data();\n        // Clear the hashTable before inserting new values.\n        this.tensorMap.forEach(value => value.dispose());\n        this.tensorMap.clear();\n        return tidy(() => {\n            const $values = unstack(values);\n            const keysLength = $keys.length;\n            const valuesLength = $values.length;\n            util.assert(keysLength === valuesLength, () => `The number of elements doesn't match, keys has ` +\n                `${keysLength} elements, the values has ${valuesLength} ` +\n                `elements.`);\n            for (let i = 0; i < keysLength; i++) {\n                const key = $keys[i];\n                const value = $values[i];\n                keep(value);\n                this.tensorMap.set(key, value);\n            }\n            return this.handle;\n        });\n    }\n    /**\n     * Looks up keys in a hash table, outputs the corresponding values.\n     *\n     * Performs batch lookups, for every element in the key tensor, `find`\n     * stacks the corresponding value into the return tensor.\n     *\n     * If an element is not present in the table, the given `defaultValue` is\n     * used.\n     *\n     * @param keys Keys to look up. Must have the same type as the keys of the\n     *     table.\n     * @param defaultValue The scalar `defaultValue` is the value output for keys\n     *     not present in the table. It must also be of the same type as the\n     *     table values.\n     */\n    async find(keys, defaultValue) {\n        this.checkKeyAndValueTensor(keys, defaultValue);\n        const $keys = await keys.data();\n        return tidy(() => {\n            const result = [];\n            for (let i = 0; i < $keys.length; i++) {\n                const key = $keys[i];\n                const value = this.findWithDefault(key, defaultValue);\n                result.push(value);\n            }\n            return stack(result);\n        });\n    }\n    // tslint:disable-next-line: no-any\n    findWithDefault(key, defaultValue) {\n        const result = this.tensorMap.get(key);\n        return result != null ? result : defaultValue;\n    }\n    checkKeyAndValueTensor(key, value) {\n        if (key.dtype !== this.keyDType) {\n            throw new Error(`Expect key dtype ${this.keyDType}, but got ` +\n                `${key.dtype}`);\n        }\n        if (value.dtype !== this.valueDType) {\n            throw new Error(`Expect value dtype ${this.valueDType}, but got ` +\n                `${value.dtype}`);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}
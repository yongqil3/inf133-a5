{"ast":null,"code":"import _asyncToGenerator from \"/Users/ryanliang/Downloads/main_movir_picker/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from '../environment';\nimport * as util from '../util';\nimport { decodeWeights } from './io_utils';\nimport { monitorPromisesProgress } from './progress';\nimport { DTYPE_VALUE_SIZE_MAP } from './types';\n/**\n * Reads binary weights data from a number of URLs.\n *\n * @param fetchURLs URLs to send the HTTP requests at, using `fetch` calls.\n * @param requestOptions RequestInit (options) for the HTTP requests.\n * @param fetchFunc Optional overriding value for the `window.fetch` function.\n * @param onProgress Optional, progress callback function, fired periodically\n *   before the load is completed.\n * @returns A `Promise` of an Array of `ArrayBuffer`. The Array has the same\n *   length as `fetchURLs`.\n */\n\nexport function loadWeightsAsArrayBuffer(_x, _x2) {\n  return _loadWeightsAsArrayBuffer.apply(this, arguments);\n}\n/**\n * Reads a weights manifest JSON configuration, fetches the weights and\n * returns them as `Tensor`s.\n *\n * @param manifest The weights manifest JSON.\n * @param filePathPrefix The path prefix for filenames given in the manifest.\n *     Defaults to the empty string.\n * @param weightNames The names of the weights to be fetched.\n */\n\nfunction _loadWeightsAsArrayBuffer() {\n  _loadWeightsAsArrayBuffer = _asyncToGenerator(function* (fetchURLs, loadOptions) {\n    if (loadOptions == null) {\n      loadOptions = {};\n    }\n\n    const fetchFunc = loadOptions.fetchFunc == null ? env().platform.fetch : loadOptions.fetchFunc; // Create the requests for all of the weights in parallel.\n\n    const requests = fetchURLs.map(fetchURL => fetchFunc(fetchURL, loadOptions.requestInit, {\n      isBinary: true\n    }));\n    const fetchStartFraction = 0;\n    const fetchEndFraction = 0.5;\n    const responses = loadOptions.onProgress == null ? yield Promise.all(requests) : yield monitorPromisesProgress(requests, loadOptions.onProgress, fetchStartFraction, fetchEndFraction);\n    const bufferPromises = responses.map(response => response.arrayBuffer());\n    const bufferStartFraction = 0.5;\n    const bufferEndFraction = 1;\n    const buffers = loadOptions.onProgress == null ? yield Promise.all(bufferPromises) : yield monitorPromisesProgress(bufferPromises, loadOptions.onProgress, bufferStartFraction, bufferEndFraction);\n    return buffers;\n  });\n  return _loadWeightsAsArrayBuffer.apply(this, arguments);\n}\n\nexport function loadWeights(_x3) {\n  return _loadWeights.apply(this, arguments);\n}\n/**\n * Creates a function, which reads a weights manifest JSON configuration,\n * fetches the weight files using the specified function and returns them as\n * `Tensor`s.\n *\n * ```js\n * // example for creating a nodejs weight loader, which reads the weight files\n * // from disk using fs.readFileSync\n *\n * import * as fs from 'fs'\n *\n * const fetchWeightsFromDisk = (filePaths: string[]) =>\n *   filePaths.map(filePath => fs.readFileSync(filePath).buffer)\n *\n * const loadWeights = tf.io.weightsLoaderFactory(fetchWeightsFromDisk)\n *\n * const manifest = JSON.parse(\n *   fs.readFileSync('./my_model-weights_manifest').toString()\n * )\n * const weightMap = await loadWeights(manifest, './')\n * ```\n * @param fetchWeightsFunction The function used for fetching the weight files.\n * @returns Weight loading function.\n */\n\nfunction _loadWeights() {\n  _loadWeights = _asyncToGenerator(function* (manifest, filePathPrefix = '', weightNames, requestInit) {\n    // TODO(nsthorat): Groups are currently fetched atomically. If you need a\n    // single weight from a group, the whole group will be fetched. At a future\n    // date, we should support fetching only the individual shards within a\n    // group that are needed to reconstruct the requested weight.\n    // TODO(cais): Use `decodeWeights` for implementation.\n    const fetchWeights = fetchUrls => loadWeightsAsArrayBuffer(fetchUrls, {\n      requestInit\n    });\n\n    const loadWeights = weightsLoaderFactory(fetchWeights);\n    return loadWeights(manifest, filePathPrefix, weightNames);\n  });\n  return _loadWeights.apply(this, arguments);\n}\n\nexport function weightsLoaderFactory(fetchWeightsFunction) {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(function* (manifest, filePathPrefix = '', weightNames) {\n      // Collect all the groups, weights, and their relative offsets to be\n      // fetched.\n      const groupIndicesToFetchMap = manifest.map(() => false);\n      const groupWeightsToFetch = {};\n      const weightsFound = weightNames != null ? weightNames.map(() => false) : [];\n      const allManifestWeightNames = [];\n      manifest.forEach((manifestGroupConfig, groupIndex) => {\n        let groupOffset = 0;\n        manifestGroupConfig.weights.forEach(weightsEntry => {\n          const rawDtype = 'quantization' in weightsEntry ? weightsEntry.quantization.dtype : weightsEntry.dtype;\n          const weightsBytes = DTYPE_VALUE_SIZE_MAP[rawDtype] * util.sizeFromShape(weightsEntry.shape);\n\n          const enqueueWeightsForFetchingFn = () => {\n            groupIndicesToFetchMap[groupIndex] = true;\n\n            if (groupWeightsToFetch[groupIndex] == null) {\n              groupWeightsToFetch[groupIndex] = [];\n            }\n\n            groupWeightsToFetch[groupIndex].push({\n              manifestEntry: weightsEntry,\n              groupOffset,\n              sizeBytes: weightsBytes\n            });\n          };\n\n          if (weightNames != null) {\n            weightNames.forEach((weightName, weightIndex) => {\n              if (weightName === weightsEntry.name) {\n                enqueueWeightsForFetchingFn();\n                weightsFound[weightIndex] = true;\n              }\n            });\n          } else {\n            enqueueWeightsForFetchingFn();\n          }\n\n          allManifestWeightNames.push(weightsEntry.name);\n          groupOffset += weightsBytes;\n        });\n      });\n\n      if (!weightsFound.every(found => found)) {\n        const weightsNotFound = weightNames.filter((_, i) => !weightsFound[i]);\n        throw new Error(`Could not find weights in manifest with names: ` + `${weightsNotFound.join(', ')}. \\n` + `Manifest JSON has weights with names: ` + `${allManifestWeightNames.join(', ')}.`);\n      } // Convert the one-hot boolean groupId => shouldFetch map to a list of group\n      // IDs.\n\n\n      const groupIndicesToFetch = groupIndicesToFetchMap.reduce((accumulator, shouldFetch, i) => {\n        if (shouldFetch) {\n          accumulator.push(i);\n        }\n\n        return accumulator;\n      }, []);\n      const fetchUrls = [];\n      groupIndicesToFetch.forEach(i => {\n        manifest[i].paths.forEach(filepath => {\n          const fetchUrl = filePathPrefix + (!filePathPrefix.endsWith('/') ? '/' : '') + filepath;\n          fetchUrls.push(fetchUrl);\n        });\n      });\n      const buffers = yield fetchWeightsFunction(fetchUrls);\n      const weightsTensorMap = {};\n      let bufferIndexOffset = 0;\n      groupIndicesToFetch.forEach(i => {\n        const numBuffers = manifest[i].paths.length;\n        let groupBytes = 0;\n\n        for (let i = 0; i < numBuffers; i++) {\n          groupBytes += buffers[bufferIndexOffset + i].byteLength;\n        } // Create a buffer for the whole group.\n\n\n        const groupBuffer = new ArrayBuffer(groupBytes);\n        const groupByteBuffer = new Uint8Array(groupBuffer);\n        let groupBufferOffset = 0;\n\n        for (let i = 0; i < numBuffers; i++) {\n          const buffer = new Uint8Array(buffers[bufferIndexOffset + i]);\n          groupByteBuffer.set(buffer, groupBufferOffset);\n          groupBufferOffset += buffer.byteLength;\n        }\n\n        const weightsEntries = groupWeightsToFetch[i];\n        weightsEntries.forEach(weightsEntry => {\n          const byteBuffer = groupBuffer.slice(weightsEntry.groupOffset, weightsEntry.groupOffset + weightsEntry.sizeBytes);\n          const nameToTensorMap = decodeWeights(byteBuffer, [weightsEntry.manifestEntry]);\n\n          for (const name in nameToTensorMap) {\n            weightsTensorMap[name] = nameToTensorMap[name];\n          }\n        });\n        bufferIndexOffset += numBuffers;\n      });\n      return weightsTensorMap;\n    });\n\n    return function (_x4) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n}","map":{"version":3,"sources":["/Users/ryanliang/Downloads/main_movir_picker/node_modules/@tensorflow/tfjs-core/dist/io/weights_loader.js"],"names":["env","util","decodeWeights","monitorPromisesProgress","DTYPE_VALUE_SIZE_MAP","loadWeightsAsArrayBuffer","fetchURLs","loadOptions","fetchFunc","platform","fetch","requests","map","fetchURL","requestInit","isBinary","fetchStartFraction","fetchEndFraction","responses","onProgress","Promise","all","bufferPromises","response","arrayBuffer","bufferStartFraction","bufferEndFraction","buffers","loadWeights","manifest","filePathPrefix","weightNames","fetchWeights","fetchUrls","weightsLoaderFactory","fetchWeightsFunction","groupIndicesToFetchMap","groupWeightsToFetch","weightsFound","allManifestWeightNames","forEach","manifestGroupConfig","groupIndex","groupOffset","weights","weightsEntry","rawDtype","quantization","dtype","weightsBytes","sizeFromShape","shape","enqueueWeightsForFetchingFn","push","manifestEntry","sizeBytes","weightName","weightIndex","name","every","found","weightsNotFound","filter","_","i","Error","join","groupIndicesToFetch","reduce","accumulator","shouldFetch","paths","filepath","fetchUrl","endsWith","weightsTensorMap","bufferIndexOffset","numBuffers","length","groupBytes","byteLength","groupBuffer","ArrayBuffer","groupByteBuffer","Uint8Array","groupBufferOffset","buffer","set","weightsEntries","byteBuffer","slice","nameToTensorMap"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from '../environment';\nimport * as util from '../util';\nimport { decodeWeights } from './io_utils';\nimport { monitorPromisesProgress } from './progress';\nimport { DTYPE_VALUE_SIZE_MAP } from './types';\n/**\n * Reads binary weights data from a number of URLs.\n *\n * @param fetchURLs URLs to send the HTTP requests at, using `fetch` calls.\n * @param requestOptions RequestInit (options) for the HTTP requests.\n * @param fetchFunc Optional overriding value for the `window.fetch` function.\n * @param onProgress Optional, progress callback function, fired periodically\n *   before the load is completed.\n * @returns A `Promise` of an Array of `ArrayBuffer`. The Array has the same\n *   length as `fetchURLs`.\n */\nexport async function loadWeightsAsArrayBuffer(fetchURLs, loadOptions) {\n    if (loadOptions == null) {\n        loadOptions = {};\n    }\n    const fetchFunc = loadOptions.fetchFunc == null ? env().platform.fetch :\n        loadOptions.fetchFunc;\n    // Create the requests for all of the weights in parallel.\n    const requests = fetchURLs.map(fetchURL => fetchFunc(fetchURL, loadOptions.requestInit, { isBinary: true }));\n    const fetchStartFraction = 0;\n    const fetchEndFraction = 0.5;\n    const responses = loadOptions.onProgress == null ?\n        await Promise.all(requests) :\n        await monitorPromisesProgress(requests, loadOptions.onProgress, fetchStartFraction, fetchEndFraction);\n    const bufferPromises = responses.map(response => response.arrayBuffer());\n    const bufferStartFraction = 0.5;\n    const bufferEndFraction = 1;\n    const buffers = loadOptions.onProgress == null ?\n        await Promise.all(bufferPromises) :\n        await monitorPromisesProgress(bufferPromises, loadOptions.onProgress, bufferStartFraction, bufferEndFraction);\n    return buffers;\n}\n/**\n * Reads a weights manifest JSON configuration, fetches the weights and\n * returns them as `Tensor`s.\n *\n * @param manifest The weights manifest JSON.\n * @param filePathPrefix The path prefix for filenames given in the manifest.\n *     Defaults to the empty string.\n * @param weightNames The names of the weights to be fetched.\n */\nexport async function loadWeights(manifest, filePathPrefix = '', weightNames, requestInit) {\n    // TODO(nsthorat): Groups are currently fetched atomically. If you need a\n    // single weight from a group, the whole group will be fetched. At a future\n    // date, we should support fetching only the individual shards within a\n    // group that are needed to reconstruct the requested weight.\n    // TODO(cais): Use `decodeWeights` for implementation.\n    const fetchWeights = (fetchUrls) => loadWeightsAsArrayBuffer(fetchUrls, { requestInit });\n    const loadWeights = weightsLoaderFactory(fetchWeights);\n    return loadWeights(manifest, filePathPrefix, weightNames);\n}\n/**\n * Creates a function, which reads a weights manifest JSON configuration,\n * fetches the weight files using the specified function and returns them as\n * `Tensor`s.\n *\n * ```js\n * // example for creating a nodejs weight loader, which reads the weight files\n * // from disk using fs.readFileSync\n *\n * import * as fs from 'fs'\n *\n * const fetchWeightsFromDisk = (filePaths: string[]) =>\n *   filePaths.map(filePath => fs.readFileSync(filePath).buffer)\n *\n * const loadWeights = tf.io.weightsLoaderFactory(fetchWeightsFromDisk)\n *\n * const manifest = JSON.parse(\n *   fs.readFileSync('./my_model-weights_manifest').toString()\n * )\n * const weightMap = await loadWeights(manifest, './')\n * ```\n * @param fetchWeightsFunction The function used for fetching the weight files.\n * @returns Weight loading function.\n */\nexport function weightsLoaderFactory(fetchWeightsFunction) {\n    return async (manifest, filePathPrefix = '', weightNames) => {\n        // Collect all the groups, weights, and their relative offsets to be\n        // fetched.\n        const groupIndicesToFetchMap = manifest.map(() => false);\n        const groupWeightsToFetch = {};\n        const weightsFound = weightNames != null ? weightNames.map(() => false) : [];\n        const allManifestWeightNames = [];\n        manifest.forEach((manifestGroupConfig, groupIndex) => {\n            let groupOffset = 0;\n            manifestGroupConfig.weights.forEach(weightsEntry => {\n                const rawDtype = ('quantization' in weightsEntry) ?\n                    weightsEntry.quantization.dtype :\n                    weightsEntry.dtype;\n                const weightsBytes = DTYPE_VALUE_SIZE_MAP[rawDtype] *\n                    util.sizeFromShape(weightsEntry.shape);\n                const enqueueWeightsForFetchingFn = () => {\n                    groupIndicesToFetchMap[groupIndex] = true;\n                    if (groupWeightsToFetch[groupIndex] == null) {\n                        groupWeightsToFetch[groupIndex] = [];\n                    }\n                    groupWeightsToFetch[groupIndex].push({\n                        manifestEntry: weightsEntry,\n                        groupOffset,\n                        sizeBytes: weightsBytes\n                    });\n                };\n                if (weightNames != null) {\n                    weightNames.forEach((weightName, weightIndex) => {\n                        if (weightName === weightsEntry.name) {\n                            enqueueWeightsForFetchingFn();\n                            weightsFound[weightIndex] = true;\n                        }\n                    });\n                }\n                else {\n                    enqueueWeightsForFetchingFn();\n                }\n                allManifestWeightNames.push(weightsEntry.name);\n                groupOffset += weightsBytes;\n            });\n        });\n        if (!weightsFound.every(found => found)) {\n            const weightsNotFound = weightNames.filter((_, i) => !weightsFound[i]);\n            throw new Error(`Could not find weights in manifest with names: ` +\n                `${weightsNotFound.join(', ')}. \\n` +\n                `Manifest JSON has weights with names: ` +\n                `${allManifestWeightNames.join(', ')}.`);\n        }\n        // Convert the one-hot boolean groupId => shouldFetch map to a list of group\n        // IDs.\n        const groupIndicesToFetch = groupIndicesToFetchMap.reduce((accumulator, shouldFetch, i) => {\n            if (shouldFetch) {\n                accumulator.push(i);\n            }\n            return accumulator;\n        }, []);\n        const fetchUrls = [];\n        groupIndicesToFetch.forEach(i => {\n            manifest[i].paths.forEach(filepath => {\n                const fetchUrl = filePathPrefix +\n                    (!filePathPrefix.endsWith('/') ? '/' : '') + filepath;\n                fetchUrls.push(fetchUrl);\n            });\n        });\n        const buffers = await fetchWeightsFunction(fetchUrls);\n        const weightsTensorMap = {};\n        let bufferIndexOffset = 0;\n        groupIndicesToFetch.forEach(i => {\n            const numBuffers = manifest[i].paths.length;\n            let groupBytes = 0;\n            for (let i = 0; i < numBuffers; i++) {\n                groupBytes += buffers[bufferIndexOffset + i].byteLength;\n            }\n            // Create a buffer for the whole group.\n            const groupBuffer = new ArrayBuffer(groupBytes);\n            const groupByteBuffer = new Uint8Array(groupBuffer);\n            let groupBufferOffset = 0;\n            for (let i = 0; i < numBuffers; i++) {\n                const buffer = new Uint8Array(buffers[bufferIndexOffset + i]);\n                groupByteBuffer.set(buffer, groupBufferOffset);\n                groupBufferOffset += buffer.byteLength;\n            }\n            const weightsEntries = groupWeightsToFetch[i];\n            weightsEntries.forEach(weightsEntry => {\n                const byteBuffer = groupBuffer.slice(weightsEntry.groupOffset, weightsEntry.groupOffset + weightsEntry.sizeBytes);\n                const nameToTensorMap = decodeWeights(byteBuffer, [weightsEntry.manifestEntry]);\n                for (const name in nameToTensorMap) {\n                    weightsTensorMap[name] = nameToTensorMap[name];\n                }\n            });\n            bufferIndexOffset += numBuffers;\n        });\n        return weightsTensorMap;\n    };\n}\n"]},"metadata":{},"sourceType":"module"}
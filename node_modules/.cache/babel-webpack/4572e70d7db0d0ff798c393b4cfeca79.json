{"ast":null,"code":"import _asyncToGenerator from \"/Users/ryanliang/Downloads/main_movir_picker/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { dispose, tidy } from '../globals';\nimport { add } from '../ops/add';\nimport { div } from '../ops/div';\nimport { fill } from '../ops/fill';\nimport { mul } from '../ops/mul';\nimport { sqrt } from '../ops/sqrt';\nimport { square } from '../ops/square';\nimport { registerClass } from '../serialization';\nimport { Optimizer } from './optimizer';\n/** @doclink Optimizer */\n\nexport class AdagradOptimizer extends Optimizer {\n  constructor(learningRate, initialAccumulatorValue = 0.1) {\n    super();\n    this.learningRate = learningRate;\n    this.initialAccumulatorValue = initialAccumulatorValue;\n    this.accumulatedGrads = [];\n  }\n\n  applyGradients(variableGradients) {\n    const variableNames = Array.isArray(variableGradients) ? variableGradients.map(item => item.name) : Object.keys(variableGradients);\n    variableNames.forEach((name, i) => {\n      const value = ENGINE.registeredVariables[name];\n\n      if (this.accumulatedGrads[i] == null) {\n        const trainable = false;\n        this.accumulatedGrads[i] = {\n          originalName: `${name}/accumulator`,\n          variable: tidy(() => fill(value.shape, this.initialAccumulatorValue).variable(trainable))\n        };\n      }\n\n      const gradient = Array.isArray(variableGradients) ? variableGradients[i].tensor : variableGradients[name];\n\n      if (gradient == null) {\n        return;\n      }\n\n      const accumulatedGrad = this.accumulatedGrads[i].variable;\n      tidy(() => {\n        const newAccumulatedGrad = add(accumulatedGrad, square(gradient));\n        accumulatedGrad.assign(newAccumulatedGrad);\n        const newValue = add(mul(div(gradient, sqrt(add(newAccumulatedGrad, ENGINE.backend.epsilon()))), -this.learningRate), value);\n        value.assign(newValue);\n      });\n    });\n    this.incrementIterations();\n  }\n\n  dispose() {\n    if (this.accumulatedGrads != null) {\n      dispose(this.accumulatedGrads.map(v => v.variable));\n    }\n  }\n\n  getWeights() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      // Order matters for Python compatibility.\n      return [yield _this.saveIterations()].concat(_this.accumulatedGrads.map(v => ({\n        name: v.originalName,\n        tensor: v.variable\n      })));\n    })();\n  }\n\n  setWeights(weightValues) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      weightValues = yield _this2.extractIterations(weightValues);\n      const trainable = false;\n      _this2.accumulatedGrads = weightValues.map(v => ({\n        originalName: v.name,\n        variable: v.tensor.variable(trainable)\n      }));\n    })();\n  }\n\n  getConfig() {\n    return {\n      'learningRate': this.learningRate,\n      'initialAccumulatorValue': this.initialAccumulatorValue\n    };\n  }\n  /** @nocollapse */\n\n\n  static fromConfig(cls, config) {\n    return new cls(config['learningRate'], config['initialAccumulatorValue']);\n  }\n\n}\n/** @nocollapse */\n\nAdagradOptimizer.className = 'Adagrad'; // Note: Name matters for Python compatibility.\n\nregisterClass(AdagradOptimizer);","map":{"version":3,"sources":["/Users/ryanliang/Downloads/main_movir_picker/node_modules/@tensorflow/tfjs-core/dist/optimizers/adagrad_optimizer.js"],"names":["ENGINE","dispose","tidy","add","div","fill","mul","sqrt","square","registerClass","Optimizer","AdagradOptimizer","constructor","learningRate","initialAccumulatorValue","accumulatedGrads","applyGradients","variableGradients","variableNames","Array","isArray","map","item","name","Object","keys","forEach","i","value","registeredVariables","trainable","originalName","variable","shape","gradient","tensor","accumulatedGrad","newAccumulatedGrad","assign","newValue","backend","epsilon","incrementIterations","v","getWeights","saveIterations","concat","setWeights","weightValues","extractIterations","getConfig","fromConfig","cls","config","className"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { dispose, tidy } from '../globals';\nimport { add } from '../ops/add';\nimport { div } from '../ops/div';\nimport { fill } from '../ops/fill';\nimport { mul } from '../ops/mul';\nimport { sqrt } from '../ops/sqrt';\nimport { square } from '../ops/square';\nimport { registerClass } from '../serialization';\nimport { Optimizer } from './optimizer';\n/** @doclink Optimizer */\nexport class AdagradOptimizer extends Optimizer {\n    constructor(learningRate, initialAccumulatorValue = 0.1) {\n        super();\n        this.learningRate = learningRate;\n        this.initialAccumulatorValue = initialAccumulatorValue;\n        this.accumulatedGrads = [];\n    }\n    applyGradients(variableGradients) {\n        const variableNames = Array.isArray(variableGradients) ?\n            variableGradients.map(item => item.name) :\n            Object.keys(variableGradients);\n        variableNames.forEach((name, i) => {\n            const value = ENGINE.registeredVariables[name];\n            if (this.accumulatedGrads[i] == null) {\n                const trainable = false;\n                this.accumulatedGrads[i] = {\n                    originalName: `${name}/accumulator`,\n                    variable: tidy(() => fill(value.shape, this.initialAccumulatorValue)\n                        .variable(trainable))\n                };\n            }\n            const gradient = Array.isArray(variableGradients) ?\n                variableGradients[i].tensor :\n                variableGradients[name];\n            if (gradient == null) {\n                return;\n            }\n            const accumulatedGrad = this.accumulatedGrads[i].variable;\n            tidy(() => {\n                const newAccumulatedGrad = add(accumulatedGrad, square(gradient));\n                accumulatedGrad.assign(newAccumulatedGrad);\n                const newValue = add(mul(div(gradient, sqrt(add(newAccumulatedGrad, ENGINE.backend.epsilon()))), -this.learningRate), value);\n                value.assign(newValue);\n            });\n        });\n        this.incrementIterations();\n    }\n    dispose() {\n        if (this.accumulatedGrads != null) {\n            dispose(this.accumulatedGrads.map(v => v.variable));\n        }\n    }\n    async getWeights() {\n        // Order matters for Python compatibility.\n        return [await this.saveIterations()].concat(this.accumulatedGrads.map(v => ({ name: v.originalName, tensor: v.variable })));\n    }\n    async setWeights(weightValues) {\n        weightValues = await this.extractIterations(weightValues);\n        const trainable = false;\n        this.accumulatedGrads = weightValues.map(v => ({ originalName: v.name, variable: v.tensor.variable(trainable) }));\n    }\n    getConfig() {\n        return {\n            'learningRate': this.learningRate,\n            'initialAccumulatorValue': this.initialAccumulatorValue,\n        };\n    }\n    /** @nocollapse */\n    static fromConfig(cls, config) {\n        return new cls(config['learningRate'], config['initialAccumulatorValue']);\n    }\n}\n/** @nocollapse */\nAdagradOptimizer.className = 'Adagrad'; // Note: Name matters for Python compatibility.\nregisterClass(AdagradOptimizer);\n"]},"metadata":{},"sourceType":"module"}
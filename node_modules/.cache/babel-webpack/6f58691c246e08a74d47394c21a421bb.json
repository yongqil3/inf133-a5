{"ast":null,"code":"import _asyncToGenerator from \"/Users/ryanliang/Downloads/main_movir_picker/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { keep, tidy } from '../globals';\nimport { add } from '../ops/add';\nimport { mul } from '../ops/mul';\nimport { scalar } from '../ops/scalar';\nimport { registerClass } from '../serialization';\nimport { Optimizer } from './optimizer';\n/** @doclink Optimizer */\n\nexport class SGDOptimizer extends Optimizer {\n  constructor(learningRate) {\n    super();\n    this.learningRate = learningRate;\n    this.setLearningRate(learningRate);\n  }\n\n  applyGradients(variableGradients) {\n    const varNames = Array.isArray(variableGradients) ? variableGradients.map(v => v.name) : Object.keys(variableGradients);\n    varNames.forEach((name, i) => {\n      const gradient = Array.isArray(variableGradients) ? variableGradients[i].tensor : variableGradients[name];\n\n      if (gradient == null) {\n        return;\n      }\n\n      const value = ENGINE.registeredVariables[name];\n      tidy(() => {\n        const newValue = add(mul(this.c, gradient), value);\n        value.assign(newValue);\n      });\n    });\n    this.incrementIterations();\n  }\n  /**\n   * Sets the learning rate of the optimizer.\n   */\n\n\n  setLearningRate(learningRate) {\n    this.learningRate = learningRate;\n\n    if (this.c != null) {\n      this.c.dispose();\n    }\n\n    this.c = keep(scalar(-learningRate));\n  }\n\n  dispose() {\n    this.c.dispose();\n  }\n\n  getWeights() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      return [yield _this.saveIterations()];\n    })();\n  }\n\n  setWeights(weightValues) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      weightValues = yield _this2.extractIterations(weightValues);\n\n      if (weightValues.length !== 0) {\n        throw new Error('SGD optimizer does not have settable weights.');\n      }\n    })();\n  }\n\n  getConfig() {\n    return {\n      'learningRate': this.learningRate\n    };\n  }\n  /** @nocollapse */\n\n\n  static fromConfig(cls, config) {\n    return new cls(config['learningRate']);\n  }\n\n}\n/** @nocollapse */\n\nSGDOptimizer.className = 'SGD'; // Note: Name matters for Python compatibility.\n\nregisterClass(SGDOptimizer);","map":{"version":3,"sources":["/Users/ryanliang/Downloads/main_movir_picker/node_modules/@tensorflow/tfjs-core/dist/optimizers/sgd_optimizer.js"],"names":["ENGINE","keep","tidy","add","mul","scalar","registerClass","Optimizer","SGDOptimizer","constructor","learningRate","setLearningRate","applyGradients","variableGradients","varNames","Array","isArray","map","v","name","Object","keys","forEach","i","gradient","tensor","value","registeredVariables","newValue","c","assign","incrementIterations","dispose","getWeights","saveIterations","setWeights","weightValues","extractIterations","length","Error","getConfig","fromConfig","cls","config","className"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,MAAT,QAAuB,WAAvB;AACA,SAASC,IAAT,EAAeC,IAAf,QAA2B,YAA3B;AACA,SAASC,GAAT,QAAoB,YAApB;AACA,SAASC,GAAT,QAAoB,YAApB;AACA,SAASC,MAAT,QAAuB,eAAvB;AACA,SAASC,aAAT,QAA8B,kBAA9B;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA;;AACA,OAAO,MAAMC,YAAN,SAA2BD,SAA3B,CAAqC;AACxCE,EAAAA,WAAW,CAACC,YAAD,EAAe;AACtB;AACA,SAAKA,YAAL,GAAoBA,YAApB;AACA,SAAKC,eAAL,CAAqBD,YAArB;AACH;;AACDE,EAAAA,cAAc,CAACC,iBAAD,EAAoB;AAC9B,UAAMC,QAAQ,GAAGC,KAAK,CAACC,OAAN,CAAcH,iBAAd,IACbA,iBAAiB,CAACI,GAAlB,CAAsBC,CAAC,IAAIA,CAAC,CAACC,IAA7B,CADa,GAEbC,MAAM,CAACC,IAAP,CAAYR,iBAAZ,CAFJ;AAGAC,IAAAA,QAAQ,CAACQ,OAAT,CAAiB,CAACH,IAAD,EAAOI,CAAP,KAAa;AAC1B,YAAMC,QAAQ,GAAGT,KAAK,CAACC,OAAN,CAAcH,iBAAd,IACbA,iBAAiB,CAACU,CAAD,CAAjB,CAAqBE,MADR,GAEbZ,iBAAiB,CAACM,IAAD,CAFrB;;AAGA,UAAIK,QAAQ,IAAI,IAAhB,EAAsB;AAClB;AACH;;AACD,YAAME,KAAK,GAAG1B,MAAM,CAAC2B,mBAAP,CAA2BR,IAA3B,CAAd;AACAjB,MAAAA,IAAI,CAAC,MAAM;AACP,cAAM0B,QAAQ,GAAGzB,GAAG,CAACC,GAAG,CAAC,KAAKyB,CAAN,EAASL,QAAT,CAAJ,EAAwBE,KAAxB,CAApB;AACAA,QAAAA,KAAK,CAACI,MAAN,CAAaF,QAAb;AACH,OAHG,CAAJ;AAIH,KAZD;AAaA,SAAKG,mBAAL;AACH;AACD;AACJ;AACA;;;AACIpB,EAAAA,eAAe,CAACD,YAAD,EAAe;AAC1B,SAAKA,YAAL,GAAoBA,YAApB;;AACA,QAAI,KAAKmB,CAAL,IAAU,IAAd,EAAoB;AAChB,WAAKA,CAAL,CAAOG,OAAP;AACH;;AACD,SAAKH,CAAL,GAAS5B,IAAI,CAACI,MAAM,CAAC,CAACK,YAAF,CAAP,CAAb;AACH;;AACDsB,EAAAA,OAAO,GAAG;AACN,SAAKH,CAAL,CAAOG,OAAP;AACH;;AACKC,EAAAA,UAAU,GAAG;AAAA;;AAAA;AACf,aAAO,OAAO,KAAI,CAACC,cAAL,EAAP,CAAP;AADe;AAElB;;AACKC,EAAAA,UAAU,CAACC,YAAD,EAAe;AAAA;;AAAA;AAC3BA,MAAAA,YAAY,SAAS,MAAI,CAACC,iBAAL,CAAuBD,YAAvB,CAArB;;AACA,UAAIA,YAAY,CAACE,MAAb,KAAwB,CAA5B,EAA+B;AAC3B,cAAM,IAAIC,KAAJ,CAAU,+CAAV,CAAN;AACH;AAJ0B;AAK9B;;AACDC,EAAAA,SAAS,GAAG;AACR,WAAO;AAAE,sBAAgB,KAAK9B;AAAvB,KAAP;AACH;AACD;;;AACiB,SAAV+B,UAAU,CAACC,GAAD,EAAMC,MAAN,EAAc;AAC3B,WAAO,IAAID,GAAJ,CAAQC,MAAM,CAAC,cAAD,CAAd,CAAP;AACH;;AArDuC;AAuD5C;;AACAnC,YAAY,CAACoC,SAAb,GAAyB,KAAzB,C,CAAgC;;AAChCtC,aAAa,CAACE,YAAD,CAAb","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { keep, tidy } from '../globals';\nimport { add } from '../ops/add';\nimport { mul } from '../ops/mul';\nimport { scalar } from '../ops/scalar';\nimport { registerClass } from '../serialization';\nimport { Optimizer } from './optimizer';\n/** @doclink Optimizer */\nexport class SGDOptimizer extends Optimizer {\n    constructor(learningRate) {\n        super();\n        this.learningRate = learningRate;\n        this.setLearningRate(learningRate);\n    }\n    applyGradients(variableGradients) {\n        const varNames = Array.isArray(variableGradients) ?\n            variableGradients.map(v => v.name) :\n            Object.keys(variableGradients);\n        varNames.forEach((name, i) => {\n            const gradient = Array.isArray(variableGradients) ?\n                variableGradients[i].tensor :\n                variableGradients[name];\n            if (gradient == null) {\n                return;\n            }\n            const value = ENGINE.registeredVariables[name];\n            tidy(() => {\n                const newValue = add(mul(this.c, gradient), value);\n                value.assign(newValue);\n            });\n        });\n        this.incrementIterations();\n    }\n    /**\n     * Sets the learning rate of the optimizer.\n     */\n    setLearningRate(learningRate) {\n        this.learningRate = learningRate;\n        if (this.c != null) {\n            this.c.dispose();\n        }\n        this.c = keep(scalar(-learningRate));\n    }\n    dispose() {\n        this.c.dispose();\n    }\n    async getWeights() {\n        return [await this.saveIterations()];\n    }\n    async setWeights(weightValues) {\n        weightValues = await this.extractIterations(weightValues);\n        if (weightValues.length !== 0) {\n            throw new Error('SGD optimizer does not have settable weights.');\n        }\n    }\n    getConfig() {\n        return { 'learningRate': this.learningRate };\n    }\n    /** @nocollapse */\n    static fromConfig(cls, config) {\n        return new cls(config['learningRate']);\n    }\n}\n/** @nocollapse */\nSGDOptimizer.className = 'SGD'; // Note: Name matters for Python compatibility.\nregisterClass(SGDOptimizer);\n"]},"metadata":{},"sourceType":"module"}
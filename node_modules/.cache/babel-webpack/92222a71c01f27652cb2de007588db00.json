{"ast":null,"code":"import _asyncToGenerator from \"/Users/ryanliang/Downloads/main_movir_picker/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/* Original source: keras/callbacks.py */\nimport { BaseCallback } from './base_callbacks';\nimport { LayersModel } from './engine/training';\nimport { NotImplementedError } from './errors';\nimport { resolveScalarsInLogs } from './logs';\nexport class Callback extends BaseCallback {\n  constructor() {\n    super(...arguments);\n    /** Instance of `keras.models.Model`. Reference of the model being trained. */\n\n    this.model = null;\n  }\n\n  setModel(model) {\n    if (!(model instanceof LayersModel)) {\n      throw new Error('model must be a LayersModel, not some other Container');\n    }\n\n    this.model = model;\n  }\n\n}\n\nfunction less(currVal, prevVal) {\n  return currVal < prevVal;\n}\n\nfunction greater(currVal, prevVal) {\n  return currVal > prevVal;\n}\n/**\n * A Callback that stops training when a monitored quantity has stopped\n * improving.\n */\n\n\nexport class EarlyStopping extends Callback {\n  constructor(args) {\n    super();\n\n    if (args == null) {\n      args = {};\n    }\n\n    if (args.restoreBestWeights) {\n      throw new NotImplementedError('restoreBestWeights = True is not implemented in EarlyStopping yet.');\n    }\n\n    this.monitor = args.monitor || 'val_loss';\n    this.minDelta = Math.abs(args.minDelta || 0);\n    this.patience = args.patience || 0;\n    this.verbose = args.verbose || 0;\n    this.mode = args.mode || 'auto';\n    this.baseline = args.baseline;\n\n    if (['auto', 'min', 'max'].indexOf(this.mode) === -1) {\n      console.warn(`EarlyStopping mode '${this.mode}' is invalid. ` + `Falling back to mode 'auto'.`);\n      this.mode = 'auto';\n    }\n\n    if (this.mode === 'min') {\n      this.monitorFunc = less;\n    } else if (this.mode === 'max') {\n      this.monitorFunc = greater;\n    } else {\n      // For mode === 'auto'.\n      if (this.monitor.indexOf('acc') !== -1) {\n        this.monitorFunc = greater;\n      } else {\n        this.monitorFunc = less;\n      }\n    }\n\n    if (this.monitorFunc === less) {\n      this.minDelta *= -1;\n    }\n  }\n\n  onTrainBegin(logs) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.wait = 0;\n      _this.stoppedEpoch = 0;\n\n      if (_this.baseline != null) {\n        _this.best = _this.baseline;\n      } else {\n        _this.best = _this.monitorFunc === less ? Infinity : -Infinity;\n      }\n    })();\n  }\n\n  onEpochEnd(epoch, logs) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      yield resolveScalarsInLogs(logs);\n\n      const current = _this2.getMonitorValue(logs);\n\n      if (current == null) {\n        return;\n      }\n\n      if (_this2.monitorFunc(current - _this2.minDelta, _this2.best)) {\n        _this2.best = current;\n        _this2.wait = 0; // TODO(cais): Logic for restoreBestWeights.\n      } else {\n        _this2.wait++;\n\n        if (_this2.wait >= _this2.patience) {\n          _this2.stoppedEpoch = epoch;\n          _this2.model.stopTraining = true;\n        } // TODO(cais): Logic for restoreBestWeights.\n\n      }\n    })();\n  }\n\n  onTrainEnd(logs) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this3.stoppedEpoch > 0 && _this3.verbose) {\n        console.log(`Epoch ${_this3.stoppedEpoch}: early stopping.`);\n      }\n    })();\n  }\n\n  getMonitorValue(logs) {\n    if (logs == null) {\n      logs = {};\n    }\n\n    const monitorValue = logs[this.monitor];\n\n    if (monitorValue == null) {\n      console.warn(`Metric for EarlyStopping ${this.monitor} is not available. ` + `Available metrics are: ${Object.keys(logs)}`);\n    }\n\n    return monitorValue;\n  }\n\n}\n/**\n * Factory function for a Callback that stops training when a monitored\n * quantity has stopped improving.\n *\n * Early stopping is a type of regularization, and protects model against\n * overfitting.\n *\n * The following example based on fake data illustrates how this callback\n * can be used during `tf.LayersModel.fit()`:\n *\n * ```js\n * const model = tf.sequential();\n * model.add(tf.layers.dense({\n *   units: 3,\n *   activation: 'softmax',\n *   kernelInitializer: 'ones',\n *   inputShape: [2]\n * }));\n * const xs = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n * const ys = tf.tensor2d([[1, 0, 0], [0, 1, 0]], [2, 3]);\n * const xsVal = tf.tensor2d([4, 3, 2, 1], [2, 2]);\n * const ysVal = tf.tensor2d([[0, 0, 1], [0, 1, 0]], [2, 3]);\n * model.compile(\n *     {loss: 'categoricalCrossentropy', optimizer: 'sgd', metrics: ['acc']});\n *\n * // Without the EarlyStopping callback, the val_acc value would be:\n * //   0.5, 0.5, 0.5, 0.5, ...\n * // With val_acc being monitored, training should stop after the 2nd epoch.\n * const history = await model.fit(xs, ys, {\n *   epochs: 10,\n *   validationData: [xsVal, ysVal],\n *   callbacks: tf.callbacks.earlyStopping({monitor: 'val_acc'})\n * });\n *\n * // Expect to see a length-2 array.\n * console.log(history.history.val_acc);\n * ```\n *\n * @doc {\n *   heading: 'Callbacks',\n *   namespace: 'callbacks'\n * }\n */\n\nexport function earlyStopping(args) {\n  return new EarlyStopping(args);\n}\nexport const callbacks = {\n  earlyStopping\n};","map":{"version":3,"sources":["/Users/ryanliang/Downloads/main_movir_picker/node_modules/@tensorflow/tfjs-layers/dist/callbacks.js"],"names":["BaseCallback","LayersModel","NotImplementedError","resolveScalarsInLogs","Callback","constructor","arguments","model","setModel","Error","less","currVal","prevVal","greater","EarlyStopping","args","restoreBestWeights","monitor","minDelta","Math","abs","patience","verbose","mode","baseline","indexOf","console","warn","monitorFunc","onTrainBegin","logs","wait","stoppedEpoch","best","Infinity","onEpochEnd","epoch","current","getMonitorValue","stopTraining","onTrainEnd","log","monitorValue","Object","keys","earlyStopping","callbacks"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/* Original source: keras/callbacks.py */\nimport { BaseCallback } from './base_callbacks';\nimport { LayersModel } from './engine/training';\nimport { NotImplementedError } from './errors';\nimport { resolveScalarsInLogs } from './logs';\nexport class Callback extends BaseCallback {\n    constructor() {\n        super(...arguments);\n        /** Instance of `keras.models.Model`. Reference of the model being trained. */\n        this.model = null;\n    }\n    setModel(model) {\n        if (!(model instanceof LayersModel)) {\n            throw new Error('model must be a LayersModel, not some other Container');\n        }\n        this.model = model;\n    }\n}\nfunction less(currVal, prevVal) {\n    return currVal < prevVal;\n}\nfunction greater(currVal, prevVal) {\n    return currVal > prevVal;\n}\n/**\n * A Callback that stops training when a monitored quantity has stopped\n * improving.\n */\nexport class EarlyStopping extends Callback {\n    constructor(args) {\n        super();\n        if (args == null) {\n            args = {};\n        }\n        if (args.restoreBestWeights) {\n            throw new NotImplementedError('restoreBestWeights = True is not implemented in EarlyStopping yet.');\n        }\n        this.monitor = args.monitor || 'val_loss';\n        this.minDelta = Math.abs(args.minDelta || 0);\n        this.patience = args.patience || 0;\n        this.verbose = args.verbose || 0;\n        this.mode = args.mode || 'auto';\n        this.baseline = args.baseline;\n        if (['auto', 'min', 'max'].indexOf(this.mode) === -1) {\n            console.warn(`EarlyStopping mode '${this.mode}' is invalid. ` +\n                `Falling back to mode 'auto'.`);\n            this.mode = 'auto';\n        }\n        if (this.mode === 'min') {\n            this.monitorFunc = less;\n        }\n        else if (this.mode === 'max') {\n            this.monitorFunc = greater;\n        }\n        else {\n            // For mode === 'auto'.\n            if (this.monitor.indexOf('acc') !== -1) {\n                this.monitorFunc = greater;\n            }\n            else {\n                this.monitorFunc = less;\n            }\n        }\n        if (this.monitorFunc === less) {\n            this.minDelta *= -1;\n        }\n    }\n    async onTrainBegin(logs) {\n        this.wait = 0;\n        this.stoppedEpoch = 0;\n        if (this.baseline != null) {\n            this.best = this.baseline;\n        }\n        else {\n            this.best = this.monitorFunc === less ? Infinity : -Infinity;\n        }\n    }\n    async onEpochEnd(epoch, logs) {\n        await resolveScalarsInLogs(logs);\n        const current = this.getMonitorValue(logs);\n        if (current == null) {\n            return;\n        }\n        if (this.monitorFunc(current - this.minDelta, this.best)) {\n            this.best = current;\n            this.wait = 0;\n            // TODO(cais): Logic for restoreBestWeights.\n        }\n        else {\n            this.wait++;\n            if (this.wait >= this.patience) {\n                this.stoppedEpoch = epoch;\n                this.model.stopTraining = true;\n            }\n            // TODO(cais): Logic for restoreBestWeights.\n        }\n    }\n    async onTrainEnd(logs) {\n        if (this.stoppedEpoch > 0 && this.verbose) {\n            console.log(`Epoch ${this.stoppedEpoch}: early stopping.`);\n        }\n    }\n    getMonitorValue(logs) {\n        if (logs == null) {\n            logs = {};\n        }\n        const monitorValue = logs[this.monitor];\n        if (monitorValue == null) {\n            console.warn(`Metric for EarlyStopping ${this.monitor} is not available. ` +\n                `Available metrics are: ${Object.keys(logs)}`);\n        }\n        return monitorValue;\n    }\n}\n/**\n * Factory function for a Callback that stops training when a monitored\n * quantity has stopped improving.\n *\n * Early stopping is a type of regularization, and protects model against\n * overfitting.\n *\n * The following example based on fake data illustrates how this callback\n * can be used during `tf.LayersModel.fit()`:\n *\n * ```js\n * const model = tf.sequential();\n * model.add(tf.layers.dense({\n *   units: 3,\n *   activation: 'softmax',\n *   kernelInitializer: 'ones',\n *   inputShape: [2]\n * }));\n * const xs = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n * const ys = tf.tensor2d([[1, 0, 0], [0, 1, 0]], [2, 3]);\n * const xsVal = tf.tensor2d([4, 3, 2, 1], [2, 2]);\n * const ysVal = tf.tensor2d([[0, 0, 1], [0, 1, 0]], [2, 3]);\n * model.compile(\n *     {loss: 'categoricalCrossentropy', optimizer: 'sgd', metrics: ['acc']});\n *\n * // Without the EarlyStopping callback, the val_acc value would be:\n * //   0.5, 0.5, 0.5, 0.5, ...\n * // With val_acc being monitored, training should stop after the 2nd epoch.\n * const history = await model.fit(xs, ys, {\n *   epochs: 10,\n *   validationData: [xsVal, ysVal],\n *   callbacks: tf.callbacks.earlyStopping({monitor: 'val_acc'})\n * });\n *\n * // Expect to see a length-2 array.\n * console.log(history.history.val_acc);\n * ```\n *\n * @doc {\n *   heading: 'Callbacks',\n *   namespace: 'callbacks'\n * }\n */\nexport function earlyStopping(args) {\n    return new EarlyStopping(args);\n}\nexport const callbacks = { earlyStopping };\n"]},"metadata":{},"sourceType":"module"}
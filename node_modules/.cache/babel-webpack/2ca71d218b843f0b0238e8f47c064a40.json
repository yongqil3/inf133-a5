{"ast":null,"code":"import _asyncToGenerator from \"/Users/ryanliang/Downloads/main_movir_picker/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport { dispose } from '@tensorflow/tfjs-core';\n/**\n * Turn any Scalar values in a Logs object into actual number values.\n *\n * @param logs The `Logs` object to be resolved in place.\n */\n\nexport function resolveScalarsInLogs(_x) {\n  return _resolveScalarsInLogs.apply(this, arguments);\n}\n/**\n * Dispose all Tensors in an UnresolvedLogs object.\n *\n * @param logs An `UnresolvedLogs` object potentially containing `tf.Tensor`s in\n *   places where the values can be `tf.Tensor` or `number`.\n */\n\nfunction _resolveScalarsInLogs() {\n  _resolveScalarsInLogs = _asyncToGenerator(function* (logs) {\n    if (logs == null) {\n      return;\n    }\n\n    const promises = [];\n    const keys = [];\n    const scalarsToDispose = [];\n\n    for (const key in logs) {\n      const value = logs[key];\n\n      if (typeof value !== 'number') {\n        const valueScalar = value;\n        promises.push(valueScalar.data());\n        keys.push(key);\n        scalarsToDispose.push(valueScalar);\n      }\n    }\n\n    if (promises.length > 0) {\n      const values = yield Promise.all(promises);\n\n      for (let i = 0; i < values.length; ++i) {\n        logs[keys[i]] = values[i][0];\n      } // Dispose the original scalar tensors.\n\n\n      dispose(scalarsToDispose);\n    }\n  });\n  return _resolveScalarsInLogs.apply(this, arguments);\n}\n\nexport function disposeTensorsInLogs(logs) {\n  if (logs == null) {\n    return;\n  }\n\n  for (const key in logs) {\n    const value = logs[key];\n\n    if (typeof value !== 'number') {\n      value.dispose();\n    }\n  }\n}","map":{"version":3,"sources":["/Users/ryanliang/Downloads/main_movir_picker/node_modules/@tensorflow/tfjs-layers/dist/logs.js"],"names":["dispose","resolveScalarsInLogs","logs","promises","keys","scalarsToDispose","key","value","valueScalar","push","data","length","values","Promise","all","i","disposeTensorsInLogs"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,OAAT,QAAwB,uBAAxB;AACA;AACA;AACA;AACA;AACA;;AACA,gBAAsBC,oBAAtB;AAAA;AAAA;AAyBA;AACA;AACA;AACA;AACA;AACA;;;4CA9BO,WAAoCC,IAApC,EAA0C;AAC7C,QAAIA,IAAI,IAAI,IAAZ,EAAkB;AACd;AACH;;AACD,UAAMC,QAAQ,GAAG,EAAjB;AACA,UAAMC,IAAI,GAAG,EAAb;AACA,UAAMC,gBAAgB,GAAG,EAAzB;;AACA,SAAK,MAAMC,GAAX,IAAkBJ,IAAlB,EAAwB;AACpB,YAAMK,KAAK,GAAGL,IAAI,CAACI,GAAD,CAAlB;;AACA,UAAI,OAAOC,KAAP,KAAiB,QAArB,EAA+B;AAC3B,cAAMC,WAAW,GAAGD,KAApB;AACAJ,QAAAA,QAAQ,CAACM,IAAT,CAAcD,WAAW,CAACE,IAAZ,EAAd;AACAN,QAAAA,IAAI,CAACK,IAAL,CAAUH,GAAV;AACAD,QAAAA,gBAAgB,CAACI,IAAjB,CAAsBD,WAAtB;AACH;AACJ;;AACD,QAAIL,QAAQ,CAACQ,MAAT,GAAkB,CAAtB,EAAyB;AACrB,YAAMC,MAAM,SAASC,OAAO,CAACC,GAAR,CAAYX,QAAZ,CAArB;;AACA,WAAK,IAAIY,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,MAAM,CAACD,MAA3B,EAAmC,EAAEI,CAArC,EAAwC;AACpCb,QAAAA,IAAI,CAACE,IAAI,CAACW,CAAD,CAAL,CAAJ,GAAgBH,MAAM,CAACG,CAAD,CAAN,CAAU,CAAV,CAAhB;AACH,OAJoB,CAKrB;;;AACAf,MAAAA,OAAO,CAACK,gBAAD,CAAP;AACH;AACJ,G;;;;AAOD,OAAO,SAASW,oBAAT,CAA8Bd,IAA9B,EAAoC;AACvC,MAAIA,IAAI,IAAI,IAAZ,EAAkB;AACd;AACH;;AACD,OAAK,MAAMI,GAAX,IAAkBJ,IAAlB,EAAwB;AACpB,UAAMK,KAAK,GAAGL,IAAI,CAACI,GAAD,CAAlB;;AACA,QAAI,OAAOC,KAAP,KAAiB,QAArB,EAA+B;AAC3BA,MAAAA,KAAK,CAACP,OAAN;AACH;AACJ;AACJ","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport { dispose } from '@tensorflow/tfjs-core';\n/**\n * Turn any Scalar values in a Logs object into actual number values.\n *\n * @param logs The `Logs` object to be resolved in place.\n */\nexport async function resolveScalarsInLogs(logs) {\n    if (logs == null) {\n        return;\n    }\n    const promises = [];\n    const keys = [];\n    const scalarsToDispose = [];\n    for (const key in logs) {\n        const value = logs[key];\n        if (typeof value !== 'number') {\n            const valueScalar = value;\n            promises.push(valueScalar.data());\n            keys.push(key);\n            scalarsToDispose.push(valueScalar);\n        }\n    }\n    if (promises.length > 0) {\n        const values = await Promise.all(promises);\n        for (let i = 0; i < values.length; ++i) {\n            logs[keys[i]] = values[i][0];\n        }\n        // Dispose the original scalar tensors.\n        dispose(scalarsToDispose);\n    }\n}\n/**\n * Dispose all Tensors in an UnresolvedLogs object.\n *\n * @param logs An `UnresolvedLogs` object potentially containing `tf.Tensor`s in\n *   places where the values can be `tf.Tensor` or `number`.\n */\nexport function disposeTensorsInLogs(logs) {\n    if (logs == null) {\n        return;\n    }\n    for (const key in logs) {\n        const value = logs[key];\n        if (typeof value !== 'number') {\n            value.dispose();\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}
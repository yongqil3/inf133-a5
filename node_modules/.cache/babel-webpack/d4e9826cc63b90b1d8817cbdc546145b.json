{"ast":null,"code":"import _asyncToGenerator from \"/Users/ryanliang/Downloads/main_movir_picker/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { FileChunkIterator } from './file_chunk_iterator';\n/**\n * Provide a stream of chunks from a URL.\n *\n * Note this class first downloads the entire file into memory before providing\n * the first element from the stream.  This is because the Fetch API does not\n * yet reliably provide a reader stream for the response body.\n */\n\nexport function urlChunkIterator(_x) {\n  return _urlChunkIterator.apply(this, arguments);\n} // Generate RequestInit from Request to match tf.util.fetch signature.\n\nfunction _urlChunkIterator() {\n  _urlChunkIterator = _asyncToGenerator(function* (url, options = {}) {\n    let urlString;\n    let requestInit;\n\n    if (typeof url === 'string') {\n      urlString = url;\n    } else {\n      urlString = url.url;\n      requestInit = getRequestInitFromRequest(url);\n    }\n\n    const response = yield util.fetch(urlString, requestInit);\n\n    if (response.ok) {\n      const uint8Array = new Uint8Array(yield response.arrayBuffer());\n      return new FileChunkIterator(uint8Array, options);\n    } else {\n      throw new Error(response.statusText);\n    }\n  });\n  return _urlChunkIterator.apply(this, arguments);\n}\n\nconst getRequestInitFromRequest = request => {\n  const init = {\n    method: request.method,\n    headers: request.headers,\n    body: request.body,\n    mode: request.mode,\n    credentials: request.credentials,\n    cache: request.cache,\n    redirect: request.redirect,\n    referrer: request.referrer,\n    integrity: request.integrity\n  };\n  return init;\n};","map":{"version":3,"sources":["/Users/ryanliang/Downloads/main_movir_picker/node_modules/@tensorflow/tfjs-data/dist/iterators/url_chunk_iterator.js"],"names":["util","FileChunkIterator","urlChunkIterator","url","options","urlString","requestInit","getRequestInitFromRequest","response","fetch","ok","uint8Array","Uint8Array","arrayBuffer","Error","statusText","request","init","method","headers","body","mode","credentials","cache","redirect","referrer","integrity"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,IAAT,QAAqB,uBAArB;AACA,SAASC,iBAAT,QAAkC,uBAAlC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,gBAAsBC,gBAAtB;AAAA;AAAA,C,CAmBA;;;wCAnBO,WAAgCC,GAAhC,EAAqCC,OAAO,GAAG,EAA/C,EAAmD;AACtD,QAAIC,SAAJ;AACA,QAAIC,WAAJ;;AACA,QAAK,OAAOH,GAAR,KAAiB,QAArB,EAA+B;AAC3BE,MAAAA,SAAS,GAAGF,GAAZ;AACH,KAFD,MAGK;AACDE,MAAAA,SAAS,GAAGF,GAAG,CAACA,GAAhB;AACAG,MAAAA,WAAW,GAAGC,yBAAyB,CAACJ,GAAD,CAAvC;AACH;;AACD,UAAMK,QAAQ,SAASR,IAAI,CAACS,KAAL,CAAWJ,SAAX,EAAsBC,WAAtB,CAAvB;;AACA,QAAIE,QAAQ,CAACE,EAAb,EAAiB;AACb,YAAMC,UAAU,GAAG,IAAIC,UAAJ,OAAqBJ,QAAQ,CAACK,WAAT,EAArB,CAAnB;AACA,aAAO,IAAIZ,iBAAJ,CAAsBU,UAAtB,EAAkCP,OAAlC,CAAP;AACH,KAHD,MAIK;AACD,YAAM,IAAIU,KAAJ,CAAUN,QAAQ,CAACO,UAAnB,CAAN;AACH;AACJ,G;;;;AAED,MAAMR,yBAAyB,GAAIS,OAAD,IAAa;AAC3C,QAAMC,IAAI,GAAG;AACTC,IAAAA,MAAM,EAAEF,OAAO,CAACE,MADP;AAETC,IAAAA,OAAO,EAAEH,OAAO,CAACG,OAFR;AAGTC,IAAAA,IAAI,EAAEJ,OAAO,CAACI,IAHL;AAITC,IAAAA,IAAI,EAAEL,OAAO,CAACK,IAJL;AAKTC,IAAAA,WAAW,EAAEN,OAAO,CAACM,WALZ;AAMTC,IAAAA,KAAK,EAAEP,OAAO,CAACO,KANN;AAOTC,IAAAA,QAAQ,EAAER,OAAO,CAACQ,QAPT;AAQTC,IAAAA,QAAQ,EAAET,OAAO,CAACS,QART;AASTC,IAAAA,SAAS,EAAEV,OAAO,CAACU;AATV,GAAb;AAWA,SAAOT,IAAP;AACH,CAbD","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { FileChunkIterator } from './file_chunk_iterator';\n/**\n * Provide a stream of chunks from a URL.\n *\n * Note this class first downloads the entire file into memory before providing\n * the first element from the stream.  This is because the Fetch API does not\n * yet reliably provide a reader stream for the response body.\n */\nexport async function urlChunkIterator(url, options = {}) {\n    let urlString;\n    let requestInit;\n    if ((typeof url) === 'string') {\n        urlString = url;\n    }\n    else {\n        urlString = url.url;\n        requestInit = getRequestInitFromRequest(url);\n    }\n    const response = await util.fetch(urlString, requestInit);\n    if (response.ok) {\n        const uint8Array = new Uint8Array(await response.arrayBuffer());\n        return new FileChunkIterator(uint8Array, options);\n    }\n    else {\n        throw new Error(response.statusText);\n    }\n}\n// Generate RequestInit from Request to match tf.util.fetch signature.\nconst getRequestInitFromRequest = (request) => {\n    const init = {\n        method: request.method,\n        headers: request.headers,\n        body: request.body,\n        mode: request.mode,\n        credentials: request.credentials,\n        cache: request.cache,\n        redirect: request.redirect,\n        referrer: request.referrer,\n        integrity: request.integrity,\n    };\n    return init;\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _asyncToGenerator from \"/Users/ryanliang/Downloads/main_movir_picker/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { nonMaxSuppressionV4Impl } from '../../backends/non_max_suppression_impl';\nimport { convertToTensor } from '../../tensor_util_env';\nimport { nonMaxSuppSanityCheck } from '../nonmax_util';\nimport { scalar } from '../scalar';\nimport { tensor1d } from '../tensor1d';\n/**\n * Asynchronously performs non maximum suppression of bounding boxes based on\n * iou (intersection over union), with an option to pad results.\n *\n * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is\n *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of\n *     the bounding box.\n * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.\n * @param maxOutputSize The maximum number of boxes to be selected.\n * @param iouThreshold A float representing the threshold for deciding whether\n *     boxes overlap too much with respect to IOU. Must be between [0, 1].\n *     Defaults to 0.5 (50% box overlap).\n * @param scoreThreshold A threshold for deciding when to remove boxes based\n *     on score. Defaults to -inf, which means any score is accepted.\n * @param padToMaxOutputSize Defalts to false. If true, size of output\n *     `selectedIndices` is padded to maxOutputSize.\n * @return A map with the following properties:\n *     - selectedIndices: A 1D tensor with the selected box indices.\n *     - validOutputs: A scalar denoting how many elements in `selectedIndices`\n *       are valid. Valid elements occur first, then padding.\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\n\nfunction nonMaxSuppressionPaddedAsync_(_x, _x2, _x3) {\n  return _nonMaxSuppressionPaddedAsync_.apply(this, arguments);\n}\n\nfunction _nonMaxSuppressionPaddedAsync_() {\n  _nonMaxSuppressionPaddedAsync_ = _asyncToGenerator(function* (boxes, scores, maxOutputSize, iouThreshold = 0.5, scoreThreshold = Number.NEGATIVE_INFINITY, padToMaxOutputSize = false) {\n    const $boxes = convertToTensor(boxes, 'boxes', 'nonMaxSuppressionAsync');\n    const $scores = convertToTensor(scores, 'scores', 'nonMaxSuppressionAsync');\n    const params = nonMaxSuppSanityCheck($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold, null\n    /* softNmsSigma */\n    );\n    const $maxOutputSize = params.maxOutputSize;\n    const $iouThreshold = params.iouThreshold;\n    const $scoreThreshold = params.scoreThreshold;\n    const [boxesVals, scoresVals] = yield Promise.all([$boxes.data(), $scores.data()]); // We call a cpu based impl directly with the typedarray data here rather\n    // than a kernel because all kernels are synchronous (and thus cannot await\n    // .data()).\n\n    const {\n      selectedIndices,\n      validOutputs\n    } = nonMaxSuppressionV4Impl(boxesVals, scoresVals, $maxOutputSize, $iouThreshold, $scoreThreshold, padToMaxOutputSize);\n\n    if ($boxes !== boxes) {\n      $boxes.dispose();\n    }\n\n    if ($scores !== scores) {\n      $scores.dispose();\n    }\n\n    return {\n      selectedIndices: tensor1d(selectedIndices, 'int32'),\n      validOutputs: scalar(validOutputs, 'int32')\n    };\n  });\n  return _nonMaxSuppressionPaddedAsync_.apply(this, arguments);\n}\n\nexport const nonMaxSuppressionPaddedAsync = nonMaxSuppressionPaddedAsync_;","map":{"version":3,"sources":["/Users/ryanliang/Downloads/main_movir_picker/node_modules/@tensorflow/tfjs-core/dist/ops/image/non_max_suppression_padded_async.js"],"names":["nonMaxSuppressionV4Impl","convertToTensor","nonMaxSuppSanityCheck","scalar","tensor1d","nonMaxSuppressionPaddedAsync_","boxes","scores","maxOutputSize","iouThreshold","scoreThreshold","Number","NEGATIVE_INFINITY","padToMaxOutputSize","$boxes","$scores","params","$maxOutputSize","$iouThreshold","$scoreThreshold","boxesVals","scoresVals","Promise","all","data","selectedIndices","validOutputs","dispose","nonMaxSuppressionPaddedAsync"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,uBAAT,QAAwC,yCAAxC;AACA,SAASC,eAAT,QAAgC,uBAAhC;AACA,SAASC,qBAAT,QAAsC,gBAAtC;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;SACeC,6B;;;;;qDAAf,WAA6CC,KAA7C,EAAoDC,MAApD,EAA4DC,aAA5D,EAA2EC,YAAY,GAAG,GAA1F,EAA+FC,cAAc,GAAGC,MAAM,CAACC,iBAAvH,EAA0IC,kBAAkB,GAAG,KAA/J,EAAsK;AAClK,UAAMC,MAAM,GAAGb,eAAe,CAACK,KAAD,EAAQ,OAAR,EAAiB,wBAAjB,CAA9B;AACA,UAAMS,OAAO,GAAGd,eAAe,CAACM,MAAD,EAAS,QAAT,EAAmB,wBAAnB,CAA/B;AACA,UAAMS,MAAM,GAAGd,qBAAqB,CAACY,MAAD,EAASC,OAAT,EAAkBP,aAAlB,EAAiCC,YAAjC,EAA+CC,cAA/C,EAA+D;AAAK;AAApE,KAApC;AACA,UAAMO,cAAc,GAAGD,MAAM,CAACR,aAA9B;AACA,UAAMU,aAAa,GAAGF,MAAM,CAACP,YAA7B;AACA,UAAMU,eAAe,GAAGH,MAAM,CAACN,cAA/B;AACA,UAAM,CAACU,SAAD,EAAYC,UAAZ,UAAgCC,OAAO,CAACC,GAAR,CAAY,CAACT,MAAM,CAACU,IAAP,EAAD,EAAgBT,OAAO,CAACS,IAAR,EAAhB,CAAZ,CAAtC,CAPkK,CAQlK;AACA;AACA;;AACA,UAAM;AAAEC,MAAAA,eAAF;AAAmBC,MAAAA;AAAnB,QAAoC1B,uBAAuB,CAACoB,SAAD,EAAYC,UAAZ,EAAwBJ,cAAxB,EAAwCC,aAAxC,EAAuDC,eAAvD,EAAwEN,kBAAxE,CAAjE;;AACA,QAAIC,MAAM,KAAKR,KAAf,EAAsB;AAClBQ,MAAAA,MAAM,CAACa,OAAP;AACH;;AACD,QAAIZ,OAAO,KAAKR,MAAhB,EAAwB;AACpBQ,MAAAA,OAAO,CAACY,OAAR;AACH;;AACD,WAAO;AACHF,MAAAA,eAAe,EAAErB,QAAQ,CAACqB,eAAD,EAAkB,OAAlB,CADtB;AAEHC,MAAAA,YAAY,EAAEvB,MAAM,CAACuB,YAAD,EAAe,OAAf;AAFjB,KAAP;AAIH,G;;;;AACD,OAAO,MAAME,4BAA4B,GAAGvB,6BAArC","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { nonMaxSuppressionV4Impl } from '../../backends/non_max_suppression_impl';\nimport { convertToTensor } from '../../tensor_util_env';\nimport { nonMaxSuppSanityCheck } from '../nonmax_util';\nimport { scalar } from '../scalar';\nimport { tensor1d } from '../tensor1d';\n/**\n * Asynchronously performs non maximum suppression of bounding boxes based on\n * iou (intersection over union), with an option to pad results.\n *\n * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is\n *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of\n *     the bounding box.\n * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.\n * @param maxOutputSize The maximum number of boxes to be selected.\n * @param iouThreshold A float representing the threshold for deciding whether\n *     boxes overlap too much with respect to IOU. Must be between [0, 1].\n *     Defaults to 0.5 (50% box overlap).\n * @param scoreThreshold A threshold for deciding when to remove boxes based\n *     on score. Defaults to -inf, which means any score is accepted.\n * @param padToMaxOutputSize Defalts to false. If true, size of output\n *     `selectedIndices` is padded to maxOutputSize.\n * @return A map with the following properties:\n *     - selectedIndices: A 1D tensor with the selected box indices.\n *     - validOutputs: A scalar denoting how many elements in `selectedIndices`\n *       are valid. Valid elements occur first, then padding.\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\nasync function nonMaxSuppressionPaddedAsync_(boxes, scores, maxOutputSize, iouThreshold = 0.5, scoreThreshold = Number.NEGATIVE_INFINITY, padToMaxOutputSize = false) {\n    const $boxes = convertToTensor(boxes, 'boxes', 'nonMaxSuppressionAsync');\n    const $scores = convertToTensor(scores, 'scores', 'nonMaxSuppressionAsync');\n    const params = nonMaxSuppSanityCheck($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold, null /* softNmsSigma */);\n    const $maxOutputSize = params.maxOutputSize;\n    const $iouThreshold = params.iouThreshold;\n    const $scoreThreshold = params.scoreThreshold;\n    const [boxesVals, scoresVals] = await Promise.all([$boxes.data(), $scores.data()]);\n    // We call a cpu based impl directly with the typedarray data here rather\n    // than a kernel because all kernels are synchronous (and thus cannot await\n    // .data()).\n    const { selectedIndices, validOutputs } = nonMaxSuppressionV4Impl(boxesVals, scoresVals, $maxOutputSize, $iouThreshold, $scoreThreshold, padToMaxOutputSize);\n    if ($boxes !== boxes) {\n        $boxes.dispose();\n    }\n    if ($scores !== scores) {\n        $scores.dispose();\n    }\n    return {\n        selectedIndices: tensor1d(selectedIndices, 'int32'),\n        validOutputs: scalar(validOutputs, 'int32')\n    };\n}\nexport const nonMaxSuppressionPaddedAsync = nonMaxSuppressionPaddedAsync_;\n"]},"metadata":{},"sourceType":"module"}
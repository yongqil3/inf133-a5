{"ast":null,"code":"import _asyncToGenerator from \"/Users/ryanliang/Downloads/main_movir_picker/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { complex } from '../ops/complex';\nimport { tensor } from '../ops/tensor';\nimport { sizeFromShape } from '../util';\nimport { DTYPE_VALUE_SIZE_MAP } from './types';\n/** Number of bytes reserved for the length of the string. (32bit integer). */\n\nconst NUM_BYTES_STRING_LENGTH = 4;\n/**\n * Encode a map from names to weight values as an ArrayBuffer, along with an\n * `Array` of `WeightsManifestEntry` as specification of the encoded weights.\n *\n * This function does not perform sharding.\n *\n * This function is the reverse of `decodeWeights`.\n *\n * @param tensors A map (\"dict\") from names to tensors.\n * @param group Group to which the weights belong (optional).\n * @returns A `Promise` of\n *   - A flat `ArrayBuffer` with all the binary values of the `Tensor`s\n *     concatenated.\n *   - An `Array` of `WeightManifestEntry`s, carrying information including\n *     tensor names, `dtype`s and shapes.\n * @throws Error: on unsupported tensor `dtype`.\n */\n\nexport function encodeWeights(_x, _x2) {\n  return _encodeWeights.apply(this, arguments);\n}\n/**\n * Decode flat ArrayBuffer as weights.\n *\n * This function does not handle sharding.\n *\n * This function is the reverse of `encodeWeights`.\n *\n * @param buffer A flat ArrayBuffer carrying the binary values of the tensors\n *   concatenated in the order specified in `specs`.\n * @param specs Specifications of the names, dtypes and shapes of the tensors\n *   whose value are encoded by `buffer`.\n * @return A map from tensor name to tensor value, with the names corresponding\n *   to names in `specs`.\n * @throws Error, if any of the tensors has unsupported dtype.\n */\n\nfunction _encodeWeights() {\n  _encodeWeights = _asyncToGenerator(function* (tensors, group) {\n    // TODO(adarob, cais): Support quantization.\n    const specs = [];\n    const dataPromises = [];\n    const names = Array.isArray(tensors) ? tensors.map(tensor => tensor.name) : Object.keys(tensors);\n\n    for (let i = 0; i < names.length; ++i) {\n      const name = names[i];\n      const t = Array.isArray(tensors) ? tensors[i].tensor : tensors[name];\n\n      if (t.dtype !== 'float32' && t.dtype !== 'int32' && t.dtype !== 'bool' && t.dtype !== 'string' && t.dtype !== 'complex64') {\n        throw new Error(`Unsupported dtype in weight '${name}': ${t.dtype}`);\n      }\n\n      const spec = {\n        name,\n        shape: t.shape,\n        dtype: t.dtype\n      };\n\n      if (t.dtype === 'string') {\n        const utf8bytes = new Promise( /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(function* (resolve) {\n            const vals = yield t.bytes();\n            const totalNumBytes = vals.reduce((p, c) => p + c.length, 0) + NUM_BYTES_STRING_LENGTH * vals.length;\n            const bytes = new Uint8Array(totalNumBytes);\n            let offset = 0;\n\n            for (let i = 0; i < vals.length; i++) {\n              const val = vals[i];\n              const bytesOfLength = new Uint8Array(new Uint32Array([val.length]).buffer);\n              bytes.set(bytesOfLength, offset);\n              offset += NUM_BYTES_STRING_LENGTH;\n              bytes.set(val, offset);\n              offset += val.length;\n            }\n\n            resolve(bytes);\n          });\n\n          return function (_x3) {\n            return _ref.apply(this, arguments);\n          };\n        }());\n        dataPromises.push(utf8bytes);\n      } else {\n        dataPromises.push(t.data());\n      }\n\n      if (group != null) {\n        spec.group = group;\n      }\n\n      specs.push(spec);\n    }\n\n    const tensorValues = yield Promise.all(dataPromises);\n    return {\n      data: concatenateTypedArrays(tensorValues),\n      specs\n    };\n  });\n  return _encodeWeights.apply(this, arguments);\n}\n\nexport function decodeWeights(buffer, specs) {\n  // TODO(adarob, cais): Support quantization.\n  const out = {};\n  let float16Decode;\n  let offset = 0;\n\n  for (const spec of specs) {\n    const name = spec.name;\n    const dtype = spec.dtype;\n    const shape = spec.shape;\n    const size = sizeFromShape(shape);\n    let values;\n\n    if ('quantization' in spec) {\n      const quantization = spec.quantization;\n\n      if (quantization.dtype === 'uint8' || quantization.dtype === 'uint16') {\n        if (!('min' in quantization && 'scale' in quantization)) {\n          throw new Error(`Weight ${spec.name} with quantization ${quantization.dtype} ` + `doesn't have corresponding metadata min and scale.`);\n        }\n      } else if (quantization.dtype === 'float16') {\n        if (dtype !== 'float32') {\n          throw new Error(`Weight ${spec.name} is quantized with ${quantization.dtype} ` + `which only supports weights of type float32 not ${dtype}.`);\n        }\n      } else {\n        throw new Error(`Weight ${spec.name} has unknown ` + `quantization dtype ${quantization.dtype}. ` + `Supported quantization dtypes are: ` + `'uint8', 'uint16', and 'float16'.`);\n      }\n\n      const quantizationSizeFactor = DTYPE_VALUE_SIZE_MAP[quantization.dtype];\n      const byteBuffer = buffer.slice(offset, offset + size * quantizationSizeFactor);\n      const quantizedArray = quantization.dtype === 'uint8' ? new Uint8Array(byteBuffer) : new Uint16Array(byteBuffer);\n\n      if (dtype === 'float32') {\n        if (quantization.dtype === 'uint8' || quantization.dtype === 'uint16') {\n          values = new Float32Array(quantizedArray.length);\n\n          for (let i = 0; i < quantizedArray.length; i++) {\n            const v = quantizedArray[i];\n            values[i] = v * quantization.scale + quantization.min;\n          }\n        } else if (quantization.dtype === 'float16') {\n          if (float16Decode === undefined) {\n            float16Decode = getFloat16Decoder();\n          }\n\n          values = float16Decode(quantizedArray);\n        } else {\n          throw new Error(`Unsupported quantization type ${quantization.dtype} ` + `for weight type float32.`);\n        }\n      } else if (dtype === 'int32') {\n        if (quantization.dtype !== 'uint8' && quantization.dtype !== 'uint16') {\n          throw new Error(`Unsupported quantization type ${quantization.dtype} ` + `for weight type int32.`);\n        }\n\n        values = new Int32Array(quantizedArray.length);\n\n        for (let i = 0; i < quantizedArray.length; i++) {\n          const v = quantizedArray[i];\n          values[i] = Math.round(v * quantization.scale + quantization.min);\n        }\n      } else {\n        throw new Error(`Unsupported dtype in weight '${name}': ${dtype}`);\n      }\n\n      offset += size * quantizationSizeFactor;\n    } else if (dtype === 'string') {\n      const size = sizeFromShape(spec.shape);\n      values = [];\n\n      for (let i = 0; i < size; i++) {\n        const byteLength = new Uint32Array(buffer.slice(offset, offset + NUM_BYTES_STRING_LENGTH))[0];\n        offset += NUM_BYTES_STRING_LENGTH;\n        const bytes = new Uint8Array(buffer.slice(offset, offset + byteLength));\n        values.push(bytes);\n        offset += byteLength;\n      }\n    } else {\n      const dtypeFactor = DTYPE_VALUE_SIZE_MAP[dtype];\n      const byteBuffer = buffer.slice(offset, offset + size * dtypeFactor);\n\n      if (dtype === 'float32') {\n        values = new Float32Array(byteBuffer);\n      } else if (dtype === 'int32') {\n        values = new Int32Array(byteBuffer);\n      } else if (dtype === 'bool') {\n        values = new Uint8Array(byteBuffer);\n      } else if (dtype === 'complex64') {\n        values = new Float32Array(byteBuffer);\n        const real = new Float32Array(values.length / 2);\n        const image = new Float32Array(values.length / 2);\n\n        for (let i = 0; i < real.length; i++) {\n          real[i] = values[i * 2];\n          image[i] = values[i * 2 + 1];\n        }\n\n        const realTensor = tensor(real, shape, 'float32');\n        const imageTensor = tensor(image, shape, 'float32');\n        out[name] = complex(realTensor, imageTensor);\n        realTensor.dispose();\n        imageTensor.dispose();\n      } else {\n        throw new Error(`Unsupported dtype in weight '${name}': ${dtype}`);\n      }\n\n      offset += size * dtypeFactor;\n    }\n\n    if (dtype !== 'complex64') {\n      out[name] = tensor(values, shape, dtype);\n    }\n  }\n\n  return out;\n}\n/**\n * Concatenate TypedArrays into an ArrayBuffer.\n */\n\nexport function concatenateTypedArrays(xs) {\n  // TODO(adarob, cais): Support quantization.\n  if (xs === null) {\n    throw new Error(`Invalid input value: ${JSON.stringify(xs)}`);\n  }\n\n  let totalByteLength = 0; // `normalizedXs` is here for this reason: a `TypedArray`'s `buffer'\n  // can have a different byte length from that of the `TypedArray` itself,\n  // for example, when the `TypedArray` is created from an offset in an\n  // `ArrayBuffer`. `normliazedXs` holds `TypedArray`s whose `buffer`s match\n  // the `TypedArray` in byte length. If an element of `xs` does not show\n  // this property, a new `TypedArray` that satisfy this property will be\n  // constructed and pushed into `normalizedXs`.\n\n  const normalizedXs = [];\n  xs.forEach(x => {\n    totalByteLength += x.byteLength; // tslint:disable:no-any\n\n    normalizedXs.push(x.byteLength === x.buffer.byteLength ? x : new x.constructor(x));\n\n    if (!(x instanceof Float32Array || x instanceof Int32Array || x instanceof Uint8Array)) {\n      throw new Error(`Unsupported TypedArray subtype: ${x.constructor.name}`);\n    } // tslint:enable:no-any\n\n  });\n  const y = new Uint8Array(totalByteLength);\n  let offset = 0;\n  normalizedXs.forEach(x => {\n    y.set(new Uint8Array(x.buffer), offset);\n    offset += x.byteLength;\n  });\n  return y.buffer;\n} // Use Buffer on Node.js instead of Blob/atob/btoa\n\nconst useNodeBuffer = typeof Buffer !== 'undefined' && (typeof Blob === 'undefined' || typeof atob === 'undefined' || typeof btoa === 'undefined');\n/**\n * Calculate the byte length of a JavaScript string.\n *\n * Note that a JavaScript string can contain wide characters, therefore the\n * length of the string is not necessarily equal to the byte length.\n *\n * @param str Input string.\n * @returns Byte length.\n */\n\nexport function stringByteLength(str) {\n  if (useNodeBuffer) {\n    return Buffer.byteLength(str);\n  }\n\n  return new Blob([str]).size;\n}\n/**\n * Encode an ArrayBuffer as a base64 encoded string.\n *\n * @param buffer `ArrayBuffer` to be converted.\n * @returns A string that base64-encodes `buffer`.\n */\n\nexport function arrayBufferToBase64String(buffer) {\n  if (useNodeBuffer) {\n    return Buffer.from(buffer).toString('base64');\n  }\n\n  const buf = new Uint8Array(buffer);\n  let s = '';\n\n  for (let i = 0, l = buf.length; i < l; i++) {\n    s += String.fromCharCode(buf[i]);\n  }\n\n  return btoa(s);\n}\n/**\n * Decode a base64 string as an ArrayBuffer.\n *\n * @param str Base64 string.\n * @returns Decoded `ArrayBuffer`.\n */\n\nexport function base64StringToArrayBuffer(str) {\n  if (useNodeBuffer) {\n    const buf = Buffer.from(str, 'base64');\n    return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);\n  }\n\n  const s = atob(str);\n  const buffer = new Uint8Array(s.length);\n\n  for (let i = 0; i < s.length; ++i) {\n    buffer.set([s.charCodeAt(i)], i);\n  }\n\n  return buffer.buffer;\n}\n/**\n * Concatenate a number of ArrayBuffers into one.\n *\n * @param buffers A number of array buffers to concatenate.\n * @returns Result of concatenating `buffers` in order.\n */\n\nexport function concatenateArrayBuffers(buffers) {\n  if (buffers.length === 1) {\n    return buffers[0];\n  }\n\n  let totalByteLength = 0;\n  buffers.forEach(buffer => {\n    totalByteLength += buffer.byteLength;\n  });\n  const temp = new Uint8Array(totalByteLength);\n  let offset = 0;\n  buffers.forEach(buffer => {\n    temp.set(new Uint8Array(buffer), offset);\n    offset += buffer.byteLength;\n  });\n  return temp.buffer;\n}\n/**\n * Get the basename of a path.\n *\n * Behaves in a way analogous to Linux's basename command.\n *\n * @param path\n */\n\nexport function basename(path) {\n  const SEPARATOR = '/';\n  path = path.trim();\n\n  while (path.endsWith(SEPARATOR)) {\n    path = path.slice(0, path.length - 1);\n  }\n\n  const items = path.split(SEPARATOR);\n  return items[items.length - 1];\n}\n/**\n * Populate ModelArtifactsInfo fields for a model with JSON topology.\n * @param modelArtifacts\n * @returns A ModelArtifactsInfo object.\n */\n\nexport function getModelArtifactsInfoForJSON(modelArtifacts) {\n  if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n    throw new Error('Expected JSON model topology, received ArrayBuffer.');\n  }\n\n  return {\n    dateSaved: new Date(),\n    modelTopologyType: 'JSON',\n    modelTopologyBytes: modelArtifacts.modelTopology == null ? 0 : stringByteLength(JSON.stringify(modelArtifacts.modelTopology)),\n    weightSpecsBytes: modelArtifacts.weightSpecs == null ? 0 : stringByteLength(JSON.stringify(modelArtifacts.weightSpecs)),\n    weightDataBytes: modelArtifacts.weightData == null ? 0 : modelArtifacts.weightData.byteLength\n  };\n}\n/**\n * Computes mantisa table for casting Float16 to Float32\n * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n *\n * @returns Uint32Array, 2048 mantissa lookup values.\n */\n\nfunction computeFloat16MantisaTable() {\n  const convertMantissa = i => {\n    let m = i << 13;\n    let e = 0;\n\n    while ((m & 0x00800000) === 0) {\n      e -= 0x00800000;\n      m <<= 1;\n    }\n\n    m &= ~0x00800000;\n    e += 0x38800000;\n    return m | e;\n  };\n\n  const mantisaTable = new Uint32Array(2048);\n  mantisaTable[0] = 0;\n\n  for (let i = 1; i < 1024; i++) {\n    mantisaTable[i] = convertMantissa(i);\n  }\n\n  for (let i = 1024; i < 2048; i++) {\n    mantisaTable[i] = 0x38000000 + (i - 1024 << 13);\n  }\n\n  return mantisaTable;\n}\n/**\n * Computes exponent table for casting Float16 to Float32\n * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n *\n * @returns Uint32Array, 64 exponent lookup values.\n */\n\n\nfunction computeFloat16ExponentTable() {\n  const exponentTable = new Uint32Array(64);\n  exponentTable[0] = 0;\n  exponentTable[31] = 0x47800000;\n  exponentTable[32] = 0x80000000;\n  exponentTable[63] = 0xc7800000;\n\n  for (let i = 1; i < 31; i++) {\n    exponentTable[i] = i << 23;\n  }\n\n  for (let i = 33; i < 63; i++) {\n    exponentTable[i] = 0x80000000 + (i - 32 << 23);\n  }\n\n  return exponentTable;\n}\n/**\n * Computes offset table for casting Float16 to Float32\n * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n *\n * @returns Uint32Array, 6d offset values.\n */\n\n\nfunction computeFloat16OffsetTable() {\n  const offsetTable = new Uint32Array(64);\n\n  for (let i = 0; i < 64; i++) {\n    offsetTable[i] = 1024;\n  }\n\n  offsetTable[0] = offsetTable[32] = 0;\n  return offsetTable;\n}\n/**\n * Retrieve a Float16 decoder which will decode a ByteArray of Float16 values\n * to a Float32Array.\n *\n * @returns Function (buffer: Uint16Array) => Float32Array which decodes\n *          the Uint16Array of Float16 bytes to a Float32Array.\n */\n\n\nexport function getFloat16Decoder() {\n  // Algorithm is based off of\n  // http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n  // Cache lookup tables\n  const mantisaTable = computeFloat16MantisaTable();\n  const exponentTable = computeFloat16ExponentTable();\n  const offsetTable = computeFloat16OffsetTable();\n  return quantizedArray => {\n    const buffer = new ArrayBuffer(4 * quantizedArray.length);\n    const bufferUint32View = new Uint32Array(buffer);\n\n    for (let index = 0; index < quantizedArray.length; index++) {\n      const float16Bits = quantizedArray[index];\n      const float32Bits = mantisaTable[offsetTable[float16Bits >> 10] + (float16Bits & 0x3ff)] + exponentTable[float16Bits >> 10];\n      bufferUint32View[index] = float32Bits;\n    }\n\n    return new Float32Array(buffer);\n  };\n}","map":{"version":3,"sources":["/Users/ryanliang/Downloads/main_movir_picker/node_modules/@tensorflow/tfjs-core/dist/io/io_utils.js"],"names":["complex","tensor","sizeFromShape","DTYPE_VALUE_SIZE_MAP","NUM_BYTES_STRING_LENGTH","encodeWeights","tensors","group","specs","dataPromises","names","Array","isArray","map","name","Object","keys","i","length","t","dtype","Error","spec","shape","utf8bytes","Promise","resolve","vals","bytes","totalNumBytes","reduce","p","c","Uint8Array","offset","val","bytesOfLength","Uint32Array","buffer","set","push","data","tensorValues","all","concatenateTypedArrays","decodeWeights","out","float16Decode","size","values","quantization","quantizationSizeFactor","byteBuffer","slice","quantizedArray","Uint16Array","Float32Array","v","scale","min","undefined","getFloat16Decoder","Int32Array","Math","round","byteLength","dtypeFactor","real","image","realTensor","imageTensor","dispose","xs","JSON","stringify","totalByteLength","normalizedXs","forEach","x","constructor","y","useNodeBuffer","Buffer","Blob","atob","btoa","stringByteLength","str","arrayBufferToBase64String","from","toString","buf","s","l","String","fromCharCode","base64StringToArrayBuffer","byteOffset","charCodeAt","concatenateArrayBuffers","buffers","temp","basename","path","SEPARATOR","trim","endsWith","items","split","getModelArtifactsInfoForJSON","modelArtifacts","modelTopology","ArrayBuffer","dateSaved","Date","modelTopologyType","modelTopologyBytes","weightSpecsBytes","weightSpecs","weightDataBytes","weightData","computeFloat16MantisaTable","convertMantissa","m","e","mantisaTable","computeFloat16ExponentTable","exponentTable","computeFloat16OffsetTable","offsetTable","bufferUint32View","index","float16Bits","float32Bits"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,OAAT,QAAwB,gBAAxB;AACA,SAASC,MAAT,QAAuB,eAAvB;AACA,SAASC,aAAT,QAA8B,SAA9B;AACA,SAASC,oBAAT,QAAqC,SAArC;AACA;;AACA,MAAMC,uBAAuB,GAAG,CAAhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,gBAAsBC,aAAtB;AAAA;AAAA;AA6CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;qCA3DO,WAA6BC,OAA7B,EAAsCC,KAAtC,EAA6C;AAChD;AACA,UAAMC,KAAK,GAAG,EAAd;AACA,UAAMC,YAAY,GAAG,EAArB;AACA,UAAMC,KAAK,GAAGC,KAAK,CAACC,OAAN,CAAcN,OAAd,IACVA,OAAO,CAACO,GAAR,CAAYZ,MAAM,IAAIA,MAAM,CAACa,IAA7B,CADU,GAEVC,MAAM,CAACC,IAAP,CAAYV,OAAZ,CAFJ;;AAGA,SAAK,IAAIW,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,KAAK,CAACQ,MAA1B,EAAkC,EAAED,CAApC,EAAuC;AACnC,YAAMH,IAAI,GAAGJ,KAAK,CAACO,CAAD,CAAlB;AACA,YAAME,CAAC,GAAGR,KAAK,CAACC,OAAN,CAAcN,OAAd,IAAyBA,OAAO,CAACW,CAAD,CAAP,CAAWhB,MAApC,GAA6CK,OAAO,CAACQ,IAAD,CAA9D;;AACA,UAAIK,CAAC,CAACC,KAAF,KAAY,SAAZ,IAAyBD,CAAC,CAACC,KAAF,KAAY,OAArC,IAAgDD,CAAC,CAACC,KAAF,KAAY,MAA5D,IACAD,CAAC,CAACC,KAAF,KAAY,QADZ,IACwBD,CAAC,CAACC,KAAF,KAAY,WADxC,EACqD;AACjD,cAAM,IAAIC,KAAJ,CAAW,gCAA+BP,IAAK,MAAKK,CAAC,CAACC,KAAM,EAA5D,CAAN;AACH;;AACD,YAAME,IAAI,GAAG;AAAER,QAAAA,IAAF;AAAQS,QAAAA,KAAK,EAAEJ,CAAC,CAACI,KAAjB;AAAwBH,QAAAA,KAAK,EAAED,CAAC,CAACC;AAAjC,OAAb;;AACA,UAAID,CAAC,CAACC,KAAF,KAAY,QAAhB,EAA0B;AACtB,cAAMI,SAAS,GAAG,IAAIC,OAAJ;AAAA,uCAAY,WAAOC,OAAP,EAAmB;AAC7C,kBAAMC,IAAI,SAASR,CAAC,CAACS,KAAF,EAAnB;AACA,kBAAMC,aAAa,GAAGF,IAAI,CAACG,MAAL,CAAY,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,GAAGC,CAAC,CAACd,MAA5B,EAAoC,CAApC,IAClBd,uBAAuB,GAAGuB,IAAI,CAACT,MADnC;AAEA,kBAAMU,KAAK,GAAG,IAAIK,UAAJ,CAAeJ,aAAf,CAAd;AACA,gBAAIK,MAAM,GAAG,CAAb;;AACA,iBAAK,IAAIjB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGU,IAAI,CAACT,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AAClC,oBAAMkB,GAAG,GAAGR,IAAI,CAACV,CAAD,CAAhB;AACA,oBAAMmB,aAAa,GAAG,IAAIH,UAAJ,CAAe,IAAII,WAAJ,CAAgB,CAACF,GAAG,CAACjB,MAAL,CAAhB,EAA8BoB,MAA7C,CAAtB;AACAV,cAAAA,KAAK,CAACW,GAAN,CAAUH,aAAV,EAAyBF,MAAzB;AACAA,cAAAA,MAAM,IAAI9B,uBAAV;AACAwB,cAAAA,KAAK,CAACW,GAAN,CAAUJ,GAAV,EAAeD,MAAf;AACAA,cAAAA,MAAM,IAAIC,GAAG,CAACjB,MAAd;AACH;;AACDQ,YAAAA,OAAO,CAACE,KAAD,CAAP;AACH,WAfiB;;AAAA;AAAA;AAAA;AAAA,YAAlB;AAgBAnB,QAAAA,YAAY,CAAC+B,IAAb,CAAkBhB,SAAlB;AACH,OAlBD,MAmBK;AACDf,QAAAA,YAAY,CAAC+B,IAAb,CAAkBrB,CAAC,CAACsB,IAAF,EAAlB;AACH;;AACD,UAAIlC,KAAK,IAAI,IAAb,EAAmB;AACfe,QAAAA,IAAI,CAACf,KAAL,GAAaA,KAAb;AACH;;AACDC,MAAAA,KAAK,CAACgC,IAAN,CAAWlB,IAAX;AACH;;AACD,UAAMoB,YAAY,SAASjB,OAAO,CAACkB,GAAR,CAAYlC,YAAZ,CAA3B;AACA,WAAO;AAAEgC,MAAAA,IAAI,EAAEG,sBAAsB,CAACF,YAAD,CAA9B;AAA8ClC,MAAAA;AAA9C,KAAP;AACH,G;;;;AAgBD,OAAO,SAASqC,aAAT,CAAuBP,MAAvB,EAA+B9B,KAA/B,EAAsC;AACzC;AACA,QAAMsC,GAAG,GAAG,EAAZ;AACA,MAAIC,aAAJ;AACA,MAAIb,MAAM,GAAG,CAAb;;AACA,OAAK,MAAMZ,IAAX,IAAmBd,KAAnB,EAA0B;AACtB,UAAMM,IAAI,GAAGQ,IAAI,CAACR,IAAlB;AACA,UAAMM,KAAK,GAAGE,IAAI,CAACF,KAAnB;AACA,UAAMG,KAAK,GAAGD,IAAI,CAACC,KAAnB;AACA,UAAMyB,IAAI,GAAG9C,aAAa,CAACqB,KAAD,CAA1B;AACA,QAAI0B,MAAJ;;AACA,QAAI,kBAAkB3B,IAAtB,EAA4B;AACxB,YAAM4B,YAAY,GAAG5B,IAAI,CAAC4B,YAA1B;;AACA,UAAIA,YAAY,CAAC9B,KAAb,KAAuB,OAAvB,IAAkC8B,YAAY,CAAC9B,KAAb,KAAuB,QAA7D,EAAuE;AACnE,YAAI,EAAE,SAAS8B,YAAT,IAAyB,WAAWA,YAAtC,CAAJ,EAAyD;AACrD,gBAAM,IAAI7B,KAAJ,CAAW,UAASC,IAAI,CAACR,IAAK,sBAAqBoC,YAAY,CAAC9B,KAAM,GAA5D,GACX,oDADC,CAAN;AAEH;AACJ,OALD,MAMK,IAAI8B,YAAY,CAAC9B,KAAb,KAAuB,SAA3B,EAAsC;AACvC,YAAIA,KAAK,KAAK,SAAd,EAAyB;AACrB,gBAAM,IAAIC,KAAJ,CAAW,UAASC,IAAI,CAACR,IAAK,sBAAqBoC,YAAY,CAAC9B,KAAM,GAA5D,GACX,mDAAkDA,KAAM,GADvD,CAAN;AAEH;AACJ,OALI,MAMA;AACD,cAAM,IAAIC,KAAJ,CAAW,UAASC,IAAI,CAACR,IAAK,eAApB,GACX,sBAAqBoC,YAAY,CAAC9B,KAAM,IAD7B,GAEX,qCAFW,GAGX,mCAHC,CAAN;AAIH;;AACD,YAAM+B,sBAAsB,GAAGhD,oBAAoB,CAAC+C,YAAY,CAAC9B,KAAd,CAAnD;AACA,YAAMgC,UAAU,GAAGd,MAAM,CAACe,KAAP,CAAanB,MAAb,EAAqBA,MAAM,GAAGc,IAAI,GAAGG,sBAArC,CAAnB;AACA,YAAMG,cAAc,GAAIJ,YAAY,CAAC9B,KAAb,KAAuB,OAAxB,GACnB,IAAIa,UAAJ,CAAemB,UAAf,CADmB,GAEnB,IAAIG,WAAJ,CAAgBH,UAAhB,CAFJ;;AAGA,UAAIhC,KAAK,KAAK,SAAd,EAAyB;AACrB,YAAI8B,YAAY,CAAC9B,KAAb,KAAuB,OAAvB,IAAkC8B,YAAY,CAAC9B,KAAb,KAAuB,QAA7D,EAAuE;AACnE6B,UAAAA,MAAM,GAAG,IAAIO,YAAJ,CAAiBF,cAAc,CAACpC,MAAhC,CAAT;;AACA,eAAK,IAAID,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGqC,cAAc,CAACpC,MAAnC,EAA2CD,CAAC,EAA5C,EAAgD;AAC5C,kBAAMwC,CAAC,GAAGH,cAAc,CAACrC,CAAD,CAAxB;AACAgC,YAAAA,MAAM,CAAChC,CAAD,CAAN,GAAYwC,CAAC,GAAGP,YAAY,CAACQ,KAAjB,GAAyBR,YAAY,CAACS,GAAlD;AACH;AACJ,SAND,MAOK,IAAIT,YAAY,CAAC9B,KAAb,KAAuB,SAA3B,EAAsC;AACvC,cAAI2B,aAAa,KAAKa,SAAtB,EAAiC;AAC7Bb,YAAAA,aAAa,GAAGc,iBAAiB,EAAjC;AACH;;AACDZ,UAAAA,MAAM,GAAGF,aAAa,CAACO,cAAD,CAAtB;AACH,SALI,MAMA;AACD,gBAAM,IAAIjC,KAAJ,CAAW,iCAAgC6B,YAAY,CAAC9B,KAAM,GAApD,GACX,0BADC,CAAN;AAEH;AACJ,OAlBD,MAmBK,IAAIA,KAAK,KAAK,OAAd,EAAuB;AACxB,YAAI8B,YAAY,CAAC9B,KAAb,KAAuB,OAAvB,IAAkC8B,YAAY,CAAC9B,KAAb,KAAuB,QAA7D,EAAuE;AACnE,gBAAM,IAAIC,KAAJ,CAAW,iCAAgC6B,YAAY,CAAC9B,KAAM,GAApD,GACX,wBADC,CAAN;AAEH;;AACD6B,QAAAA,MAAM,GAAG,IAAIa,UAAJ,CAAeR,cAAc,CAACpC,MAA9B,CAAT;;AACA,aAAK,IAAID,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGqC,cAAc,CAACpC,MAAnC,EAA2CD,CAAC,EAA5C,EAAgD;AAC5C,gBAAMwC,CAAC,GAAGH,cAAc,CAACrC,CAAD,CAAxB;AACAgC,UAAAA,MAAM,CAAChC,CAAD,CAAN,GAAY8C,IAAI,CAACC,KAAL,CAAWP,CAAC,GAAGP,YAAY,CAACQ,KAAjB,GAAyBR,YAAY,CAACS,GAAjD,CAAZ;AACH;AACJ,OAVI,MAWA;AACD,cAAM,IAAItC,KAAJ,CAAW,gCAA+BP,IAAK,MAAKM,KAAM,EAA1D,CAAN;AACH;;AACDc,MAAAA,MAAM,IAAIc,IAAI,GAAGG,sBAAjB;AACH,KA3DD,MA4DK,IAAI/B,KAAK,KAAK,QAAd,EAAwB;AACzB,YAAM4B,IAAI,GAAG9C,aAAa,CAACoB,IAAI,CAACC,KAAN,CAA1B;AACA0B,MAAAA,MAAM,GAAG,EAAT;;AACA,WAAK,IAAIhC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG+B,IAApB,EAA0B/B,CAAC,EAA3B,EAA+B;AAC3B,cAAMgD,UAAU,GAAG,IAAI5B,WAAJ,CAAgBC,MAAM,CAACe,KAAP,CAAanB,MAAb,EAAqBA,MAAM,GAAG9B,uBAA9B,CAAhB,EAAwE,CAAxE,CAAnB;AACA8B,QAAAA,MAAM,IAAI9B,uBAAV;AACA,cAAMwB,KAAK,GAAG,IAAIK,UAAJ,CAAeK,MAAM,CAACe,KAAP,CAAanB,MAAb,EAAqBA,MAAM,GAAG+B,UAA9B,CAAf,CAAd;AACAhB,QAAAA,MAAM,CAACT,IAAP,CAAYZ,KAAZ;AACAM,QAAAA,MAAM,IAAI+B,UAAV;AACH;AACJ,KAVI,MAWA;AACD,YAAMC,WAAW,GAAG/D,oBAAoB,CAACiB,KAAD,CAAxC;AACA,YAAMgC,UAAU,GAAGd,MAAM,CAACe,KAAP,CAAanB,MAAb,EAAqBA,MAAM,GAAGc,IAAI,GAAGkB,WAArC,CAAnB;;AACA,UAAI9C,KAAK,KAAK,SAAd,EAAyB;AACrB6B,QAAAA,MAAM,GAAG,IAAIO,YAAJ,CAAiBJ,UAAjB,CAAT;AACH,OAFD,MAGK,IAAIhC,KAAK,KAAK,OAAd,EAAuB;AACxB6B,QAAAA,MAAM,GAAG,IAAIa,UAAJ,CAAeV,UAAf,CAAT;AACH,OAFI,MAGA,IAAIhC,KAAK,KAAK,MAAd,EAAsB;AACvB6B,QAAAA,MAAM,GAAG,IAAIhB,UAAJ,CAAemB,UAAf,CAAT;AACH,OAFI,MAGA,IAAIhC,KAAK,KAAK,WAAd,EAA2B;AAC5B6B,QAAAA,MAAM,GAAG,IAAIO,YAAJ,CAAiBJ,UAAjB,CAAT;AACA,cAAMe,IAAI,GAAG,IAAIX,YAAJ,CAAiBP,MAAM,CAAC/B,MAAP,GAAgB,CAAjC,CAAb;AACA,cAAMkD,KAAK,GAAG,IAAIZ,YAAJ,CAAiBP,MAAM,CAAC/B,MAAP,GAAgB,CAAjC,CAAd;;AACA,aAAK,IAAID,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGkD,IAAI,CAACjD,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AAClCkD,UAAAA,IAAI,CAAClD,CAAD,CAAJ,GAAUgC,MAAM,CAAChC,CAAC,GAAG,CAAL,CAAhB;AACAmD,UAAAA,KAAK,CAACnD,CAAD,CAAL,GAAWgC,MAAM,CAAChC,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAAjB;AACH;;AACD,cAAMoD,UAAU,GAAGpE,MAAM,CAACkE,IAAD,EAAO5C,KAAP,EAAc,SAAd,CAAzB;AACA,cAAM+C,WAAW,GAAGrE,MAAM,CAACmE,KAAD,EAAQ7C,KAAR,EAAe,SAAf,CAA1B;AACAuB,QAAAA,GAAG,CAAChC,IAAD,CAAH,GAAYd,OAAO,CAACqE,UAAD,EAAaC,WAAb,CAAnB;AACAD,QAAAA,UAAU,CAACE,OAAX;AACAD,QAAAA,WAAW,CAACC,OAAZ;AACH,OAbI,MAcA;AACD,cAAM,IAAIlD,KAAJ,CAAW,gCAA+BP,IAAK,MAAKM,KAAM,EAA1D,CAAN;AACH;;AACDc,MAAAA,MAAM,IAAIc,IAAI,GAAGkB,WAAjB;AACH;;AACD,QAAI9C,KAAK,KAAK,WAAd,EAA2B;AACvB0B,MAAAA,GAAG,CAAChC,IAAD,CAAH,GAAYb,MAAM,CAACgD,MAAD,EAAS1B,KAAT,EAAgBH,KAAhB,CAAlB;AACH;AACJ;;AACD,SAAO0B,GAAP;AACH;AACD;AACA;AACA;;AACA,OAAO,SAASF,sBAAT,CAAgC4B,EAAhC,EAAoC;AACvC;AACA,MAAIA,EAAE,KAAK,IAAX,EAAiB;AACb,UAAM,IAAInD,KAAJ,CAAW,wBAAuBoD,IAAI,CAACC,SAAL,CAAeF,EAAf,CAAmB,EAArD,CAAN;AACH;;AACD,MAAIG,eAAe,GAAG,CAAtB,CALuC,CAMvC;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,QAAMC,YAAY,GAAG,EAArB;AACAJ,EAAAA,EAAE,CAACK,OAAH,CAAYC,CAAD,IAAO;AACdH,IAAAA,eAAe,IAAIG,CAAC,CAACb,UAArB,CADc,CAEd;;AACAW,IAAAA,YAAY,CAACpC,IAAb,CAAkBsC,CAAC,CAACb,UAAF,KAAiBa,CAAC,CAACxC,MAAF,CAAS2B,UAA1B,GAAuCa,CAAvC,GACd,IAAIA,CAAC,CAACC,WAAN,CAAkBD,CAAlB,CADJ;;AAEA,QAAI,EAAEA,CAAC,YAAYtB,YAAb,IAA6BsB,CAAC,YAAYhB,UAA1C,IACFgB,CAAC,YAAY7C,UADb,CAAJ,EAC8B;AAC1B,YAAM,IAAIZ,KAAJ,CAAW,mCAAkCyD,CAAC,CAACC,WAAF,CAAcjE,IAAK,EAAhE,CAAN;AACH,KARa,CASd;;AACH,GAVD;AAWA,QAAMkE,CAAC,GAAG,IAAI/C,UAAJ,CAAe0C,eAAf,CAAV;AACA,MAAIzC,MAAM,GAAG,CAAb;AACA0C,EAAAA,YAAY,CAACC,OAAb,CAAsBC,CAAD,IAAO;AACxBE,IAAAA,CAAC,CAACzC,GAAF,CAAM,IAAIN,UAAJ,CAAe6C,CAAC,CAACxC,MAAjB,CAAN,EAAgCJ,MAAhC;AACAA,IAAAA,MAAM,IAAI4C,CAAC,CAACb,UAAZ;AACH,GAHD;AAIA,SAAOe,CAAC,CAAC1C,MAAT;AACH,C,CACD;;AACA,MAAM2C,aAAa,GAAG,OAAOC,MAAP,KAAkB,WAAlB,KACjB,OAAOC,IAAP,KAAgB,WAAhB,IAA+B,OAAOC,IAAP,KAAgB,WAA/C,IACG,OAAOC,IAAP,KAAgB,WAFF,CAAtB;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,gBAAT,CAA0BC,GAA1B,EAA+B;AAClC,MAAIN,aAAJ,EAAmB;AACf,WAAOC,MAAM,CAACjB,UAAP,CAAkBsB,GAAlB,CAAP;AACH;;AACD,SAAO,IAAIJ,IAAJ,CAAS,CAACI,GAAD,CAAT,EAAgBvC,IAAvB;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASwC,yBAAT,CAAmClD,MAAnC,EAA2C;AAC9C,MAAI2C,aAAJ,EAAmB;AACf,WAAOC,MAAM,CAACO,IAAP,CAAYnD,MAAZ,EAAoBoD,QAApB,CAA6B,QAA7B,CAAP;AACH;;AACD,QAAMC,GAAG,GAAG,IAAI1D,UAAJ,CAAeK,MAAf,CAAZ;AACA,MAAIsD,CAAC,GAAG,EAAR;;AACA,OAAK,IAAI3E,CAAC,GAAG,CAAR,EAAW4E,CAAC,GAAGF,GAAG,CAACzE,MAAxB,EAAgCD,CAAC,GAAG4E,CAApC,EAAuC5E,CAAC,EAAxC,EAA4C;AACxC2E,IAAAA,CAAC,IAAIE,MAAM,CAACC,YAAP,CAAoBJ,GAAG,CAAC1E,CAAD,CAAvB,CAAL;AACH;;AACD,SAAOoE,IAAI,CAACO,CAAD,CAAX;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASI,yBAAT,CAAmCT,GAAnC,EAAwC;AAC3C,MAAIN,aAAJ,EAAmB;AACf,UAAMU,GAAG,GAAGT,MAAM,CAACO,IAAP,CAAYF,GAAZ,EAAiB,QAAjB,CAAZ;AACA,WAAOI,GAAG,CAACrD,MAAJ,CAAWe,KAAX,CAAiBsC,GAAG,CAACM,UAArB,EAAiCN,GAAG,CAACM,UAAJ,GAAiBN,GAAG,CAAC1B,UAAtD,CAAP;AACH;;AACD,QAAM2B,CAAC,GAAGR,IAAI,CAACG,GAAD,CAAd;AACA,QAAMjD,MAAM,GAAG,IAAIL,UAAJ,CAAe2D,CAAC,CAAC1E,MAAjB,CAAf;;AACA,OAAK,IAAID,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG2E,CAAC,CAAC1E,MAAtB,EAA8B,EAAED,CAAhC,EAAmC;AAC/BqB,IAAAA,MAAM,CAACC,GAAP,CAAW,CAACqD,CAAC,CAACM,UAAF,CAAajF,CAAb,CAAD,CAAX,EAA8BA,CAA9B;AACH;;AACD,SAAOqB,MAAM,CAACA,MAAd;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAS6D,uBAAT,CAAiCC,OAAjC,EAA0C;AAC7C,MAAIA,OAAO,CAAClF,MAAR,KAAmB,CAAvB,EAA0B;AACtB,WAAOkF,OAAO,CAAC,CAAD,CAAd;AACH;;AACD,MAAIzB,eAAe,GAAG,CAAtB;AACAyB,EAAAA,OAAO,CAACvB,OAAR,CAAiBvC,MAAD,IAAY;AACxBqC,IAAAA,eAAe,IAAIrC,MAAM,CAAC2B,UAA1B;AACH,GAFD;AAGA,QAAMoC,IAAI,GAAG,IAAIpE,UAAJ,CAAe0C,eAAf,CAAb;AACA,MAAIzC,MAAM,GAAG,CAAb;AACAkE,EAAAA,OAAO,CAACvB,OAAR,CAAiBvC,MAAD,IAAY;AACxB+D,IAAAA,IAAI,CAAC9D,GAAL,CAAS,IAAIN,UAAJ,CAAeK,MAAf,CAAT,EAAiCJ,MAAjC;AACAA,IAAAA,MAAM,IAAII,MAAM,CAAC2B,UAAjB;AACH,GAHD;AAIA,SAAOoC,IAAI,CAAC/D,MAAZ;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASgE,QAAT,CAAkBC,IAAlB,EAAwB;AAC3B,QAAMC,SAAS,GAAG,GAAlB;AACAD,EAAAA,IAAI,GAAGA,IAAI,CAACE,IAAL,EAAP;;AACA,SAAOF,IAAI,CAACG,QAAL,CAAcF,SAAd,CAAP,EAAiC;AAC7BD,IAAAA,IAAI,GAAGA,IAAI,CAAClD,KAAL,CAAW,CAAX,EAAckD,IAAI,CAACrF,MAAL,GAAc,CAA5B,CAAP;AACH;;AACD,QAAMyF,KAAK,GAAGJ,IAAI,CAACK,KAAL,CAAWJ,SAAX,CAAd;AACA,SAAOG,KAAK,CAACA,KAAK,CAACzF,MAAN,GAAe,CAAhB,CAAZ;AACH;AACD;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAS2F,4BAAT,CAAsCC,cAAtC,EAAsD;AACzD,MAAIA,cAAc,CAACC,aAAf,YAAwCC,WAA5C,EAAyD;AACrD,UAAM,IAAI3F,KAAJ,CAAU,qDAAV,CAAN;AACH;;AACD,SAAO;AACH4F,IAAAA,SAAS,EAAE,IAAIC,IAAJ,EADR;AAEHC,IAAAA,iBAAiB,EAAE,MAFhB;AAGHC,IAAAA,kBAAkB,EAAEN,cAAc,CAACC,aAAf,IAAgC,IAAhC,GAChB,CADgB,GAEhBzB,gBAAgB,CAACb,IAAI,CAACC,SAAL,CAAeoC,cAAc,CAACC,aAA9B,CAAD,CALjB;AAMHM,IAAAA,gBAAgB,EAAEP,cAAc,CAACQ,WAAf,IAA8B,IAA9B,GACd,CADc,GAEdhC,gBAAgB,CAACb,IAAI,CAACC,SAAL,CAAeoC,cAAc,CAACQ,WAA9B,CAAD,CARjB;AASHC,IAAAA,eAAe,EAAET,cAAc,CAACU,UAAf,IAA6B,IAA7B,GACb,CADa,GAEbV,cAAc,CAACU,UAAf,CAA0BvD;AAX3B,GAAP;AAaH;AACD;AACA;AACA;AACA;AACA;AACA;;AACA,SAASwD,0BAAT,GAAsC;AAClC,QAAMC,eAAe,GAAIzG,CAAD,IAAO;AAC3B,QAAI0G,CAAC,GAAG1G,CAAC,IAAI,EAAb;AACA,QAAI2G,CAAC,GAAG,CAAR;;AACA,WAAO,CAACD,CAAC,GAAG,UAAL,MAAqB,CAA5B,EAA+B;AAC3BC,MAAAA,CAAC,IAAI,UAAL;AACAD,MAAAA,CAAC,KAAK,CAAN;AACH;;AACDA,IAAAA,CAAC,IAAI,CAAC,UAAN;AACAC,IAAAA,CAAC,IAAI,UAAL;AACA,WAAOD,CAAC,GAAGC,CAAX;AACH,GAVD;;AAWA,QAAMC,YAAY,GAAG,IAAIxF,WAAJ,CAAgB,IAAhB,CAArB;AACAwF,EAAAA,YAAY,CAAC,CAAD,CAAZ,GAAkB,CAAlB;;AACA,OAAK,IAAI5G,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,IAApB,EAA0BA,CAAC,EAA3B,EAA+B;AAC3B4G,IAAAA,YAAY,CAAC5G,CAAD,CAAZ,GAAkByG,eAAe,CAACzG,CAAD,CAAjC;AACH;;AACD,OAAK,IAAIA,CAAC,GAAG,IAAb,EAAmBA,CAAC,GAAG,IAAvB,EAA6BA,CAAC,EAA9B,EAAkC;AAC9B4G,IAAAA,YAAY,CAAC5G,CAAD,CAAZ,GAAkB,cAAeA,CAAC,GAAG,IAAL,IAAc,EAA5B,CAAlB;AACH;;AACD,SAAO4G,YAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,2BAAT,GAAuC;AACnC,QAAMC,aAAa,GAAG,IAAI1F,WAAJ,CAAgB,EAAhB,CAAtB;AACA0F,EAAAA,aAAa,CAAC,CAAD,CAAb,GAAmB,CAAnB;AACAA,EAAAA,aAAa,CAAC,EAAD,CAAb,GAAoB,UAApB;AACAA,EAAAA,aAAa,CAAC,EAAD,CAAb,GAAoB,UAApB;AACAA,EAAAA,aAAa,CAAC,EAAD,CAAb,GAAoB,UAApB;;AACA,OAAK,IAAI9G,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AACzB8G,IAAAA,aAAa,CAAC9G,CAAD,CAAb,GAAmBA,CAAC,IAAI,EAAxB;AACH;;AACD,OAAK,IAAIA,CAAC,GAAG,EAAb,EAAiBA,CAAC,GAAG,EAArB,EAAyBA,CAAC,EAA1B,EAA8B;AAC1B8G,IAAAA,aAAa,CAAC9G,CAAD,CAAb,GAAmB,cAAeA,CAAC,GAAG,EAAL,IAAY,EAA1B,CAAnB;AACH;;AACD,SAAO8G,aAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,yBAAT,GAAqC;AACjC,QAAMC,WAAW,GAAG,IAAI5F,WAAJ,CAAgB,EAAhB,CAApB;;AACA,OAAK,IAAIpB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AACzBgH,IAAAA,WAAW,CAAChH,CAAD,CAAX,GAAiB,IAAjB;AACH;;AACDgH,EAAAA,WAAW,CAAC,CAAD,CAAX,GAAiBA,WAAW,CAAC,EAAD,CAAX,GAAkB,CAAnC;AACA,SAAOA,WAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,SAASpE,iBAAT,GAA6B;AAChC;AACA;AACA;AACA,QAAMgE,YAAY,GAAGJ,0BAA0B,EAA/C;AACA,QAAMM,aAAa,GAAGD,2BAA2B,EAAjD;AACA,QAAMG,WAAW,GAAGD,yBAAyB,EAA7C;AACA,SAAQ1E,cAAD,IAAoB;AACvB,UAAMhB,MAAM,GAAG,IAAI0E,WAAJ,CAAgB,IAAI1D,cAAc,CAACpC,MAAnC,CAAf;AACA,UAAMgH,gBAAgB,GAAG,IAAI7F,WAAJ,CAAgBC,MAAhB,CAAzB;;AACA,SAAK,IAAI6F,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAG7E,cAAc,CAACpC,MAA3C,EAAmDiH,KAAK,EAAxD,EAA4D;AACxD,YAAMC,WAAW,GAAG9E,cAAc,CAAC6E,KAAD,CAAlC;AACA,YAAME,WAAW,GAAGR,YAAY,CAACI,WAAW,CAACG,WAAW,IAAI,EAAhB,CAAX,IAAkCA,WAAW,GAAG,KAAhD,CAAD,CAAZ,GAChBL,aAAa,CAACK,WAAW,IAAI,EAAhB,CADjB;AAEAF,MAAAA,gBAAgB,CAACC,KAAD,CAAhB,GAA0BE,WAA1B;AACH;;AACD,WAAO,IAAI7E,YAAJ,CAAiBlB,MAAjB,CAAP;AACH,GAVD;AAWH","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { complex } from '../ops/complex';\nimport { tensor } from '../ops/tensor';\nimport { sizeFromShape } from '../util';\nimport { DTYPE_VALUE_SIZE_MAP } from './types';\n/** Number of bytes reserved for the length of the string. (32bit integer). */\nconst NUM_BYTES_STRING_LENGTH = 4;\n/**\n * Encode a map from names to weight values as an ArrayBuffer, along with an\n * `Array` of `WeightsManifestEntry` as specification of the encoded weights.\n *\n * This function does not perform sharding.\n *\n * This function is the reverse of `decodeWeights`.\n *\n * @param tensors A map (\"dict\") from names to tensors.\n * @param group Group to which the weights belong (optional).\n * @returns A `Promise` of\n *   - A flat `ArrayBuffer` with all the binary values of the `Tensor`s\n *     concatenated.\n *   - An `Array` of `WeightManifestEntry`s, carrying information including\n *     tensor names, `dtype`s and shapes.\n * @throws Error: on unsupported tensor `dtype`.\n */\nexport async function encodeWeights(tensors, group) {\n    // TODO(adarob, cais): Support quantization.\n    const specs = [];\n    const dataPromises = [];\n    const names = Array.isArray(tensors) ?\n        tensors.map(tensor => tensor.name) :\n        Object.keys(tensors);\n    for (let i = 0; i < names.length; ++i) {\n        const name = names[i];\n        const t = Array.isArray(tensors) ? tensors[i].tensor : tensors[name];\n        if (t.dtype !== 'float32' && t.dtype !== 'int32' && t.dtype !== 'bool' &&\n            t.dtype !== 'string' && t.dtype !== 'complex64') {\n            throw new Error(`Unsupported dtype in weight '${name}': ${t.dtype}`);\n        }\n        const spec = { name, shape: t.shape, dtype: t.dtype };\n        if (t.dtype === 'string') {\n            const utf8bytes = new Promise(async (resolve) => {\n                const vals = await t.bytes();\n                const totalNumBytes = vals.reduce((p, c) => p + c.length, 0) +\n                    NUM_BYTES_STRING_LENGTH * vals.length;\n                const bytes = new Uint8Array(totalNumBytes);\n                let offset = 0;\n                for (let i = 0; i < vals.length; i++) {\n                    const val = vals[i];\n                    const bytesOfLength = new Uint8Array(new Uint32Array([val.length]).buffer);\n                    bytes.set(bytesOfLength, offset);\n                    offset += NUM_BYTES_STRING_LENGTH;\n                    bytes.set(val, offset);\n                    offset += val.length;\n                }\n                resolve(bytes);\n            });\n            dataPromises.push(utf8bytes);\n        }\n        else {\n            dataPromises.push(t.data());\n        }\n        if (group != null) {\n            spec.group = group;\n        }\n        specs.push(spec);\n    }\n    const tensorValues = await Promise.all(dataPromises);\n    return { data: concatenateTypedArrays(tensorValues), specs };\n}\n/**\n * Decode flat ArrayBuffer as weights.\n *\n * This function does not handle sharding.\n *\n * This function is the reverse of `encodeWeights`.\n *\n * @param buffer A flat ArrayBuffer carrying the binary values of the tensors\n *   concatenated in the order specified in `specs`.\n * @param specs Specifications of the names, dtypes and shapes of the tensors\n *   whose value are encoded by `buffer`.\n * @return A map from tensor name to tensor value, with the names corresponding\n *   to names in `specs`.\n * @throws Error, if any of the tensors has unsupported dtype.\n */\nexport function decodeWeights(buffer, specs) {\n    // TODO(adarob, cais): Support quantization.\n    const out = {};\n    let float16Decode;\n    let offset = 0;\n    for (const spec of specs) {\n        const name = spec.name;\n        const dtype = spec.dtype;\n        const shape = spec.shape;\n        const size = sizeFromShape(shape);\n        let values;\n        if ('quantization' in spec) {\n            const quantization = spec.quantization;\n            if (quantization.dtype === 'uint8' || quantization.dtype === 'uint16') {\n                if (!('min' in quantization && 'scale' in quantization)) {\n                    throw new Error(`Weight ${spec.name} with quantization ${quantization.dtype} ` +\n                        `doesn't have corresponding metadata min and scale.`);\n                }\n            }\n            else if (quantization.dtype === 'float16') {\n                if (dtype !== 'float32') {\n                    throw new Error(`Weight ${spec.name} is quantized with ${quantization.dtype} ` +\n                        `which only supports weights of type float32 not ${dtype}.`);\n                }\n            }\n            else {\n                throw new Error(`Weight ${spec.name} has unknown ` +\n                    `quantization dtype ${quantization.dtype}. ` +\n                    `Supported quantization dtypes are: ` +\n                    `'uint8', 'uint16', and 'float16'.`);\n            }\n            const quantizationSizeFactor = DTYPE_VALUE_SIZE_MAP[quantization.dtype];\n            const byteBuffer = buffer.slice(offset, offset + size * quantizationSizeFactor);\n            const quantizedArray = (quantization.dtype === 'uint8') ?\n                new Uint8Array(byteBuffer) :\n                new Uint16Array(byteBuffer);\n            if (dtype === 'float32') {\n                if (quantization.dtype === 'uint8' || quantization.dtype === 'uint16') {\n                    values = new Float32Array(quantizedArray.length);\n                    for (let i = 0; i < quantizedArray.length; i++) {\n                        const v = quantizedArray[i];\n                        values[i] = v * quantization.scale + quantization.min;\n                    }\n                }\n                else if (quantization.dtype === 'float16') {\n                    if (float16Decode === undefined) {\n                        float16Decode = getFloat16Decoder();\n                    }\n                    values = float16Decode(quantizedArray);\n                }\n                else {\n                    throw new Error(`Unsupported quantization type ${quantization.dtype} ` +\n                        `for weight type float32.`);\n                }\n            }\n            else if (dtype === 'int32') {\n                if (quantization.dtype !== 'uint8' && quantization.dtype !== 'uint16') {\n                    throw new Error(`Unsupported quantization type ${quantization.dtype} ` +\n                        `for weight type int32.`);\n                }\n                values = new Int32Array(quantizedArray.length);\n                for (let i = 0; i < quantizedArray.length; i++) {\n                    const v = quantizedArray[i];\n                    values[i] = Math.round(v * quantization.scale + quantization.min);\n                }\n            }\n            else {\n                throw new Error(`Unsupported dtype in weight '${name}': ${dtype}`);\n            }\n            offset += size * quantizationSizeFactor;\n        }\n        else if (dtype === 'string') {\n            const size = sizeFromShape(spec.shape);\n            values = [];\n            for (let i = 0; i < size; i++) {\n                const byteLength = new Uint32Array(buffer.slice(offset, offset + NUM_BYTES_STRING_LENGTH))[0];\n                offset += NUM_BYTES_STRING_LENGTH;\n                const bytes = new Uint8Array(buffer.slice(offset, offset + byteLength));\n                values.push(bytes);\n                offset += byteLength;\n            }\n        }\n        else {\n            const dtypeFactor = DTYPE_VALUE_SIZE_MAP[dtype];\n            const byteBuffer = buffer.slice(offset, offset + size * dtypeFactor);\n            if (dtype === 'float32') {\n                values = new Float32Array(byteBuffer);\n            }\n            else if (dtype === 'int32') {\n                values = new Int32Array(byteBuffer);\n            }\n            else if (dtype === 'bool') {\n                values = new Uint8Array(byteBuffer);\n            }\n            else if (dtype === 'complex64') {\n                values = new Float32Array(byteBuffer);\n                const real = new Float32Array(values.length / 2);\n                const image = new Float32Array(values.length / 2);\n                for (let i = 0; i < real.length; i++) {\n                    real[i] = values[i * 2];\n                    image[i] = values[i * 2 + 1];\n                }\n                const realTensor = tensor(real, shape, 'float32');\n                const imageTensor = tensor(image, shape, 'float32');\n                out[name] = complex(realTensor, imageTensor);\n                realTensor.dispose();\n                imageTensor.dispose();\n            }\n            else {\n                throw new Error(`Unsupported dtype in weight '${name}': ${dtype}`);\n            }\n            offset += size * dtypeFactor;\n        }\n        if (dtype !== 'complex64') {\n            out[name] = tensor(values, shape, dtype);\n        }\n    }\n    return out;\n}\n/**\n * Concatenate TypedArrays into an ArrayBuffer.\n */\nexport function concatenateTypedArrays(xs) {\n    // TODO(adarob, cais): Support quantization.\n    if (xs === null) {\n        throw new Error(`Invalid input value: ${JSON.stringify(xs)}`);\n    }\n    let totalByteLength = 0;\n    // `normalizedXs` is here for this reason: a `TypedArray`'s `buffer'\n    // can have a different byte length from that of the `TypedArray` itself,\n    // for example, when the `TypedArray` is created from an offset in an\n    // `ArrayBuffer`. `normliazedXs` holds `TypedArray`s whose `buffer`s match\n    // the `TypedArray` in byte length. If an element of `xs` does not show\n    // this property, a new `TypedArray` that satisfy this property will be\n    // constructed and pushed into `normalizedXs`.\n    const normalizedXs = [];\n    xs.forEach((x) => {\n        totalByteLength += x.byteLength;\n        // tslint:disable:no-any\n        normalizedXs.push(x.byteLength === x.buffer.byteLength ? x :\n            new x.constructor(x));\n        if (!(x instanceof Float32Array || x instanceof Int32Array ||\n            x instanceof Uint8Array)) {\n            throw new Error(`Unsupported TypedArray subtype: ${x.constructor.name}`);\n        }\n        // tslint:enable:no-any\n    });\n    const y = new Uint8Array(totalByteLength);\n    let offset = 0;\n    normalizedXs.forEach((x) => {\n        y.set(new Uint8Array(x.buffer), offset);\n        offset += x.byteLength;\n    });\n    return y.buffer;\n}\n// Use Buffer on Node.js instead of Blob/atob/btoa\nconst useNodeBuffer = typeof Buffer !== 'undefined' &&\n    (typeof Blob === 'undefined' || typeof atob === 'undefined' ||\n        typeof btoa === 'undefined');\n/**\n * Calculate the byte length of a JavaScript string.\n *\n * Note that a JavaScript string can contain wide characters, therefore the\n * length of the string is not necessarily equal to the byte length.\n *\n * @param str Input string.\n * @returns Byte length.\n */\nexport function stringByteLength(str) {\n    if (useNodeBuffer) {\n        return Buffer.byteLength(str);\n    }\n    return new Blob([str]).size;\n}\n/**\n * Encode an ArrayBuffer as a base64 encoded string.\n *\n * @param buffer `ArrayBuffer` to be converted.\n * @returns A string that base64-encodes `buffer`.\n */\nexport function arrayBufferToBase64String(buffer) {\n    if (useNodeBuffer) {\n        return Buffer.from(buffer).toString('base64');\n    }\n    const buf = new Uint8Array(buffer);\n    let s = '';\n    for (let i = 0, l = buf.length; i < l; i++) {\n        s += String.fromCharCode(buf[i]);\n    }\n    return btoa(s);\n}\n/**\n * Decode a base64 string as an ArrayBuffer.\n *\n * @param str Base64 string.\n * @returns Decoded `ArrayBuffer`.\n */\nexport function base64StringToArrayBuffer(str) {\n    if (useNodeBuffer) {\n        const buf = Buffer.from(str, 'base64');\n        return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);\n    }\n    const s = atob(str);\n    const buffer = new Uint8Array(s.length);\n    for (let i = 0; i < s.length; ++i) {\n        buffer.set([s.charCodeAt(i)], i);\n    }\n    return buffer.buffer;\n}\n/**\n * Concatenate a number of ArrayBuffers into one.\n *\n * @param buffers A number of array buffers to concatenate.\n * @returns Result of concatenating `buffers` in order.\n */\nexport function concatenateArrayBuffers(buffers) {\n    if (buffers.length === 1) {\n        return buffers[0];\n    }\n    let totalByteLength = 0;\n    buffers.forEach((buffer) => {\n        totalByteLength += buffer.byteLength;\n    });\n    const temp = new Uint8Array(totalByteLength);\n    let offset = 0;\n    buffers.forEach((buffer) => {\n        temp.set(new Uint8Array(buffer), offset);\n        offset += buffer.byteLength;\n    });\n    return temp.buffer;\n}\n/**\n * Get the basename of a path.\n *\n * Behaves in a way analogous to Linux's basename command.\n *\n * @param path\n */\nexport function basename(path) {\n    const SEPARATOR = '/';\n    path = path.trim();\n    while (path.endsWith(SEPARATOR)) {\n        path = path.slice(0, path.length - 1);\n    }\n    const items = path.split(SEPARATOR);\n    return items[items.length - 1];\n}\n/**\n * Populate ModelArtifactsInfo fields for a model with JSON topology.\n * @param modelArtifacts\n * @returns A ModelArtifactsInfo object.\n */\nexport function getModelArtifactsInfoForJSON(modelArtifacts) {\n    if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n        throw new Error('Expected JSON model topology, received ArrayBuffer.');\n    }\n    return {\n        dateSaved: new Date(),\n        modelTopologyType: 'JSON',\n        modelTopologyBytes: modelArtifacts.modelTopology == null ?\n            0 :\n            stringByteLength(JSON.stringify(modelArtifacts.modelTopology)),\n        weightSpecsBytes: modelArtifacts.weightSpecs == null ?\n            0 :\n            stringByteLength(JSON.stringify(modelArtifacts.weightSpecs)),\n        weightDataBytes: modelArtifacts.weightData == null ?\n            0 :\n            modelArtifacts.weightData.byteLength,\n    };\n}\n/**\n * Computes mantisa table for casting Float16 to Float32\n * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n *\n * @returns Uint32Array, 2048 mantissa lookup values.\n */\nfunction computeFloat16MantisaTable() {\n    const convertMantissa = (i) => {\n        let m = i << 13;\n        let e = 0;\n        while ((m & 0x00800000) === 0) {\n            e -= 0x00800000;\n            m <<= 1;\n        }\n        m &= ~0x00800000;\n        e += 0x38800000;\n        return m | e;\n    };\n    const mantisaTable = new Uint32Array(2048);\n    mantisaTable[0] = 0;\n    for (let i = 1; i < 1024; i++) {\n        mantisaTable[i] = convertMantissa(i);\n    }\n    for (let i = 1024; i < 2048; i++) {\n        mantisaTable[i] = 0x38000000 + ((i - 1024) << 13);\n    }\n    return mantisaTable;\n}\n/**\n * Computes exponent table for casting Float16 to Float32\n * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n *\n * @returns Uint32Array, 64 exponent lookup values.\n */\nfunction computeFloat16ExponentTable() {\n    const exponentTable = new Uint32Array(64);\n    exponentTable[0] = 0;\n    exponentTable[31] = 0x47800000;\n    exponentTable[32] = 0x80000000;\n    exponentTable[63] = 0xc7800000;\n    for (let i = 1; i < 31; i++) {\n        exponentTable[i] = i << 23;\n    }\n    for (let i = 33; i < 63; i++) {\n        exponentTable[i] = 0x80000000 + ((i - 32) << 23);\n    }\n    return exponentTable;\n}\n/**\n * Computes offset table for casting Float16 to Float32\n * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n *\n * @returns Uint32Array, 6d offset values.\n */\nfunction computeFloat16OffsetTable() {\n    const offsetTable = new Uint32Array(64);\n    for (let i = 0; i < 64; i++) {\n        offsetTable[i] = 1024;\n    }\n    offsetTable[0] = offsetTable[32] = 0;\n    return offsetTable;\n}\n/**\n * Retrieve a Float16 decoder which will decode a ByteArray of Float16 values\n * to a Float32Array.\n *\n * @returns Function (buffer: Uint16Array) => Float32Array which decodes\n *          the Uint16Array of Float16 bytes to a Float32Array.\n */\nexport function getFloat16Decoder() {\n    // Algorithm is based off of\n    // http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n    // Cache lookup tables\n    const mantisaTable = computeFloat16MantisaTable();\n    const exponentTable = computeFloat16ExponentTable();\n    const offsetTable = computeFloat16OffsetTable();\n    return (quantizedArray) => {\n        const buffer = new ArrayBuffer(4 * quantizedArray.length);\n        const bufferUint32View = new Uint32Array(buffer);\n        for (let index = 0; index < quantizedArray.length; index++) {\n            const float16Bits = quantizedArray[index];\n            const float32Bits = mantisaTable[offsetTable[float16Bits >> 10] + (float16Bits & 0x3ff)] +\n                exponentTable[float16Bits >> 10];\n            bufferUint32View[index] = float32Bits;\n        }\n        return new Float32Array(buffer);\n    };\n}\n"]},"metadata":{},"sourceType":"module"}
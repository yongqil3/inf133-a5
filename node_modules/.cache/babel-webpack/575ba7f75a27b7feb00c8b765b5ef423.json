{"ast":null,"code":"import _asyncToGenerator from \"/Users/ryanliang/Downloads/main_movir_picker/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * IOHandlers related to files, such as browser-triggered file downloads,\n * user-selected files in browser.\n */\nimport '../flags';\nimport { env } from '../environment';\nimport { basename, concatenateArrayBuffers, getModelArtifactsInfoForJSON } from './io_utils';\nimport { IORouterRegistry } from './router_registry';\nconst DEFAULT_FILE_NAME_PREFIX = 'model';\nconst DEFAULT_JSON_EXTENSION_NAME = '.json';\nconst DEFAULT_WEIGHT_DATA_EXTENSION_NAME = '.weights.bin';\n\nfunction defer(f) {\n  return new Promise(resolve => setTimeout(resolve)).then(f);\n}\n\nexport class BrowserDownloads {\n  constructor(fileNamePrefix) {\n    if (!env().getBool('IS_BROWSER')) {\n      // TODO(cais): Provide info on what IOHandlers are available under the\n      //   current environment.\n      throw new Error('browserDownloads() cannot proceed because the current environment ' + 'is not a browser.');\n    }\n\n    if (fileNamePrefix.startsWith(BrowserDownloads.URL_SCHEME)) {\n      fileNamePrefix = fileNamePrefix.slice(BrowserDownloads.URL_SCHEME.length);\n    }\n\n    if (fileNamePrefix == null || fileNamePrefix.length === 0) {\n      fileNamePrefix = DEFAULT_FILE_NAME_PREFIX;\n    }\n\n    this.modelTopologyFileName = fileNamePrefix + DEFAULT_JSON_EXTENSION_NAME;\n    this.weightDataFileName = fileNamePrefix + DEFAULT_WEIGHT_DATA_EXTENSION_NAME;\n  }\n\n  save(modelArtifacts) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (typeof document === 'undefined') {\n        throw new Error('Browser downloads are not supported in ' + 'this environment since `document` is not present');\n      }\n\n      const weightsURL = window.URL.createObjectURL(new Blob([modelArtifacts.weightData], {\n        type: 'application/octet-stream'\n      }));\n\n      if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n        throw new Error('BrowserDownloads.save() does not support saving model topology ' + 'in binary formats yet.');\n      } else {\n        const weightsManifest = [{\n          paths: ['./' + _this.weightDataFileName],\n          weights: modelArtifacts.weightSpecs\n        }];\n        const modelTopologyAndWeightManifest = {\n          modelTopology: modelArtifacts.modelTopology,\n          format: modelArtifacts.format,\n          generatedBy: modelArtifacts.generatedBy,\n          convertedBy: modelArtifacts.convertedBy,\n          weightsManifest\n        };\n\n        if (modelArtifacts.signature != null) {\n          modelTopologyAndWeightManifest.signature = modelArtifacts.signature;\n        }\n\n        if (modelArtifacts.userDefinedMetadata != null) {\n          modelTopologyAndWeightManifest.userDefinedMetadata = modelArtifacts.userDefinedMetadata;\n        }\n\n        if (modelArtifacts.modelInitializer != null) {\n          modelTopologyAndWeightManifest.modelInitializer = modelArtifacts.modelInitializer;\n        }\n\n        const modelTopologyAndWeightManifestURL = window.URL.createObjectURL(new Blob([JSON.stringify(modelTopologyAndWeightManifest)], {\n          type: 'application/json'\n        })); // If anchor elements are not provided, create them without attaching them\n        // to parents, so that the downloaded file names can be controlled.\n\n        const jsonAnchor = _this.jsonAnchor == null ? document.createElement('a') : _this.jsonAnchor;\n        jsonAnchor.download = _this.modelTopologyFileName;\n        jsonAnchor.href = modelTopologyAndWeightManifestURL; // Trigger downloads by evoking a click event on the download anchors.\n        // When multiple downloads are started synchronously, Firefox will only\n        // save the last one.\n\n        yield defer(() => jsonAnchor.dispatchEvent(new MouseEvent('click')));\n\n        if (modelArtifacts.weightData != null) {\n          const weightDataAnchor = _this.weightDataAnchor == null ? document.createElement('a') : _this.weightDataAnchor;\n          weightDataAnchor.download = _this.weightDataFileName;\n          weightDataAnchor.href = weightsURL;\n          yield defer(() => weightDataAnchor.dispatchEvent(new MouseEvent('click')));\n        }\n\n        return {\n          modelArtifactsInfo: getModelArtifactsInfoForJSON(modelArtifacts)\n        };\n      }\n    })();\n  }\n\n}\nBrowserDownloads.URL_SCHEME = 'downloads://';\n\nclass BrowserFiles {\n  constructor(files) {\n    if (files == null || files.length < 1) {\n      throw new Error(`When calling browserFiles, at least 1 file is required, ` + `but received ${files}`);\n    }\n\n    this.files = files;\n  }\n\n  load() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const jsonFile = _this2.files[0];\n\n      const weightFiles = _this2.files.slice(1);\n\n      return new Promise((resolve, reject) => {\n        const jsonReader = new FileReader();\n\n        jsonReader.onload = event => {\n          // tslint:disable-next-line:no-any\n          const modelJSON = JSON.parse(event.target.result);\n          const modelTopology = modelJSON.modelTopology;\n\n          if (modelTopology == null) {\n            reject(new Error(`modelTopology field is missing from file ${jsonFile.name}`));\n            return;\n          }\n\n          if (weightFiles.length === 0) {\n            resolve({\n              modelTopology\n            });\n          }\n\n          const weightsManifest = modelJSON.weightsManifest;\n\n          if (weightsManifest == null) {\n            reject(new Error(`weightManifest field is missing from file ${jsonFile.name}`));\n            return;\n          }\n\n          let pathToFile;\n\n          try {\n            pathToFile = _this2.checkManifestAndWeightFiles(weightsManifest, weightFiles);\n          } catch (err) {\n            reject(err);\n            return;\n          }\n\n          const weightSpecs = [];\n          const paths = [];\n          const perFileBuffers = [];\n          weightsManifest.forEach(weightsGroup => {\n            weightsGroup.paths.forEach(path => {\n              paths.push(path);\n              perFileBuffers.push(null);\n            });\n            weightSpecs.push(...weightsGroup.weights);\n          });\n          weightsManifest.forEach(weightsGroup => {\n            weightsGroup.paths.forEach(path => {\n              const weightFileReader = new FileReader();\n\n              weightFileReader.onload = event => {\n                // tslint:disable-next-line:no-any\n                const weightData = event.target.result;\n                const index = paths.indexOf(path);\n                perFileBuffers[index] = weightData;\n\n                if (perFileBuffers.indexOf(null) === -1) {\n                  const result = {\n                    modelTopology,\n                    weightSpecs,\n                    weightData: concatenateArrayBuffers(perFileBuffers),\n                    format: modelJSON.format,\n                    generatedBy: modelJSON.generatedBy,\n                    convertedBy: modelJSON.convertedBy\n                  };\n\n                  if (modelJSON.signature != null) {\n                    result.signature = modelJSON.signature;\n                  }\n\n                  if (modelJSON.userDefinedMetadata != null) {\n                    result.userDefinedMetadata = modelJSON.userDefinedMetadata;\n                  }\n\n                  if (modelJSON.modelInitializer != null) {\n                    result.modelInitializer = modelJSON.modelInitializer;\n                  }\n\n                  resolve(result);\n                }\n              };\n\n              weightFileReader.onerror = error => reject(`Failed to weights data from file of path '${path}'.`);\n\n              weightFileReader.readAsArrayBuffer(pathToFile[path]);\n            });\n          });\n        };\n\n        jsonReader.onerror = error => reject(`Failed to read model topology and weights manifest JSON ` + `from file '${jsonFile.name}'. BrowserFiles supports loading ` + `Keras-style tf.Model artifacts only.`);\n\n        jsonReader.readAsText(jsonFile);\n      });\n    })();\n  }\n  /**\n   * Check the compatibility between weights manifest and weight files.\n   */\n\n\n  checkManifestAndWeightFiles(manifest, files) {\n    const basenames = [];\n    const fileNames = files.map(file => basename(file.name));\n    const pathToFile = {};\n\n    for (const group of manifest) {\n      group.paths.forEach(path => {\n        const pathBasename = basename(path);\n\n        if (basenames.indexOf(pathBasename) !== -1) {\n          throw new Error(`Duplicate file basename found in weights manifest: ` + `'${pathBasename}'`);\n        }\n\n        basenames.push(pathBasename);\n\n        if (fileNames.indexOf(pathBasename) === -1) {\n          throw new Error(`Weight file with basename '${pathBasename}' is not provided.`);\n        } else {\n          pathToFile[path] = files[fileNames.indexOf(pathBasename)];\n        }\n      });\n    }\n\n    if (basenames.length !== files.length) {\n      throw new Error(`Mismatch in the number of files in weights manifest ` + `(${basenames.length}) and the number of weight files provided ` + `(${files.length}).`);\n    }\n\n    return pathToFile;\n  }\n\n}\n\nexport const browserDownloadsRouter = url => {\n  if (!env().getBool('IS_BROWSER')) {\n    return null;\n  } else {\n    if (!Array.isArray(url) && url.startsWith(BrowserDownloads.URL_SCHEME)) {\n      return browserDownloads(url.slice(BrowserDownloads.URL_SCHEME.length));\n    } else {\n      return null;\n    }\n  }\n};\nIORouterRegistry.registerSaveRouter(browserDownloadsRouter);\n/**\n * Creates an IOHandler that triggers file downloads from the browser.\n *\n * The returned `IOHandler` instance can be used as model exporting methods such\n * as `tf.Model.save` and supports only saving.\n *\n * ```js\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * const saveResult = await model.save('downloads://mymodel');\n * // This will trigger downloading of two files:\n * //   'mymodel.json' and 'mymodel.weights.bin'.\n * console.log(saveResult);\n * ```\n *\n * @param fileNamePrefix Prefix name of the files to be downloaded. For use with\n *   `tf.Model`, `fileNamePrefix` should follow either of the following two\n *   formats:\n *   1. `null` or `undefined`, in which case the default file\n *      names will be used:\n *      - 'model.json' for the JSON file containing the model topology and\n *        weights manifest.\n *      - 'model.weights.bin' for the binary file containing the binary weight\n *        values.\n *   2. A single string or an Array of a single string, as the file name prefix.\n *      For example, if `'foo'` is provided, the downloaded JSON\n *      file and binary weights file will be named 'foo.json' and\n *      'foo.weights.bin', respectively.\n * @param config Additional configuration for triggering downloads.\n * @returns An instance of `BrowserDownloads` `IOHandler`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Loading',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\n\nexport function browserDownloads(fileNamePrefix = 'model') {\n  return new BrowserDownloads(fileNamePrefix);\n}\n/**\n * Creates an IOHandler that loads model artifacts from user-selected files.\n *\n * This method can be used for loading from files such as user-selected files\n * in the browser.\n * When used in conjunction with `tf.loadLayersModel`, an instance of\n * `tf.LayersModel` (Keras-style) can be constructed from the loaded artifacts.\n *\n * ```js\n * // Note: This code snippet won't run properly without the actual file input\n * //   elements in the HTML DOM.\n *\n * // Suppose there are two HTML file input (`<input type=\"file\" ...>`)\n * // elements.\n * const uploadJSONInput = document.getElementById('upload-json');\n * const uploadWeightsInput = document.getElementById('upload-weights');\n * const model = await tf.loadLayersModel(tf.io.browserFiles(\n *     [uploadJSONInput.files[0], uploadWeightsInput.files[0]]));\n * ```\n *\n * @param files `File`s to load from. Currently, this function supports only\n *   loading from files that contain Keras-style models (i.e., `tf.Model`s), for\n *   which an `Array` of `File`s is expected (in that order):\n *   - A JSON file containing the model topology and weight manifest.\n *   - Optionally, One or more binary files containing the binary weights.\n *     These files must have names that match the paths in the `weightsManifest`\n *     contained by the aforementioned JSON file, or errors will be thrown\n *     during loading. These weights files have the same format as the ones\n *     generated by `tensorflowjs_converter` that comes with the `tensorflowjs`\n *     Python PIP package. If no weights files are provided, only the model\n *     topology will be loaded from the JSON file above.\n * @returns An instance of `Files` `IOHandler`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Loading',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\n\nexport function browserFiles(files) {\n  return new BrowserFiles(files);\n}","map":{"version":3,"sources":["/Users/ryanliang/Downloads/main_movir_picker/node_modules/@tensorflow/tfjs-core/dist/io/browser_files.js"],"names":["env","basename","concatenateArrayBuffers","getModelArtifactsInfoForJSON","IORouterRegistry","DEFAULT_FILE_NAME_PREFIX","DEFAULT_JSON_EXTENSION_NAME","DEFAULT_WEIGHT_DATA_EXTENSION_NAME","defer","f","Promise","resolve","setTimeout","then","BrowserDownloads","constructor","fileNamePrefix","getBool","Error","startsWith","URL_SCHEME","slice","length","modelTopologyFileName","weightDataFileName","save","modelArtifacts","document","weightsURL","window","URL","createObjectURL","Blob","weightData","type","modelTopology","ArrayBuffer","weightsManifest","paths","weights","weightSpecs","modelTopologyAndWeightManifest","format","generatedBy","convertedBy","signature","userDefinedMetadata","modelInitializer","modelTopologyAndWeightManifestURL","JSON","stringify","jsonAnchor","createElement","download","href","dispatchEvent","MouseEvent","weightDataAnchor","modelArtifactsInfo","BrowserFiles","files","load","jsonFile","weightFiles","reject","jsonReader","FileReader","onload","event","modelJSON","parse","target","result","name","pathToFile","checkManifestAndWeightFiles","err","perFileBuffers","forEach","weightsGroup","path","push","weightFileReader","index","indexOf","onerror","error","readAsArrayBuffer","readAsText","manifest","basenames","fileNames","map","file","group","pathBasename","browserDownloadsRouter","url","Array","isArray","browserDownloads","registerSaveRouter","browserFiles"],"mappings":"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,GAFD,MAGK;AACD,QAAI,CAACiF,KAAK,CAACC,OAAN,CAAcF,GAAd,CAAD,IAAuBA,GAAG,CAAC9E,UAAJ,CAAeL,gBAAgB,CAACM,UAAhC,CAA3B,EAAwE;AACpE,aAAOgF,gBAAgB,CAACH,GAAG,CAAC5E,KAAJ,CAAUP,gBAAgB,CAACM,UAAjB,CAA4BE,MAAtC,CAAD,CAAvB;AACH,KAFD,MAGK;AACD,aAAO,IAAP;AACH;AACJ;AACJ,CAZM;AAaPlB,gBAAgB,CAACiG,kBAAjB,CAAoCL,sBAApC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASI,gBAAT,CAA0BpF,cAAc,GAAG,OAA3C,EAAoD;AACvD,SAAO,IAAIF,gBAAJ,CAAqBE,cAArB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASsF,YAAT,CAAsB1C,KAAtB,EAA6B;AAChC,SAAO,IAAID,YAAJ,CAAiBC,KAAjB,CAAP;AACH","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * IOHandlers related to files, such as browser-triggered file downloads,\n * user-selected files in browser.\n */\nimport '../flags';\nimport { env } from '../environment';\nimport { basename, concatenateArrayBuffers, getModelArtifactsInfoForJSON } from './io_utils';\nimport { IORouterRegistry } from './router_registry';\nconst DEFAULT_FILE_NAME_PREFIX = 'model';\nconst DEFAULT_JSON_EXTENSION_NAME = '.json';\nconst DEFAULT_WEIGHT_DATA_EXTENSION_NAME = '.weights.bin';\nfunction defer(f) {\n    return new Promise(resolve => setTimeout(resolve)).then(f);\n}\nexport class BrowserDownloads {\n    constructor(fileNamePrefix) {\n        if (!env().getBool('IS_BROWSER')) {\n            // TODO(cais): Provide info on what IOHandlers are available under the\n            //   current environment.\n            throw new Error('browserDownloads() cannot proceed because the current environment ' +\n                'is not a browser.');\n        }\n        if (fileNamePrefix.startsWith(BrowserDownloads.URL_SCHEME)) {\n            fileNamePrefix = fileNamePrefix.slice(BrowserDownloads.URL_SCHEME.length);\n        }\n        if (fileNamePrefix == null || fileNamePrefix.length === 0) {\n            fileNamePrefix = DEFAULT_FILE_NAME_PREFIX;\n        }\n        this.modelTopologyFileName = fileNamePrefix + DEFAULT_JSON_EXTENSION_NAME;\n        this.weightDataFileName =\n            fileNamePrefix + DEFAULT_WEIGHT_DATA_EXTENSION_NAME;\n    }\n    async save(modelArtifacts) {\n        if (typeof (document) === 'undefined') {\n            throw new Error('Browser downloads are not supported in ' +\n                'this environment since `document` is not present');\n        }\n        const weightsURL = window.URL.createObjectURL(new Blob([modelArtifacts.weightData], { type: 'application/octet-stream' }));\n        if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n            throw new Error('BrowserDownloads.save() does not support saving model topology ' +\n                'in binary formats yet.');\n        }\n        else {\n            const weightsManifest = [{\n                    paths: ['./' + this.weightDataFileName],\n                    weights: modelArtifacts.weightSpecs\n                }];\n            const modelTopologyAndWeightManifest = {\n                modelTopology: modelArtifacts.modelTopology,\n                format: modelArtifacts.format,\n                generatedBy: modelArtifacts.generatedBy,\n                convertedBy: modelArtifacts.convertedBy,\n                weightsManifest\n            };\n            if (modelArtifacts.signature != null) {\n                modelTopologyAndWeightManifest.signature = modelArtifacts.signature;\n            }\n            if (modelArtifacts.userDefinedMetadata != null) {\n                modelTopologyAndWeightManifest.userDefinedMetadata =\n                    modelArtifacts.userDefinedMetadata;\n            }\n            if (modelArtifacts.modelInitializer != null) {\n                modelTopologyAndWeightManifest.modelInitializer =\n                    modelArtifacts.modelInitializer;\n            }\n            const modelTopologyAndWeightManifestURL = window.URL.createObjectURL(new Blob([JSON.stringify(modelTopologyAndWeightManifest)], { type: 'application/json' }));\n            // If anchor elements are not provided, create them without attaching them\n            // to parents, so that the downloaded file names can be controlled.\n            const jsonAnchor = this.jsonAnchor == null ? document.createElement('a') :\n                this.jsonAnchor;\n            jsonAnchor.download = this.modelTopologyFileName;\n            jsonAnchor.href = modelTopologyAndWeightManifestURL;\n            // Trigger downloads by evoking a click event on the download anchors.\n            // When multiple downloads are started synchronously, Firefox will only\n            // save the last one.\n            await defer(() => jsonAnchor.dispatchEvent(new MouseEvent('click')));\n            if (modelArtifacts.weightData != null) {\n                const weightDataAnchor = this.weightDataAnchor == null ?\n                    document.createElement('a') :\n                    this.weightDataAnchor;\n                weightDataAnchor.download = this.weightDataFileName;\n                weightDataAnchor.href = weightsURL;\n                await defer(() => weightDataAnchor.dispatchEvent(new MouseEvent('click')));\n            }\n            return { modelArtifactsInfo: getModelArtifactsInfoForJSON(modelArtifacts) };\n        }\n    }\n}\nBrowserDownloads.URL_SCHEME = 'downloads://';\nclass BrowserFiles {\n    constructor(files) {\n        if (files == null || files.length < 1) {\n            throw new Error(`When calling browserFiles, at least 1 file is required, ` +\n                `but received ${files}`);\n        }\n        this.files = files;\n    }\n    async load() {\n        const jsonFile = this.files[0];\n        const weightFiles = this.files.slice(1);\n        return new Promise((resolve, reject) => {\n            const jsonReader = new FileReader();\n            jsonReader.onload = (event) => {\n                // tslint:disable-next-line:no-any\n                const modelJSON = JSON.parse(event.target.result);\n                const modelTopology = modelJSON.modelTopology;\n                if (modelTopology == null) {\n                    reject(new Error(`modelTopology field is missing from file ${jsonFile.name}`));\n                    return;\n                }\n                if (weightFiles.length === 0) {\n                    resolve({ modelTopology });\n                }\n                const weightsManifest = modelJSON.weightsManifest;\n                if (weightsManifest == null) {\n                    reject(new Error(`weightManifest field is missing from file ${jsonFile.name}`));\n                    return;\n                }\n                let pathToFile;\n                try {\n                    pathToFile =\n                        this.checkManifestAndWeightFiles(weightsManifest, weightFiles);\n                }\n                catch (err) {\n                    reject(err);\n                    return;\n                }\n                const weightSpecs = [];\n                const paths = [];\n                const perFileBuffers = [];\n                weightsManifest.forEach(weightsGroup => {\n                    weightsGroup.paths.forEach(path => {\n                        paths.push(path);\n                        perFileBuffers.push(null);\n                    });\n                    weightSpecs.push(...weightsGroup.weights);\n                });\n                weightsManifest.forEach(weightsGroup => {\n                    weightsGroup.paths.forEach(path => {\n                        const weightFileReader = new FileReader();\n                        weightFileReader.onload = (event) => {\n                            // tslint:disable-next-line:no-any\n                            const weightData = event.target.result;\n                            const index = paths.indexOf(path);\n                            perFileBuffers[index] = weightData;\n                            if (perFileBuffers.indexOf(null) === -1) {\n                                const result = {\n                                    modelTopology,\n                                    weightSpecs,\n                                    weightData: concatenateArrayBuffers(perFileBuffers),\n                                    format: modelJSON.format,\n                                    generatedBy: modelJSON.generatedBy,\n                                    convertedBy: modelJSON.convertedBy\n                                };\n                                if (modelJSON.signature != null) {\n                                    result.signature = modelJSON.signature;\n                                }\n                                if (modelJSON.userDefinedMetadata != null) {\n                                    result.userDefinedMetadata = modelJSON.userDefinedMetadata;\n                                }\n                                if (modelJSON.modelInitializer != null) {\n                                    result.modelInitializer = modelJSON.modelInitializer;\n                                }\n                                resolve(result);\n                            }\n                        };\n                        weightFileReader.onerror = error => reject(`Failed to weights data from file of path '${path}'.`);\n                        weightFileReader.readAsArrayBuffer(pathToFile[path]);\n                    });\n                });\n            };\n            jsonReader.onerror = error => reject(`Failed to read model topology and weights manifest JSON ` +\n                `from file '${jsonFile.name}'. BrowserFiles supports loading ` +\n                `Keras-style tf.Model artifacts only.`);\n            jsonReader.readAsText(jsonFile);\n        });\n    }\n    /**\n     * Check the compatibility between weights manifest and weight files.\n     */\n    checkManifestAndWeightFiles(manifest, files) {\n        const basenames = [];\n        const fileNames = files.map(file => basename(file.name));\n        const pathToFile = {};\n        for (const group of manifest) {\n            group.paths.forEach(path => {\n                const pathBasename = basename(path);\n                if (basenames.indexOf(pathBasename) !== -1) {\n                    throw new Error(`Duplicate file basename found in weights manifest: ` +\n                        `'${pathBasename}'`);\n                }\n                basenames.push(pathBasename);\n                if (fileNames.indexOf(pathBasename) === -1) {\n                    throw new Error(`Weight file with basename '${pathBasename}' is not provided.`);\n                }\n                else {\n                    pathToFile[path] = files[fileNames.indexOf(pathBasename)];\n                }\n            });\n        }\n        if (basenames.length !== files.length) {\n            throw new Error(`Mismatch in the number of files in weights manifest ` +\n                `(${basenames.length}) and the number of weight files provided ` +\n                `(${files.length}).`);\n        }\n        return pathToFile;\n    }\n}\nexport const browserDownloadsRouter = (url) => {\n    if (!env().getBool('IS_BROWSER')) {\n        return null;\n    }\n    else {\n        if (!Array.isArray(url) && url.startsWith(BrowserDownloads.URL_SCHEME)) {\n            return browserDownloads(url.slice(BrowserDownloads.URL_SCHEME.length));\n        }\n        else {\n            return null;\n        }\n    }\n};\nIORouterRegistry.registerSaveRouter(browserDownloadsRouter);\n/**\n * Creates an IOHandler that triggers file downloads from the browser.\n *\n * The returned `IOHandler` instance can be used as model exporting methods such\n * as `tf.Model.save` and supports only saving.\n *\n * ```js\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * const saveResult = await model.save('downloads://mymodel');\n * // This will trigger downloading of two files:\n * //   'mymodel.json' and 'mymodel.weights.bin'.\n * console.log(saveResult);\n * ```\n *\n * @param fileNamePrefix Prefix name of the files to be downloaded. For use with\n *   `tf.Model`, `fileNamePrefix` should follow either of the following two\n *   formats:\n *   1. `null` or `undefined`, in which case the default file\n *      names will be used:\n *      - 'model.json' for the JSON file containing the model topology and\n *        weights manifest.\n *      - 'model.weights.bin' for the binary file containing the binary weight\n *        values.\n *   2. A single string or an Array of a single string, as the file name prefix.\n *      For example, if `'foo'` is provided, the downloaded JSON\n *      file and binary weights file will be named 'foo.json' and\n *      'foo.weights.bin', respectively.\n * @param config Additional configuration for triggering downloads.\n * @returns An instance of `BrowserDownloads` `IOHandler`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Loading',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nexport function browserDownloads(fileNamePrefix = 'model') {\n    return new BrowserDownloads(fileNamePrefix);\n}\n/**\n * Creates an IOHandler that loads model artifacts from user-selected files.\n *\n * This method can be used for loading from files such as user-selected files\n * in the browser.\n * When used in conjunction with `tf.loadLayersModel`, an instance of\n * `tf.LayersModel` (Keras-style) can be constructed from the loaded artifacts.\n *\n * ```js\n * // Note: This code snippet won't run properly without the actual file input\n * //   elements in the HTML DOM.\n *\n * // Suppose there are two HTML file input (`<input type=\"file\" ...>`)\n * // elements.\n * const uploadJSONInput = document.getElementById('upload-json');\n * const uploadWeightsInput = document.getElementById('upload-weights');\n * const model = await tf.loadLayersModel(tf.io.browserFiles(\n *     [uploadJSONInput.files[0], uploadWeightsInput.files[0]]));\n * ```\n *\n * @param files `File`s to load from. Currently, this function supports only\n *   loading from files that contain Keras-style models (i.e., `tf.Model`s), for\n *   which an `Array` of `File`s is expected (in that order):\n *   - A JSON file containing the model topology and weight manifest.\n *   - Optionally, One or more binary files containing the binary weights.\n *     These files must have names that match the paths in the `weightsManifest`\n *     contained by the aforementioned JSON file, or errors will be thrown\n *     during loading. These weights files have the same format as the ones\n *     generated by `tensorflowjs_converter` that comes with the `tensorflowjs`\n *     Python PIP package. If no weights files are provided, only the model\n *     topology will be loaded from the JSON file above.\n * @returns An instance of `Files` `IOHandler`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Loading',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nexport function browserFiles(files) {\n    return new BrowserFiles(files);\n}\n"]},"metadata":{},"sourceType":"module"}